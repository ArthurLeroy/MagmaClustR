[{"path":"https://arthurleroy.github.io/MagmaClustR/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 Arthur Leroy Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Arthur Leroy. Author, maintainer. Pierre Pathé. Contributor. Pierre Latouche. Author.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Leroy , Latouche P (2022). MagmaClustR: Clustering Prediction using Multi-Task Gaussian Processes Common Mean. https://github.com/ArthurLeroy/MagmaClustR, https://arthurleroy.github.io/MagmaClustR/.","code":"@Manual{,   title = {MagmaClustR: Clustering and Prediction using Multi-Task Gaussian Processes with Common Mean},   author = {Arthur Leroy and Pierre Latouche},   year = {2022},   note = {https://github.com/ArthurLeroy/MagmaClustR, https://arthurleroy.github.io/MagmaClustR/}, }"},{"path":"https://arthurleroy.github.io/MagmaClustR/index.html","id":"magmaclustr-","dir":"","previous_headings":"","what":"Clustering and Prediction using Multi-Task Gaussian Processes with\n    Common Mean","title":"Clustering and Prediction using Multi-Task Gaussian Processes with\n    Common Mean","text":"MagmaClustR package implements two main algorithms, called Magma (Leroy et al., 2022) MagmaClust (Leroy et al., 2020), using multi-task Gaussian processes (GP) model perform predictions supervised learning problems. Applications involving functional data, multiple time series, particularly well-handled. Theses approaches leverage learning cluster-specific mean processes, common across similar tasks, provide enhanced prediction performances (even far data points) linear computational cost (number tasks). MagmaClust generalisation Magma tasks simultaneously clustered groups, associated specific mean process. User-oriented functions package decomposed training, prediction plotting functions. basic features standard GPs also implemented. Leroy, ., Latouche, P., Guedj, B., Gey, S. MAGMA: inference prediction using multi-task Gaussian processes common mean. Mach Learn 111, 1821–1849 (2022). https://doi.org/10.1007/s10994-022-06172-1 Leroy, ., Latouche, P., Guedj, B., & Gey, S. Cluster-Specific Predictions Multi-Task Gaussian Processes. arXiv preprint (2020). https://arxiv.org/abs/2011.07866","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Clustering and Prediction using Multi-Task Gaussian Processes with\n    Common Mean","text":"can install released version MagmaClustR CRAN : development version GitHub :","code":"install.packages(\"MagmaClustR\") # install.packages(\"devtools\") devtools::install_github(\"ArthurLeroy/MagmaClustR\")"},{"path":"https://arthurleroy.github.io/MagmaClustR/index.html","id":"example-magma","dir":"","previous_headings":"","what":"Example: Magma","title":"Clustering and Prediction using Multi-Task Gaussian Processes with\n    Common Mean","text":"basic example simulate dataset adequate format, train Magma model use perform predictions.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/index.html","id":"data-generation","dir":"","previous_headings":"Example: Magma","what":"Data generation","title":"Clustering and Prediction using Multi-Task Gaussian Processes with\n    Common Mean","text":"","code":"library(MagmaClustR) ## Simulate a dataset with 11 individuals, each observed at 10 input locations set.seed(2) data_magma <- simu_db(M = 11, N = 10, common_input = FALSE) ## Split individuals into training and prediction sets, and define test points magma_train <- data_magma %>% subset(ID %in% 1:10) magma_pred <- data_magma %>% subset(ID == 11) %>% head(5) magma_test <- data_magma %>% subset(ID == 11) %>% tail(5)  data_magma #> # A tibble: 110 x 3 #>    ID    Output Input #>    <chr>  <dbl> <dbl> #>  1 1       1.52  1.9  #>  2 1      -5.76  3.3  #>  3 1      -3.78  3.35 #>  4 1       7.23  5.25 #>  5 1      14.9   6.2  #>  6 1       7.48  7.4  #>  7 1       7.21  8.15 #>  8 1      11.5   8.2  #>  9 1      13.1   8.9  #> 10 1       8.72  9.5  #> # ... with 100 more rows"},{"path":"https://arthurleroy.github.io/MagmaClustR/index.html","id":"training-and-prediction-with-magma","dir":"","previous_headings":"Example: Magma","what":"Training and prediction with Magma","title":"Clustering and Prediction using Multi-Task Gaussian Processes with\n    Common Mean","text":"Note grid_inputs argument optional. merely allows users control grid values prediction performed.","code":"model <- train_magma(data = magma_train) #> The 'prior_mean' argument has not been specified. The hyper_prior mean function is thus set to be 0 everywhere. #>   #> The 'ini_hp_0' argument has not been specified. Random values of hyper-parameters for the mean process are used as initialisation. #>   #> Called from: train_magma(data = magma_train) #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#238: if (\"ID\" %in% names(hp_0)) { #>     hp_0 = hp_0[names(hp_0) != \"ID\"] #> } #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#243: if (kern_i %>% is.function()) { #>     if (ini_hp_i %>% is.null()) { #>         stop(\"When using a custom kernel function the 'ini_hp_i' argument is \",  #>             \"mandatory, in order to provide the name of the hyper-parameters. \",  #>             \"You can use the function 'hp()' to easily generate a tibble of random\",  #>             \" hyper-parameters with the desired format for initialisation.\") #>     } #> } else { #>     if (ini_hp_i %>% is.null()) { #>         hp_i <- hp(kern_i, list_ID = list_ID, common_hp = common_hp,  #>             noise = TRUE) #>         cat(\"The 'ini_hp_i' argument has not been specified. Random values of\",  #>             \"hyper-parameters for the individal processes are used as\",  #>             \"initialisation.\\n \\n\") #>     } #>     else if (!(\"ID\" %in% names(ini_hp_i))) { #>         hp_i <- tibble::tibble(ID = list_ID, dplyr::bind_rows(ini_hp_i)) #>     } #>     else if (!(all(as.character(ini_hp_i$ID) %in% as.character(list_ID)) &  #>         all(as.character(list_ID) %in% as.character(ini_hp_i$ID)))) { #>         stop(\"The 'ID' column in 'ini_hp_i' is different from the 'ID' of the \",  #>             \"'data'.\") #>     } #>     else { #>         hp_i <- ini_hp_i #>     } #> } #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#253: if (ini_hp_i %>% is.null()) { #>     hp_i <- hp(kern_i, list_ID = list_ID, common_hp = common_hp,  #>         noise = TRUE) #>     cat(\"The 'ini_hp_i' argument has not been specified. Random values of\",  #>         \"hyper-parameters for the individal processes are used as\",  #>         \"initialisation.\\n \\n\") #> } else if (!(\"ID\" %in% names(ini_hp_i))) { #>     hp_i <- tibble::tibble(ID = list_ID, dplyr::bind_rows(ini_hp_i)) #> } else if (!(all(as.character(ini_hp_i$ID) %in% as.character(list_ID)) &  #>     all(as.character(list_ID) %in% as.character(ini_hp_i$ID)))) { #>     stop(\"The 'ID' column in 'ini_hp_i' is different from the 'ID' of the \",  #>         \"'data'.\") #> } else { #>     hp_i <- ini_hp_i #> } #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#254: hp_i <- hp(kern_i, list_ID = list_ID, common_hp = common_hp,  #>     noise = TRUE) #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#255: cat(\"The 'ini_hp_i' argument has not been specified. Random values of\",  #>     \"hyper-parameters for the individal processes are used as\",  #>     \"initialisation.\\n \\n\") #> The 'ini_hp_i' argument has not been specified. Random values of hyper-parameters for the individal processes are used as initialisation. #>   #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#278: if (!(\"noise\" %in% names(hp_i))) { #>     if (common_hp) { #>         hp_i <- hp_i %>% dplyr::mutate(hp(NULL, noise = T)) #>     } #>     else { #>         hp_i <- hp_i %>% dplyr::left_join(hp(NULL, list_ID = hp_i$ID,  #>             noise = T), by = \"ID\") #>     } #> } #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#288: hp_i_ini <- hp_i #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#289: hp_0_ini <- hp_0 #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#291: cv <- FALSE #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#292: logL_monitoring <- -Inf #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#293: seq_loglikelihood <- c() #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#296: for (i in 1:n_iter_max) { #>     t_i_1 <- Sys.time() #>     post <- e_step(db = data, m_0 = m_0, kern_0 = kern_0, kern_i = kern_i,  #>         hp_0 = hp_0, hp_i = hp_i, pen_diag = pen_diag) #>     if (fast_approx) { #>         seq_loglikelihood <- logL_monitoring(hp_0 = hp_0, hp_i = hp_i,  #>             db = data, m_0 = m_0, kern_0 = kern_0, kern_i = kern_i,  #>             post_mean = post$mean, post_cov = post$cov, pen_diag = pen_diag) #>         cv <- FALSE #>         break #>     } #>     new_hp <- m_step(db = data, m_0 = m_0, kern_0 = kern_0, kern_i = kern_i,  #>         old_hp_0 = hp_0, old_hp_i = hp_i, post_mean = post$mean,  #>         post_cov = post$cov, common_hp = common_hp, pen_diag = pen_diag) #>     new_hp_0 <- new_hp$hp_0 #>     new_hp_i <- new_hp$hp_i #>     if (any(is.na(new_hp_0)) | any(is.na(new_hp_i))) { #>         warning(paste0(\"The M-step encountered an error at iteration : \",  #>             i)) #>         warning(\"Training has stopped and hyper-parameters values from the \",  #>             \"last valid iteration are returned.\") #>         break #>     } #>     new_logL_monitoring <- logL_monitoring(hp_0 = new_hp_0, hp_i = new_hp_i,  #>         db = data, m_0 = m_0, kern_0 = kern_0, kern_i = kern_i,  #>         post_mean = post$mean, post_cov = post$cov, pen_diag = pen_diag) #>     diff_logL <- new_logL_monitoring - logL_monitoring #>     if (diff_logL %>% is.nan()) { #>         diff_logL <- -Inf #>     } #>     if (diff_logL < 0) { #>         warning(\"The likelihood descreased. Possible numerical issues.\") #>     } #>     hp_0 <- new_hp_0 #>     hp_i <- new_hp_i #>     logL_monitoring <- new_logL_monitoring #>     seq_loglikelihood <- c(seq_loglikelihood, logL_monitoring) #>     eps <- diff_logL/abs(logL_monitoring) #>     if (eps %>% is.nan()) { #>         eps <- 1 #>     } #>     t_i_2 <- Sys.time() #>     paste0(\"EM algorithm, step \", i, \": \", difftime(t_i_2, t_i_1,  #>         units = \"secs\") %>% round(2), \" seconds \\n \\n\") %>% cat() #>     paste0(\"Value of the likelihood: \", logL_monitoring %>% round(5),  #>         \" --- Convergence ratio = \", eps %>% round(5), \"\\n \\n\") %>%  #>         cat() #>     if (abs(eps) < cv_threshold) { #>         cat(\"The EM algorithm successfully converged, training is completed.\",  #>             \"\\n \\n\") #>         cv <- TRUE #>         break #>     } #> } #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#299: t_i_1 <- Sys.time() #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#302: post <- e_step(db = data, m_0 = m_0, kern_0 = kern_0, kern_i = kern_i,  #>     hp_0 = hp_0, hp_i = hp_i, pen_diag = pen_diag) #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#313: if (fast_approx) { #>     seq_loglikelihood <- logL_monitoring(hp_0 = hp_0, hp_i = hp_i,  #>         db = data, m_0 = m_0, kern_0 = kern_0, kern_i = kern_i,  #>         post_mean = post$mean, post_cov = post$cov, pen_diag = pen_diag) #>     cv <- FALSE #>     break #> } #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#332: new_hp <- m_step(db = data, m_0 = m_0, kern_0 = kern_0, kern_i = kern_i,  #>     old_hp_0 = hp_0, old_hp_i = hp_i, post_mean = post$mean,  #>     post_cov = post$cov, common_hp = common_hp, pen_diag = pen_diag) #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#344: new_hp_0 <- new_hp$hp_0 #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#345: new_hp_i <- new_hp$hp_i #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#348: if (any(is.na(new_hp_0)) | any(is.na(new_hp_i))) { #>     warning(paste0(\"The M-step encountered an error at iteration : \",  #>         i)) #>     warning(\"Training has stopped and hyper-parameters values from the \",  #>         \"last valid iteration are returned.\") #>     break #> } #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#358: new_logL_monitoring <- logL_monitoring(hp_0 = new_hp_0, hp_i = new_hp_i,  #>     db = data, m_0 = m_0, kern_0 = kern_0, kern_i = kern_i, post_mean = post$mean,  #>     post_cov = post$cov, pen_diag = pen_diag) #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#370: diff_logL <- new_logL_monitoring - logL_monitoring #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#371: if (diff_logL %>% is.nan()) { #>     diff_logL <- -Inf #> } #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#375: if (diff_logL < 0) { #>     warning(\"The likelihood descreased. Possible numerical issues.\") #> } #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#380: hp_0 <- new_hp_0 #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#381: hp_i <- new_hp_i #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#382: logL_monitoring <- new_logL_monitoring #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#385: seq_loglikelihood <- c(seq_loglikelihood, logL_monitoring) #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#388: eps <- diff_logL/abs(logL_monitoring) #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#389: if (eps %>% is.nan()) { #>     eps <- 1 #> } #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#394: t_i_2 <- Sys.time() #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#395: paste0(\"EM algorithm, step \", i, \": \", difftime(t_i_2, t_i_1,  #>     units = \"secs\") %>% round(2), \" seconds \\n \\n\") %>% cat() #> EM algorithm, step 1: 18.48 seconds  #>   #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#402: paste0(\"Value of the likelihood: \", logL_monitoring %>% round(5),  #>     \" --- Convergence ratio = \", eps %>% round(5), \"\\n \\n\") %>%  #>     cat() #> Value of the likelihood: -379.55987 --- Convergence ratio = Inf #>   #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#412: if (abs(eps) < cv_threshold) { #>     cat(\"The EM algorithm successfully converged, training is completed.\",  #>         \"\\n \\n\") #>     cv <- TRUE #>     break #> } #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#299: t_i_1 <- Sys.time() #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#302: post <- e_step(db = data, m_0 = m_0, kern_0 = kern_0, kern_i = kern_i,  #>     hp_0 = hp_0, hp_i = hp_i, pen_diag = pen_diag) #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#313: if (fast_approx) { #>     seq_loglikelihood <- logL_monitoring(hp_0 = hp_0, hp_i = hp_i,  #>         db = data, m_0 = m_0, kern_0 = kern_0, kern_i = kern_i,  #>         post_mean = post$mean, post_cov = post$cov, pen_diag = pen_diag) #>     cv <- FALSE #>     break #> } #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#332: new_hp <- m_step(db = data, m_0 = m_0, kern_0 = kern_0, kern_i = kern_i,  #>     old_hp_0 = hp_0, old_hp_i = hp_i, post_mean = post$mean,  #>     post_cov = post$cov, common_hp = common_hp, pen_diag = pen_diag) #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#344: new_hp_0 <- new_hp$hp_0 #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#345: new_hp_i <- new_hp$hp_i #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#348: if (any(is.na(new_hp_0)) | any(is.na(new_hp_i))) { #>     warning(paste0(\"The M-step encountered an error at iteration : \",  #>         i)) #>     warning(\"Training has stopped and hyper-parameters values from the \",  #>         \"last valid iteration are returned.\") #>     break #> } #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#358: new_logL_monitoring <- logL_monitoring(hp_0 = new_hp_0, hp_i = new_hp_i,  #>     db = data, m_0 = m_0, kern_0 = kern_0, kern_i = kern_i, post_mean = post$mean,  #>     post_cov = post$cov, pen_diag = pen_diag) #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#370: diff_logL <- new_logL_monitoring - logL_monitoring #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#371: if (diff_logL %>% is.nan()) { #>     diff_logL <- -Inf #> } #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#375: if (diff_logL < 0) { #>     warning(\"The likelihood descreased. Possible numerical issues.\") #> } #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#380: hp_0 <- new_hp_0 #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#381: hp_i <- new_hp_i #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#382: logL_monitoring <- new_logL_monitoring #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#385: seq_loglikelihood <- c(seq_loglikelihood, logL_monitoring) #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#388: eps <- diff_logL/abs(logL_monitoring) #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#389: if (eps %>% is.nan()) { #>     eps <- 1 #> } #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#394: t_i_2 <- Sys.time() #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#395: paste0(\"EM algorithm, step \", i, \": \", difftime(t_i_2, t_i_1,  #>     units = \"secs\") %>% round(2), \" seconds \\n \\n\") %>% cat() #> EM algorithm, step 2: 9.83 seconds  #>   #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#402: paste0(\"Value of the likelihood: \", logL_monitoring %>% round(5),  #>     \" --- Convergence ratio = \", eps %>% round(5), \"\\n \\n\") %>%  #>     cat() #> Value of the likelihood: -374.3461 --- Convergence ratio = 0.01393 #>   #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#412: if (abs(eps) < cv_threshold) { #>     cat(\"The EM algorithm successfully converged, training is completed.\",  #>         \"\\n \\n\") #>     cv <- TRUE #>     break #> } #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#299: t_i_1 <- Sys.time() #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#302: post <- e_step(db = data, m_0 = m_0, kern_0 = kern_0, kern_i = kern_i,  #>     hp_0 = hp_0, hp_i = hp_i, pen_diag = pen_diag) #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#313: if (fast_approx) { #>     seq_loglikelihood <- logL_monitoring(hp_0 = hp_0, hp_i = hp_i,  #>         db = data, m_0 = m_0, kern_0 = kern_0, kern_i = kern_i,  #>         post_mean = post$mean, post_cov = post$cov, pen_diag = pen_diag) #>     cv <- FALSE #>     break #> } #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#332: new_hp <- m_step(db = data, m_0 = m_0, kern_0 = kern_0, kern_i = kern_i,  #>     old_hp_0 = hp_0, old_hp_i = hp_i, post_mean = post$mean,  #>     post_cov = post$cov, common_hp = common_hp, pen_diag = pen_diag) #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#344: new_hp_0 <- new_hp$hp_0 #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#345: new_hp_i <- new_hp$hp_i #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#348: if (any(is.na(new_hp_0)) | any(is.na(new_hp_i))) { #>     warning(paste0(\"The M-step encountered an error at iteration : \",  #>         i)) #>     warning(\"Training has stopped and hyper-parameters values from the \",  #>         \"last valid iteration are returned.\") #>     break #> } #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#358: new_logL_monitoring <- logL_monitoring(hp_0 = new_hp_0, hp_i = new_hp_i,  #>     db = data, m_0 = m_0, kern_0 = kern_0, kern_i = kern_i, post_mean = post$mean,  #>     post_cov = post$cov, pen_diag = pen_diag) #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#370: diff_logL <- new_logL_monitoring - logL_monitoring #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#371: if (diff_logL %>% is.nan()) { #>     diff_logL <- -Inf #> } #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#375: if (diff_logL < 0) { #>     warning(\"The likelihood descreased. Possible numerical issues.\") #> } #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#380: hp_0 <- new_hp_0 #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#381: hp_i <- new_hp_i #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#382: logL_monitoring <- new_logL_monitoring #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#385: seq_loglikelihood <- c(seq_loglikelihood, logL_monitoring) #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#388: eps <- diff_logL/abs(logL_monitoring) #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#389: if (eps %>% is.nan()) { #>     eps <- 1 #> } #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#394: t_i_2 <- Sys.time() #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#395: paste0(\"EM algorithm, step \", i, \": \", difftime(t_i_2, t_i_1,  #>     units = \"secs\") %>% round(2), \" seconds \\n \\n\") %>% cat() #> EM algorithm, step 3: 9.7 seconds  #>   #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#402: paste0(\"Value of the likelihood: \", logL_monitoring %>% round(5),  #>     \" --- Convergence ratio = \", eps %>% round(5), \"\\n \\n\") %>%  #>     cat() #> Value of the likelihood: -374.17964 --- Convergence ratio = 0.00044 #>   #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#412: if (abs(eps) < cv_threshold) { #>     cat(\"The EM algorithm successfully converged, training is completed.\",  #>         \"\\n \\n\") #>     cv <- TRUE #>     break #> } #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#413: cat(\"The EM algorithm successfully converged, training is completed.\",  #>     \"\\n \\n\") #> The EM algorithm successfully converged, training is completed.  #>   #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#417: cv <- TRUE #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#418: break #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#422: if (!cv & (i == n_iter_max)) { #>     warning(\"The EM algorithm has reached the maximum number of iterations \",  #>         \"before convergence, training might be sub-optimal \\n \\n\") #> } #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#430: if (!is.null(grid_inputs)) { #>     cat(\"Start evaluating hyper-posterior distribution of the mean process\",  #>         \"on the provided grid of inputs... \\n \\n\") #>     post <- hyperposterior(data = data, hp_0 = hp_0, hp_i = hp_i,  #>         kern_0 = kern_0, kern_i = kern_i, prior_mean = prior_mean,  #>         grid_inputs = grid_inputs, pen_diag = pen_diag) #>     cat(\"Done!\\n \\n\") #> } else { #>     post$pred <- tibble::tibble(Input = post$mean %>% dplyr::pull(.data$Input),  #>         Mean = post$mean %>% dplyr::pull(.data$Output), Var = post$cov %>%  #>             diag() %>% as.vector()) #> } #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#449: post$pred <- tibble::tibble(Input = post$mean %>% dplyr::pull(.data$Input),  #>     Mean = post$mean %>% dplyr::pull(.data$Output), Var = post$cov %>%  #>         diag() %>% as.vector()) #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#457: fct_args <- list(data = data, prior_mean = prior_mean, ini_hp_0 = hp_0_ini,  #>     ini_hp_i = hp_i_ini, kern_0 = kern_0, kern_i = kern_i, common_hp = common_hp,  #>     grid_inputs = grid_inputs, pen_diag = pen_diag, n_iter_max = n_iter_max,  #>     cv_threshold = cv_threshold) #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#471: t_2 <- Sys.time() #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#473: list(hp_0 = hp_0, hp_i = hp_i, hyperpost = post, ini_args = fct_args,  #>     seq_loglikelihood = seq_loglikelihood, converged = cv, training_time = difftime(t_2,  #>         t_1, units = \"secs\")) %>% return()  pred  <- pred_magma(data = magma_pred,                     trained_model = model,                      grid_inputs = seq(0,10, 0.01)) #> The hyper-posterior distribution of the mean process provided in 'hyperpost' argument isn't evaluated on the expected inputs. #>   #>  Start evaluating the hyper-posterior on the correct inputs... #>   #> The 'prior_mean' argument has not been specified. The hyper-prior mean function is thus set to be 0 everywhere. #>   #> Done! #>"},{"path":"https://arthurleroy.github.io/MagmaClustR/index.html","id":"display-the-resulting-predictions","dir":"","previous_headings":"Example: Magma","what":"Display the resulting predictions","title":"Clustering and Prediction using Multi-Task Gaussian Processes with\n    Common Mean","text":"Several arguments available specific plotting function offer additional control display results. instance, GP prediction can represented heatmap probabilities:  Additionally, also possible create animated representations using functions generate GIFs. instance, , true testing points represented red dots can observe prediction evolves add data points prediction dataset.  Note grid_inputs argument optional. merely allows users control grid values prediction performed.","code":"plot_gp(pred_gp = pred,         data = magma_pred,         data_train = magma_train,         prior_mean = model$hyperpost$mean,         heatmap = TRUE) pred_gif  <- pred_gif(data = magma_pred,                       trained_model = model,                       grid_inputs = seq(0, 10, 0.01)) #>  => 1 => 2 => 3 => 4 => 5  plot_gif(pred_gp = pred_gif,         data = magma_pred,         data_train = magma_train,         prior_mean = model$hyperpost$mean) +    ggplot2::geom_point(data = magma_test,                        ggplot2::aes(x = Input, y = Output),                        color = 'red')"},{"path":"https://arthurleroy.github.io/MagmaClustR/index.html","id":"example-magmaclust","dir":"","previous_headings":"","what":"Example: MagmaClust","title":"Clustering and Prediction using Multi-Task Gaussian Processes with\n    Common Mean","text":"basic example simulate dataset adequate format, train MagmaClust model use perform simultaneous clustering predictions.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/index.html","id":"data-generation-1","dir":"","previous_headings":"Example: MagmaClust","what":"Data generation","title":"Clustering and Prediction using Multi-Task Gaussian Processes with\n    Common Mean","text":"","code":"## Simulate a dataset containing 3 clusters of 4 individuals, each observed at 10 input locations set.seed(2)  data_magmaclust <- simu_db(M = 4, N = 10, K = 3)  ## Split individuals into training and prediction sets, and define test points list_ID = unique(data_magmaclust$ID) magmaclust_train <- data_magmaclust %>% subset(ID %in% list_ID[1:11]) magmaclust_pred <- data_magmaclust %>% subset(ID == list_ID[12]) %>% head(5) magmaclust_test <- data_magmaclust %>% subset(ID == list_ID[12]) %>% tail(5)  data_magmaclust #> # A tibble: 120 x 3 #>    ID         Output Input #>    <chr>       <dbl> <dbl> #>  1 ID1-Clust1 -11.1   0.25 #>  2 ID1-Clust1  -7.64  0.8  #>  3 ID1-Clust1  -4.91  2    #>  4 ID1-Clust1 -13.2   4.2  #>  5 ID1-Clust1 -14.3   4.6  #>  6 ID1-Clust1 -13.0   6.2  #>  7 ID1-Clust1 -14.1   6.75 #>  8 ID1-Clust1 -20.3   7.95 #>  9 ID1-Clust1 -14.5   8.85 #> 10 ID1-Clust1 -12.2   9.85 #> # ... with 110 more rows"},{"path":"https://arthurleroy.github.io/MagmaClustR/index.html","id":"training-and-prediction-with-magmaclust","dir":"","previous_headings":"Example: MagmaClust","what":"Training and prediction with MagmaClust","title":"Clustering and Prediction using Multi-Task Gaussian Processes with\n    Common Mean","text":"","code":"model_clust <- train_magmaclust(data = magmaclust_train) #> The number of cluster argument has not been specified. There will be 3 cluster by default.  #>   #> The 'ini_hp_i' argument has not been specified. Random values of hyper-parameters for the individual processes are used as initialisation. #>   #> The 'ini_hp_k' argument has not been specified. Random values of hyper-parameters for the mean processes are used as initialisation. #>   #> The 'prior_mean' argument has not been specified. The hyper_prior mean function is thus set to be 0 everywhere. #>   #> VEM algorithm, step 1: 83.24 seconds  #>   #> Value of the elbo: -403.8673 --- Convergence ratio = Inf #>   #> VEM algorithm, step 2: 28.76 seconds  #>   #> Value of the elbo: -383.34763 --- Convergence ratio = 0.05353 #>   #> VEM algorithm, step 3: 23.63 seconds  #>   #> Value of the elbo: -383.08831 --- Convergence ratio = 0.00068 #>   #> The EM algorithm successfully converged, training is completed.  #>   pred_clust  <- pred_magmaclust(data = magmaclust_pred,                     trained_model = model_clust,                     grid_inputs = seq(0, 10, 0.01),                      plot = FALSE) #> The hyper-posterior distribution of the mean process provided in 'hyperpost' argument isn't evaluated on the expected inputs. Start evaluating the hyper-posterior on the correct inputs... #>   #> The 'prior_mean_k' argument has not been specified. The hyper-prior  mean functions are thus set to be 0 everywhere. #>   #> Done! #>"},{"path":"https://arthurleroy.github.io/MagmaClustR/index.html","id":"display-the-resulting-predictions-1","dir":"","previous_headings":"Example: MagmaClust","what":"Display the resulting predictions","title":"Clustering and Prediction using Multi-Task Gaussian Processes with\n    Common Mean","text":", specific plotting function provided. MagmaClust, advise use heatmap representation priority, mixture GPs may unimodal general (thus prevents definition Credible Interval).","code":"## Allocate individuals to their most probable cluster to colour them by clusters afterwards data_train_with_clust = data_allocate_cluster(model_clust)  plot_magmaclust(pred = pred_clust,                 cluster = \"all\",                 data = magmaclust_pred,                 data_train = data_train_with_clust,                 col_clust = TRUE,                 prior_mean = model_clust$hyperpost$mean,                 y_grid = seq(0, 60, 0.5),                 heatmap = TRUE)"},{"path":"https://arthurleroy.github.io/MagmaClustR/index.html","id":"example-in-2-dimensions","dir":"","previous_headings":"","what":"Example: in 2-dimensions","title":"Clustering and Prediction using Multi-Task Gaussian Processes with\n    Common Mean","text":"Although unidimensional-input problems easier visualise, Magma MagmaClust can also applied many covariates desired model.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/index.html","id":"data-generation-2","dir":"","previous_headings":"Example: in 2-dimensions","what":"Data generation","title":"Clustering and Prediction using Multi-Task Gaussian Processes with\n    Common Mean","text":"","code":"library(MagmaClustR) ## Dataset with 11 individuals, 10 reference input locations and a covariate set.seed(2)  data_dim2 <- simu_db(M = 11, N = 10, covariate = TRUE)  ## Split individuals into training and prediction sets, and define test points dim2_train <- data_dim2 %>% subset(ID %in% 1:10) dim2_pred <- data_dim2 %>% subset(ID == 11) %>% head(5) dim2_test <- data_dim2 %>% subset(ID == 11) %>% tail(5)  data_dim2 #> # A tibble: 110 x 4 #>    ID    Output Input Covariate #>    <chr>  <dbl> <dbl>     <dbl> #>  1 1     -11.1   0.25     -2    #>  2 1      -7.64  0.8       1.94 #>  3 1      -4.91  2         4.64 #>  4 1     -13.2   4.2      -3.7  #>  5 1     -14.3   4.6      -4.24 #>  6 1     -13.0   6.2       0.68 #>  7 1     -14.1   6.75      0.55 #>  8 1     -20.3   7.95     -4.38 #>  9 1     -14.5   8.85      1.74 #> 10 1     -12.2   9.85      4.14 #> # ... with 100 more rows"},{"path":"https://arthurleroy.github.io/MagmaClustR/index.html","id":"training-and-prediction-with-magma-1","dir":"","previous_headings":"Example: in 2-dimensions","what":"Training and prediction with Magma","title":"Clustering and Prediction using Multi-Task Gaussian Processes with\n    Common Mean","text":"","code":"model_dim2 <- train_magma(data = dim2_train) #> The 'prior_mean' argument has not been specified. The hyper_prior mean function is thus set to be 0 everywhere. #>   #> The 'ini_hp_0' argument has not been specified. Random values of hyper-parameters for the mean process are used as initialisation. #>   #> Called from: train_magma(data = dim2_train) #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#238: if (\"ID\" %in% names(hp_0)) { #>     hp_0 = hp_0[names(hp_0) != \"ID\"] #> } #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#243: if (kern_i %>% is.function()) { #>     if (ini_hp_i %>% is.null()) { #>         stop(\"When using a custom kernel function the 'ini_hp_i' argument is \",  #>             \"mandatory, in order to provide the name of the hyper-parameters. \",  #>             \"You can use the function 'hp()' to easily generate a tibble of random\",  #>             \" hyper-parameters with the desired format for initialisation.\") #>     } #> } else { #>     if (ini_hp_i %>% is.null()) { #>         hp_i <- hp(kern_i, list_ID = list_ID, common_hp = common_hp,  #>             noise = TRUE) #>         cat(\"The 'ini_hp_i' argument has not been specified. Random values of\",  #>             \"hyper-parameters for the individal processes are used as\",  #>             \"initialisation.\\n \\n\") #>     } #>     else if (!(\"ID\" %in% names(ini_hp_i))) { #>         hp_i <- tibble::tibble(ID = list_ID, dplyr::bind_rows(ini_hp_i)) #>     } #>     else if (!(all(as.character(ini_hp_i$ID) %in% as.character(list_ID)) &  #>         all(as.character(list_ID) %in% as.character(ini_hp_i$ID)))) { #>         stop(\"The 'ID' column in 'ini_hp_i' is different from the 'ID' of the \",  #>             \"'data'.\") #>     } #>     else { #>         hp_i <- ini_hp_i #>     } #> } #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#253: if (ini_hp_i %>% is.null()) { #>     hp_i <- hp(kern_i, list_ID = list_ID, common_hp = common_hp,  #>         noise = TRUE) #>     cat(\"The 'ini_hp_i' argument has not been specified. Random values of\",  #>         \"hyper-parameters for the individal processes are used as\",  #>         \"initialisation.\\n \\n\") #> } else if (!(\"ID\" %in% names(ini_hp_i))) { #>     hp_i <- tibble::tibble(ID = list_ID, dplyr::bind_rows(ini_hp_i)) #> } else if (!(all(as.character(ini_hp_i$ID) %in% as.character(list_ID)) &  #>     all(as.character(list_ID) %in% as.character(ini_hp_i$ID)))) { #>     stop(\"The 'ID' column in 'ini_hp_i' is different from the 'ID' of the \",  #>         \"'data'.\") #> } else { #>     hp_i <- ini_hp_i #> } #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#254: hp_i <- hp(kern_i, list_ID = list_ID, common_hp = common_hp,  #>     noise = TRUE) #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#255: cat(\"The 'ini_hp_i' argument has not been specified. Random values of\",  #>     \"hyper-parameters for the individal processes are used as\",  #>     \"initialisation.\\n \\n\") #> The 'ini_hp_i' argument has not been specified. Random values of hyper-parameters for the individal processes are used as initialisation. #>   #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#278: if (!(\"noise\" %in% names(hp_i))) { #>     if (common_hp) { #>         hp_i <- hp_i %>% dplyr::mutate(hp(NULL, noise = T)) #>     } #>     else { #>         hp_i <- hp_i %>% dplyr::left_join(hp(NULL, list_ID = hp_i$ID,  #>             noise = T), by = \"ID\") #>     } #> } #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#288: hp_i_ini <- hp_i #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#289: hp_0_ini <- hp_0 #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#291: cv <- FALSE #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#292: logL_monitoring <- -Inf #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#293: seq_loglikelihood <- c() #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#296: for (i in 1:n_iter_max) { #>     t_i_1 <- Sys.time() #>     post <- e_step(db = data, m_0 = m_0, kern_0 = kern_0, kern_i = kern_i,  #>         hp_0 = hp_0, hp_i = hp_i, pen_diag = pen_diag) #>     if (fast_approx) { #>         seq_loglikelihood <- logL_monitoring(hp_0 = hp_0, hp_i = hp_i,  #>             db = data, m_0 = m_0, kern_0 = kern_0, kern_i = kern_i,  #>             post_mean = post$mean, post_cov = post$cov, pen_diag = pen_diag) #>         cv <- FALSE #>         break #>     } #>     new_hp <- m_step(db = data, m_0 = m_0, kern_0 = kern_0, kern_i = kern_i,  #>         old_hp_0 = hp_0, old_hp_i = hp_i, post_mean = post$mean,  #>         post_cov = post$cov, common_hp = common_hp, pen_diag = pen_diag) #>     new_hp_0 <- new_hp$hp_0 #>     new_hp_i <- new_hp$hp_i #>     if (any(is.na(new_hp_0)) | any(is.na(new_hp_i))) { #>         warning(paste0(\"The M-step encountered an error at iteration : \",  #>             i)) #>         warning(\"Training has stopped and hyper-parameters values from the \",  #>             \"last valid iteration are returned.\") #>         break #>     } #>     new_logL_monitoring <- logL_monitoring(hp_0 = new_hp_0, hp_i = new_hp_i,  #>         db = data, m_0 = m_0, kern_0 = kern_0, kern_i = kern_i,  #>         post_mean = post$mean, post_cov = post$cov, pen_diag = pen_diag) #>     diff_logL <- new_logL_monitoring - logL_monitoring #>     if (diff_logL %>% is.nan()) { #>         diff_logL <- -Inf #>     } #>     if (diff_logL < 0) { #>         warning(\"The likelihood descreased. Possible numerical issues.\") #>     } #>     hp_0 <- new_hp_0 #>     hp_i <- new_hp_i #>     logL_monitoring <- new_logL_monitoring #>     seq_loglikelihood <- c(seq_loglikelihood, logL_monitoring) #>     eps <- diff_logL/abs(logL_monitoring) #>     if (eps %>% is.nan()) { #>         eps <- 1 #>     } #>     t_i_2 <- Sys.time() #>     paste0(\"EM algorithm, step \", i, \": \", difftime(t_i_2, t_i_1,  #>         units = \"secs\") %>% round(2), \" seconds \\n \\n\") %>% cat() #>     paste0(\"Value of the likelihood: \", logL_monitoring %>% round(5),  #>         \" --- Convergence ratio = \", eps %>% round(5), \"\\n \\n\") %>%  #>         cat() #>     if (abs(eps) < cv_threshold) { #>         cat(\"The EM algorithm successfully converged, training is completed.\",  #>             \"\\n \\n\") #>         cv <- TRUE #>         break #>     } #> } #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#299: t_i_1 <- Sys.time() #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#302: post <- e_step(db = data, m_0 = m_0, kern_0 = kern_0, kern_i = kern_i,  #>     hp_0 = hp_0, hp_i = hp_i, pen_diag = pen_diag) #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#313: if (fast_approx) { #>     seq_loglikelihood <- logL_monitoring(hp_0 = hp_0, hp_i = hp_i,  #>         db = data, m_0 = m_0, kern_0 = kern_0, kern_i = kern_i,  #>         post_mean = post$mean, post_cov = post$cov, pen_diag = pen_diag) #>     cv <- FALSE #>     break #> } #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#332: new_hp <- m_step(db = data, m_0 = m_0, kern_0 = kern_0, kern_i = kern_i,  #>     old_hp_0 = hp_0, old_hp_i = hp_i, post_mean = post$mean,  #>     post_cov = post$cov, common_hp = common_hp, pen_diag = pen_diag) #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#344: new_hp_0 <- new_hp$hp_0 #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#345: new_hp_i <- new_hp$hp_i #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#348: if (any(is.na(new_hp_0)) | any(is.na(new_hp_i))) { #>     warning(paste0(\"The M-step encountered an error at iteration : \",  #>         i)) #>     warning(\"Training has stopped and hyper-parameters values from the \",  #>         \"last valid iteration are returned.\") #>     break #> } #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#358: new_logL_monitoring <- logL_monitoring(hp_0 = new_hp_0, hp_i = new_hp_i,  #>     db = data, m_0 = m_0, kern_0 = kern_0, kern_i = kern_i, post_mean = post$mean,  #>     post_cov = post$cov, pen_diag = pen_diag) #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#370: diff_logL <- new_logL_monitoring - logL_monitoring #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#371: if (diff_logL %>% is.nan()) { #>     diff_logL <- -Inf #> } #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#375: if (diff_logL < 0) { #>     warning(\"The likelihood descreased. Possible numerical issues.\") #> } #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#380: hp_0 <- new_hp_0 #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#381: hp_i <- new_hp_i #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#382: logL_monitoring <- new_logL_monitoring #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#385: seq_loglikelihood <- c(seq_loglikelihood, logL_monitoring) #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#388: eps <- diff_logL/abs(logL_monitoring) #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#389: if (eps %>% is.nan()) { #>     eps <- 1 #> } #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#394: t_i_2 <- Sys.time() #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#395: paste0(\"EM algorithm, step \", i, \": \", difftime(t_i_2, t_i_1,  #>     units = \"secs\") %>% round(2), \" seconds \\n \\n\") %>% cat() #> EM algorithm, step 1: 13.16 seconds  #>   #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#402: paste0(\"Value of the likelihood: \", logL_monitoring %>% round(5),  #>     \" --- Convergence ratio = \", eps %>% round(5), \"\\n \\n\") %>%  #>     cat() #> Value of the likelihood: -242.84823 --- Convergence ratio = Inf #>   #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#412: if (abs(eps) < cv_threshold) { #>     cat(\"The EM algorithm successfully converged, training is completed.\",  #>         \"\\n \\n\") #>     cv <- TRUE #>     break #> } #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#299: t_i_1 <- Sys.time() #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#302: post <- e_step(db = data, m_0 = m_0, kern_0 = kern_0, kern_i = kern_i,  #>     hp_0 = hp_0, hp_i = hp_i, pen_diag = pen_diag) #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#313: if (fast_approx) { #>     seq_loglikelihood <- logL_monitoring(hp_0 = hp_0, hp_i = hp_i,  #>         db = data, m_0 = m_0, kern_0 = kern_0, kern_i = kern_i,  #>         post_mean = post$mean, post_cov = post$cov, pen_diag = pen_diag) #>     cv <- FALSE #>     break #> } #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#332: new_hp <- m_step(db = data, m_0 = m_0, kern_0 = kern_0, kern_i = kern_i,  #>     old_hp_0 = hp_0, old_hp_i = hp_i, post_mean = post$mean,  #>     post_cov = post$cov, common_hp = common_hp, pen_diag = pen_diag) #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#344: new_hp_0 <- new_hp$hp_0 #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#345: new_hp_i <- new_hp$hp_i #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#348: if (any(is.na(new_hp_0)) | any(is.na(new_hp_i))) { #>     warning(paste0(\"The M-step encountered an error at iteration : \",  #>         i)) #>     warning(\"Training has stopped and hyper-parameters values from the \",  #>         \"last valid iteration are returned.\") #>     break #> } #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#358: new_logL_monitoring <- logL_monitoring(hp_0 = new_hp_0, hp_i = new_hp_i,  #>     db = data, m_0 = m_0, kern_0 = kern_0, kern_i = kern_i, post_mean = post$mean,  #>     post_cov = post$cov, pen_diag = pen_diag) #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#370: diff_logL <- new_logL_monitoring - logL_monitoring #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#371: if (diff_logL %>% is.nan()) { #>     diff_logL <- -Inf #> } #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#375: if (diff_logL < 0) { #>     warning(\"The likelihood descreased. Possible numerical issues.\") #> } #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#380: hp_0 <- new_hp_0 #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#381: hp_i <- new_hp_i #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#382: logL_monitoring <- new_logL_monitoring #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#385: seq_loglikelihood <- c(seq_loglikelihood, logL_monitoring) #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#388: eps <- diff_logL/abs(logL_monitoring) #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#389: if (eps %>% is.nan()) { #>     eps <- 1 #> } #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#394: t_i_2 <- Sys.time() #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#395: paste0(\"EM algorithm, step \", i, \": \", difftime(t_i_2, t_i_1,  #>     units = \"secs\") %>% round(2), \" seconds \\n \\n\") %>% cat() #> EM algorithm, step 2: 15.89 seconds  #>   #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#402: paste0(\"Value of the likelihood: \", logL_monitoring %>% round(5),  #>     \" --- Convergence ratio = \", eps %>% round(5), \"\\n \\n\") %>%  #>     cat() #> Value of the likelihood: -231.94883 --- Convergence ratio = 0.04699 #>   #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#412: if (abs(eps) < cv_threshold) { #>     cat(\"The EM algorithm successfully converged, training is completed.\",  #>         \"\\n \\n\") #>     cv <- TRUE #>     break #> } #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#299: t_i_1 <- Sys.time() #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#302: post <- e_step(db = data, m_0 = m_0, kern_0 = kern_0, kern_i = kern_i,  #>     hp_0 = hp_0, hp_i = hp_i, pen_diag = pen_diag) #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#313: if (fast_approx) { #>     seq_loglikelihood <- logL_monitoring(hp_0 = hp_0, hp_i = hp_i,  #>         db = data, m_0 = m_0, kern_0 = kern_0, kern_i = kern_i,  #>         post_mean = post$mean, post_cov = post$cov, pen_diag = pen_diag) #>     cv <- FALSE #>     break #> } #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#332: new_hp <- m_step(db = data, m_0 = m_0, kern_0 = kern_0, kern_i = kern_i,  #>     old_hp_0 = hp_0, old_hp_i = hp_i, post_mean = post$mean,  #>     post_cov = post$cov, common_hp = common_hp, pen_diag = pen_diag) #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#344: new_hp_0 <- new_hp$hp_0 #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#345: new_hp_i <- new_hp$hp_i #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#348: if (any(is.na(new_hp_0)) | any(is.na(new_hp_i))) { #>     warning(paste0(\"The M-step encountered an error at iteration : \",  #>         i)) #>     warning(\"Training has stopped and hyper-parameters values from the \",  #>         \"last valid iteration are returned.\") #>     break #> } #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#358: new_logL_monitoring <- logL_monitoring(hp_0 = new_hp_0, hp_i = new_hp_i,  #>     db = data, m_0 = m_0, kern_0 = kern_0, kern_i = kern_i, post_mean = post$mean,  #>     post_cov = post$cov, pen_diag = pen_diag) #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#370: diff_logL <- new_logL_monitoring - logL_monitoring #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#371: if (diff_logL %>% is.nan()) { #>     diff_logL <- -Inf #> } #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#375: if (diff_logL < 0) { #>     warning(\"The likelihood descreased. Possible numerical issues.\") #> } #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#380: hp_0 <- new_hp_0 #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#381: hp_i <- new_hp_i #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#382: logL_monitoring <- new_logL_monitoring #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#385: seq_loglikelihood <- c(seq_loglikelihood, logL_monitoring) #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#388: eps <- diff_logL/abs(logL_monitoring) #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#389: if (eps %>% is.nan()) { #>     eps <- 1 #> } #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#394: t_i_2 <- Sys.time() #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#395: paste0(\"EM algorithm, step \", i, \": \", difftime(t_i_2, t_i_1,  #>     units = \"secs\") %>% round(2), \" seconds \\n \\n\") %>% cat() #> EM algorithm, step 3: 13.16 seconds  #>   #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#402: paste0(\"Value of the likelihood: \", logL_monitoring %>% round(5),  #>     \" --- Convergence ratio = \", eps %>% round(5), \"\\n \\n\") %>%  #>     cat() #> Value of the likelihood: -231.6273 --- Convergence ratio = 0.00139 #>   #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#412: if (abs(eps) < cv_threshold) { #>     cat(\"The EM algorithm successfully converged, training is completed.\",  #>         \"\\n \\n\") #>     cv <- TRUE #>     break #> } #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#299: t_i_1 <- Sys.time() #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#302: post <- e_step(db = data, m_0 = m_0, kern_0 = kern_0, kern_i = kern_i,  #>     hp_0 = hp_0, hp_i = hp_i, pen_diag = pen_diag) #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#313: if (fast_approx) { #>     seq_loglikelihood <- logL_monitoring(hp_0 = hp_0, hp_i = hp_i,  #>         db = data, m_0 = m_0, kern_0 = kern_0, kern_i = kern_i,  #>         post_mean = post$mean, post_cov = post$cov, pen_diag = pen_diag) #>     cv <- FALSE #>     break #> } #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#332: new_hp <- m_step(db = data, m_0 = m_0, kern_0 = kern_0, kern_i = kern_i,  #>     old_hp_0 = hp_0, old_hp_i = hp_i, post_mean = post$mean,  #>     post_cov = post$cov, common_hp = common_hp, pen_diag = pen_diag) #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#344: new_hp_0 <- new_hp$hp_0 #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#345: new_hp_i <- new_hp$hp_i #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#348: if (any(is.na(new_hp_0)) | any(is.na(new_hp_i))) { #>     warning(paste0(\"The M-step encountered an error at iteration : \",  #>         i)) #>     warning(\"Training has stopped and hyper-parameters values from the \",  #>         \"last valid iteration are returned.\") #>     break #> } #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#358: new_logL_monitoring <- logL_monitoring(hp_0 = new_hp_0, hp_i = new_hp_i,  #>     db = data, m_0 = m_0, kern_0 = kern_0, kern_i = kern_i, post_mean = post$mean,  #>     post_cov = post$cov, pen_diag = pen_diag) #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#370: diff_logL <- new_logL_monitoring - logL_monitoring #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#371: if (diff_logL %>% is.nan()) { #>     diff_logL <- -Inf #> } #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#375: if (diff_logL < 0) { #>     warning(\"The likelihood descreased. Possible numerical issues.\") #> } #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#380: hp_0 <- new_hp_0 #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#381: hp_i <- new_hp_i #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#382: logL_monitoring <- new_logL_monitoring #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#385: seq_loglikelihood <- c(seq_loglikelihood, logL_monitoring) #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#388: eps <- diff_logL/abs(logL_monitoring) #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#389: if (eps %>% is.nan()) { #>     eps <- 1 #> } #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#394: t_i_2 <- Sys.time() #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#395: paste0(\"EM algorithm, step \", i, \": \", difftime(t_i_2, t_i_1,  #>     units = \"secs\") %>% round(2), \" seconds \\n \\n\") %>% cat() #> EM algorithm, step 4: 8.29 seconds  #>   #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#402: paste0(\"Value of the likelihood: \", logL_monitoring %>% round(5),  #>     \" --- Convergence ratio = \", eps %>% round(5), \"\\n \\n\") %>%  #>     cat() #> Value of the likelihood: -231.61445 --- Convergence ratio = 6e-05 #>   #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#412: if (abs(eps) < cv_threshold) { #>     cat(\"The EM algorithm successfully converged, training is completed.\",  #>         \"\\n \\n\") #>     cv <- TRUE #>     break #> } #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#413: cat(\"The EM algorithm successfully converged, training is completed.\",  #>     \"\\n \\n\") #> The EM algorithm successfully converged, training is completed.  #>   #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#417: cv <- TRUE #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#418: break #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#422: if (!cv & (i == n_iter_max)) { #>     warning(\"The EM algorithm has reached the maximum number of iterations \",  #>         \"before convergence, training might be sub-optimal \\n \\n\") #> } #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#430: if (!is.null(grid_inputs)) { #>     cat(\"Start evaluating hyper-posterior distribution of the mean process\",  #>         \"on the provided grid of inputs... \\n \\n\") #>     post <- hyperposterior(data = data, hp_0 = hp_0, hp_i = hp_i,  #>         kern_0 = kern_0, kern_i = kern_i, prior_mean = prior_mean,  #>         grid_inputs = grid_inputs, pen_diag = pen_diag) #>     cat(\"Done!\\n \\n\") #> } else { #>     post$pred <- tibble::tibble(Input = post$mean %>% dplyr::pull(.data$Input),  #>         Mean = post$mean %>% dplyr::pull(.data$Output), Var = post$cov %>%  #>             diag() %>% as.vector()) #> } #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#449: post$pred <- tibble::tibble(Input = post$mean %>% dplyr::pull(.data$Input),  #>     Mean = post$mean %>% dplyr::pull(.data$Output), Var = post$cov %>%  #>         diag() %>% as.vector()) #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#457: fct_args <- list(data = data, prior_mean = prior_mean, ini_hp_0 = hp_0_ini,  #>     ini_hp_i = hp_i_ini, kern_0 = kern_0, kern_i = kern_i, common_hp = common_hp,  #>     grid_inputs = grid_inputs, pen_diag = pen_diag, n_iter_max = n_iter_max,  #>     cv_threshold = cv_threshold) #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#471: t_2 <- Sys.time() #> debug at C:/Users/user/Mon Drive/Travail/GitHub/MagmaClustR/R/training.R#473: list(hp_0 = hp_0, hp_i = hp_i, hyperpost = post, ini_args = fct_args,  #>     seq_loglikelihood = seq_loglikelihood, converged = cv, training_time = difftime(t_2,  #>         t_1, units = \"secs\")) %>% return()  pred_dim2  <- pred_magma(data = dim2_pred,                          trained_model = model_dim2) #> The hyper-posterior distribution of the mean process provided in 'hyperpost' argument isn't evaluated on the expected inputs. #>   #>  Start evaluating the hyper-posterior on the correct inputs... #>   #> The 'prior_mean' argument has not been specified. The hyper-prior mean function is thus set to be 0 everywhere. #>   #> Done! #>"},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/MagmaClustR.html","id":null,"dir":"Reference","previous_headings":"","what":"MagmaClustR : Clustering and Prediction using Multi-Task Gaussian Processes — MagmaClustR","title":"MagmaClustR : Clustering and Prediction using Multi-Task Gaussian Processes — MagmaClustR","text":"MagmaClustR package implements two main algorithms, called Magma MagmaClust, using multi-task GPs model perform predictions supervised learning problems. Theses approaches leverage learning cluster-specific mean processes, common across similar tasks, provide enhanced prediction performances (even far data) linear computational cost (number tasks). MagmaClust generalisation Magma tasks simultaneously clustered groups, associated specific mean process. User-oriented functions package decomposed training, prediction plotting functions. basic features standard GPs also implemented.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/MagmaClustR.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"MagmaClustR : Clustering and Prediction using Multi-Task Gaussian Processes — MagmaClustR","text":"quick introduction MagmaClustR, please refer README https://github.com/ArthurLeroy/MagmaClustR","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/MagmaClustR.html","id":"author-s-","dir":"Reference","previous_headings":"","what":"Author(s)","title":"MagmaClustR : Clustering and Prediction using Multi-Task Gaussian Processes — MagmaClustR","text":"Arthur Leroy, Pierre Pathe Pierre Latouche  Maintainer: Arthur Leroy - arthur.leroy.pro@gmail.com","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/MagmaClustR.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"MagmaClustR : Clustering and Prediction using Multi-Task Gaussian Processes — MagmaClustR","text":"Arthur Leroy, Pierre Latouche, Benjamin Guedj, Servane Gey.  MAGMA: Inference Prediction Multi-Task Gaussian Processes. Machine Learning, 2022, https://link.springer.com/article/10.1007/s10994-022-06172-1 Arthur Leroy, Pierre Latouche, Benjamin Guedj, Servane Gey.  Cluster-Specific Predictions Multi-Task Gaussian Processes. PREPRINT, Nov. 2020, https://arxiv.org/abs/2011.07866","code":""},{"path":[]},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/MagmaClustR.html","id":"simulate-a-dataset-train-and-predict-with-magma-","dir":"Reference","previous_headings":"","what":"Simulate a dataset, train and predict with Magma","title":"MagmaClustR : Clustering and Prediction using Multi-Task Gaussian Processes — MagmaClustR","text":"set.seed(42)  data_magma <- simu_db(M = 11, N = 10, K = 1)  magma_train <- data_magma %>% subset(ID %% 1:10)  magma_test <- data_magma %>% subset(ID == 11) %>% head(5) magma_model <- train_magma(data = magma_train)  magma_pred  <- pred_magma(data = magma_test, trained_model = magma_model, grid_inputs = seq(0, 10, 0.01))","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/MagmaClustR.html","id":"simulate-a-dataset-train-and-predict-with-magmaclust-","dir":"Reference","previous_headings":"","what":"Simulate a dataset, train and predict with MagmaClust","title":"MagmaClustR : Clustering and Prediction using Multi-Task Gaussian Processes — MagmaClustR","text":"set.seed(42)  data_magmaclust <- simu_db(M = 4, N = 10, K = 3)  list_ID = unique(data_magmaclust$ID)  magmaclust_train <- data_magmaclust %>% subset(ID %% list_ID[1:11])  magmaclust_test <- data_magmaclust %>% subset(ID == list_ID[12]) %>% head(5) magmaclust_model <- train_magmaclust(data = magmaclust_train)  magmaclust_pred  <- pred_magmaclust(data = magmaclust_test,  trained_model = magmaclust_model, grid_inputs = seq(0, 10, 0.01))","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/data_allocate_cluster.html","id":null,"dir":"Reference","previous_headings":"","what":"Allocate training data into the most probable cluster — data_allocate_cluster","title":"Allocate training data into the most probable cluster — data_allocate_cluster","text":"Allocate training data probable cluster","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/data_allocate_cluster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Allocate training data into the most probable cluster — data_allocate_cluster","text":"","code":"data_allocate_cluster(trained_model)"},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/data_allocate_cluster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Allocate training data into the most probable cluster — data_allocate_cluster","text":"trained_model list, containing  information coming MagmaClust model, previously trained using train_magmaclust function.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/data_allocate_cluster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Allocate training data into the most probable cluster — data_allocate_cluster","text":"original dataset used train MagmaClust model, additional 'Cluster' associated 'Proba' columns, indicating probable cluster individual/task end training procedure.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/data_allocate_cluster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Allocate training data into the most probable cluster — data_allocate_cluster","text":"","code":"TRUE #> [1] TRUE"},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/dmnorm.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the Multivariate Gaussian likelihood — dmnorm","title":"Compute the Multivariate Gaussian likelihood — dmnorm","text":"Modification function dmvnorm() package mvtnorm, providing implementation Multivariate Gaussian likelihood. version uses inverse covariance function argument instead traditional covariance.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/dmnorm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the Multivariate Gaussian likelihood — dmnorm","text":"","code":"dmnorm(x, mu, inv_Sigma, log = FALSE)"},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/dmnorm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the Multivariate Gaussian likelihood — dmnorm","text":"x vector, containing values likelihood evaluated . mu vector matrix, specifying mean parameter. inv_Sigma matrix, specifying inverse covariance parameter. log logical value, indicating whether return log-likelihood.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/dmnorm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the Multivariate Gaussian likelihood — dmnorm","text":"number, corresponding Multivariate Gaussian log-likelihood.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/dmnorm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the Multivariate Gaussian likelihood — dmnorm","text":"","code":"MagmaClustR:::dmnorm(c(1, 2), c(0, 0), cbind(c(1, 0), c(0, 1)), TRUE) #> [1] -4.337877"},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/draw.html","id":null,"dir":"Reference","previous_headings":"","what":"Draw a number — draw","title":"Draw a number — draw","text":"Draw uniformly number within specified interval","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/draw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Draw a number — draw","text":"","code":"draw(int)"},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/draw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Draw a number — draw","text":"int interval values want draw uniformly .","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/draw.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Draw a number — draw","text":"2-decimals-rounded random number","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/draw.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Draw a number — draw","text":"","code":"MagmaClustR:::draw(c(1, 2)) #> [1] 1.31"},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/e_step.html","id":null,"dir":"Reference","previous_headings":"","what":"E-Step of the EM algorithm — e_step","title":"E-Step of the EM algorithm — e_step","text":"Expectation step EM algorithm compute parameters hyper-posterior Gaussian distribution mean process Magma.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/e_step.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"E-Step of the EM algorithm — e_step","text":"","code":"e_step(db, m_0, kern_0, kern_i, hp_0, hp_i, pen_diag)"},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/e_step.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"E-Step of the EM algorithm — e_step","text":"db tibble data frame. Columns required: ID, Input, Output. Additional columns covariates can specified. m_0 vector, corresponding prior mean mean GP. kern_0 kernel function, associated mean GP. kern_i kernel function, associated individual GPs. hp_0 named vector, tibble data frame hyper-parameters associated kern_0. hp_i tibble data frame hyper-parameters associated kern_i. pen_diag number. jitter term, added diagonal prevent numerical issues inverting nearly singular matrices.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/e_step.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"E-Step of the EM algorithm — e_step","text":"named list, containing elements mean, tibble containing Input associated Output hyper-posterior's mean parameter, cov, hyper-posterior's covariance matrix.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/e_step.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"E-Step of the EM algorithm — e_step","text":"","code":"db <- simu_db(N = 10) m_0 <- rep(0, 10) hp_0 <- hp() hp_i <- hp(\"SE\", list_ID = unique(db$ID)) MagmaClustR:::e_step(db, m_0, \"SE\", \"SE\", hp_0, hp_i, 0.001) #> $mean #> # A tibble: 10 × 2 #>    Input Output #>    <dbl>  <dbl> #>  1  1.8    2.19 #>  2  2.7    6.22 #>  3  3.15   2.96 #>  4  3.7    1.84 #>  5  4.1    2.44 #>  6  4.9    1.26 #>  7  4.95   3.14 #>  8  5.15   1.94 #>  9  7.3   15.1  #> 10  7.9   18.4  #>  #> $cov #>                1.8         2.7       3.15        3.7        4.1        4.9 #> 1.8   0.2054897462 0.178602742 0.15930167 0.13394815 0.11491535 0.07724131 #> 2.7   0.1786027418 0.183551388 0.17794418 0.16554403 0.15307183 0.12155710 #> 3.15  0.1593016693 0.177944179 0.17966878 0.17476183 0.16675441 0.14124693 #> 3.7   0.1339481517 0.165544025 0.17476183 0.17906840 0.17692027 0.16077296 #> 4.1   0.1149153525 0.153071834 0.16675441 0.17692027 0.17934397 0.17096356 #> 4.9   0.0772413086 0.121557101 0.14124693 0.16077296 0.17096356 0.17945238 #> 4.95  0.0749740182 0.119382902 0.13931327 0.15928991 0.16990149 0.17931574 #> 5.15  0.0660822057 0.110540389 0.13126962 0.15287238 0.16506539 0.17843941 #> 7.3   0.0008762422 0.022330747 0.03714444 0.05848466 0.07575268 0.11209780 #> 7.9  -0.0061132077 0.006075632 0.01639456 0.03314080 0.04801006 0.08266217 #>            4.95       5.15          7.3          7.9 #> 1.8  0.07497402 0.06608221 0.0008762422 -0.006113208 #> 2.7  0.11938290 0.11054039 0.0223307472  0.006075632 #> 3.15 0.13931327 0.13126962 0.0371444439  0.016394564 #> 3.7  0.15928991 0.15287238 0.0584846600  0.033140798 #> 4.1  0.16990149 0.16506539 0.0757526818  0.048010063 #> 4.9  0.17931574 0.17843941 0.1120978039  0.082662165 #> 4.95 0.17942896 0.17873431 0.1143375525  0.084950909 #> 5.15 0.17873431 0.17932421 0.1231347641  0.094143374 #> 7.3  0.11433755 0.12313476 0.1907868560  0.192146734 #> 7.9  0.08495091 0.09414337 0.1921467339  0.208818091 #>   db_async <- simu_db(N = 10, common_input = FALSE) m_0_async <- rep(0, db_async$Input %>% unique() %>% length()) MagmaClustR:::e_step(db_async, m_0_async, \"SE\", \"SE\", hp_0, hp_i, 0.001) #> $mean #> # A tibble: 82 × 2 #>    Input  Output #>    <dbl>   <dbl> #>  1  0      2.21  #>  2  0.1    2.36  #>  3  0.2    1.96  #>  4  0.25   1.51  #>  5  0.3    1.31  #>  6  0.35  -0.111 #>  7  0.55  -5.05  #>  8  0.65  -3.38  #>  9  1.05 -13.7   #> 10  1.1  -12.7   #> # … with 72 more rows #>  #> $cov #>                  0           0.1           0.2          0.25           0.3 #> 0     2.742244e-01  2.598837e-01  0.2465010897  0.2406350871  0.2332139937 #> 0.1   2.598837e-01  2.531124e-01  0.2436467998  0.2397272594  0.2346787894 #> 0.2   2.465011e-01  2.436468e-01  0.2406268481  0.2375235064  0.2346780856 #> 0.25  2.406351e-01  2.397273e-01  0.2375235064  0.2371609726  0.2342498282 #> 0.3   2.332140e-01  2.346788e-01  0.2346780856  0.2342498282  0.2342533495 #> 0.35  2.287809e-01  2.313017e-01  0.2323359278  0.2323590050  0.2323265902 #> 0.55  2.058737e-01  2.135200e-01  0.2196832353  0.2219739380  0.2245476141 #> 0.65  1.992739e-01  2.075020e-01  0.2143997358  0.2170670084  0.2201133982 #> 1.05  1.760463e-01  1.843677e-01  0.1919996056  0.1952167975  0.1989402705 #> 1.1   1.734743e-01  1.816353e-01  0.1891756517  0.1923771281  0.1960776659 #> 1.15  1.710515e-01  1.790882e-01  0.1865635565  0.1897578302  0.1934448187 #> 1.2   1.691497e-01  1.769273e-01  0.1842062959  0.1873360631  0.1909411600 #> 1.3   1.642668e-01  1.715315e-01  0.1783940334  0.1813752961  0.1847811646 #> 1.4   1.602110e-01  1.672763e-01  0.1739901937  0.1769263381  0.1802563694 #> 1.75  1.416372e-01  1.480177e-01  0.1543077173  0.1571358989  0.1603048407 #> 1.85  1.345441e-01  1.410266e-01  0.1474929156  0.1504489375  0.1537518166 #> 1.95  1.290082e-01  1.354626e-01  0.1419569632  0.1449546485  0.1483038332 #> 2     1.257082e-01  1.321053e-01  0.1386079118  0.1416220158  0.1450013042 #> 2.2   1.139685e-01  1.203057e-01  0.1268870651  0.1299874915  0.1334707963 #> 2.35  1.062534e-01  1.122017e-01  0.1184535322  0.1214321131  0.1247643659 #> 2.4   1.033411e-01  1.092620e-01  0.1155223964  0.1185190609  0.1218740314 #> 2.5   9.844788e-02  1.041570e-01  0.1102173741  0.1131309697  0.1163810392 #> 2.55  9.608439e-02  1.017246e-01  0.1077425826  0.1106471867  0.1138924163 #> 2.6   9.405711e-02  9.955705e-02  0.1054374370  0.1082808803  0.1114513451 #> 2.8   8.541468e-02  9.046629e-02  0.0959092470  0.0985605414  0.1015046199 #> 2.85  8.311460e-02  8.805657e-02  0.0933930501  0.0960000953  0.0988852579 #> 2.9   8.106608e-02  8.599489e-02  0.0913131433  0.0939068401  0.0967805718 #> 2.95  7.955578e-02  8.430612e-02  0.0894260053  0.0919259021  0.0946900123 #> 3.15  7.224624e-02  7.673019e-02  0.0815593311  0.0839145403  0.0865183351 #> 3.4   6.154831e-02  6.573021e-02  0.0702837512  0.0725166075  0.0749868714 #> 3.45  5.932206e-02  6.346813e-02  0.0679882413  0.0702049092  0.0726528510 #> 3.5   5.762686e-02  6.169753e-02  0.0661453430  0.0683292248  0.0707443197 #> 3.55  5.573910e-02  5.972876e-02  0.0640975390  0.0662465849  0.0686229689 #> 3.6   5.397875e-02  5.787086e-02  0.0621398189  0.0642449078  0.0665712512 #> 3.65  5.214010e-02  5.594784e-02  0.0601380464  0.0622090598  0.0644994730 #> 3.7   5.036703e-02  5.408294e-02  0.0581830154  0.0602143239  0.0624613316 #> 4.1   3.594065e-02  3.883768e-02  0.0421345884  0.0438156814  0.0456623955 #> 4.15  3.475170e-02  3.751855e-02  0.0406673409  0.0422786208  0.0440522941 #> 4.45  2.620698e-02  2.833964e-02  0.0308038961  0.0320910996  0.0335152791 #> 4.65  2.098342e-02  2.278306e-02  0.0248801542  0.0259887507  0.0272275471 #> 4.75  1.845811e-02  2.013553e-02  0.0221104244  0.0231591173  0.0243378950 #> 4.8   1.731887e-02  1.889763e-02  0.0207677938  0.0217659999  0.0229107073 #> 4.9   1.485152e-02  1.634008e-02  0.0181119706  0.0190605341  0.0201274668 #> 5.3   5.813722e-03  6.960589e-03  0.0084009037  0.0091901461  0.0100661491 #> 5.5   1.765194e-03  2.765732e-03  0.0040543511  0.0047715699  0.0055395210 #> 5.6   5.250797e-05  9.312909e-04  0.0021030245  0.0027659502  0.0034633247 #> 5.7  -1.666979e-03 -8.546114e-04  0.0002321709  0.0008537116  0.0014888324 #> 5.9  -4.467585e-03 -3.835424e-03 -0.0029577909 -0.0024403219 -0.0019438990 #> 5.95 -5.240387e-03 -4.632528e-03 -0.0037906895 -0.0032896365 -0.0028076031 #> 6.15 -7.020685e-03 -6.674984e-03 -0.0061252490 -0.0057710671 -0.0054357180 #> 6.25 -7.853483e-03 -7.612617e-03 -0.0071922476 -0.0069030071 -0.0066329919 #> 6.65 -9.629790e-03 -9.773492e-03 -0.0098062503 -0.0097506367 -0.0096831964 #> 6.75 -9.847570e-03 -1.009139e-02 -0.0102382366 -0.0102404541 -0.0102209160 #> 7    -1.007915e-02 -1.041429e-02 -0.0106739756 -0.0107397587 -0.0107829287 #> 7.15 -9.940366e-03 -1.030879e-02 -0.0106143567 -0.0107087531 -0.0107795634 #> 7.2  -9.857411e-03 -1.025125e-02 -0.0105881902 -0.0106994254 -0.0107836116 #> 7.4  -9.448972e-03 -9.846009e-03 -0.0101954689 -0.0103206290 -0.0104224227 #> 7.45 -9.281338e-03 -9.682296e-03 -0.0100418257 -0.0101743028 -0.0102862305 #> 7.6  -8.775008e-03 -9.166835e-03 -0.0095301267 -0.0096710413 -0.0097955732 #> 7.7  -8.302340e-03 -8.693523e-03 -0.0090610148 -0.0092090911 -0.0093405899 #> 7.75 -8.108994e-03 -8.486351e-03 -0.0088455866 -0.0089920910 -0.0091224237 #> 7.8  -7.880841e-03 -8.254760e-03 -0.0086142861 -0.0087631614 -0.0088963278 #> 7.85 -7.607071e-03 -7.984137e-03 -0.0083506377 -0.0085052912 -0.0086421692 #> 7.9  -7.358818e-03 -7.731063e-03 -0.0080984762 -0.0082559765 -0.0083972898 #> 7.95 -7.111067e-03 -7.478477e-03 -0.0078452524 -0.0080047797 -0.0081498630 #> 8.05 -6.654196e-03 -7.017233e-03 -0.0073806425 -0.0075411351 -0.0076758510 #> 8.25 -5.511954e-03 -5.841929e-03 -0.0061933760 -0.0063588559 -0.0065166107 #> 8.35 -5.022564e-03 -5.338954e-03 -0.0056831992 -0.0058490370 -0.0060154768 #> 8.4  -4.798253e-03 -5.109268e-03 -0.0054501313 -0.0056151601 -0.0057783537 #> 8.45 -4.509414e-03 -4.815429e-03 -0.0051571377 -0.0053251310 -0.0054993733 #> 8.5  -4.287510e-03 -4.588987e-03 -0.0049255872 -0.0050916149 -0.0052594520 #> 8.55 -4.067518e-03 -4.359006e-03 -0.0046864547 -0.0048490331 -0.0050167734 #> 8.6  -3.809993e-03 -4.095010e-03 -0.0044194702 -0.0045822317 -0.0047535522 #> 8.7  -3.310997e-03 -3.579436e-03 -0.0038917339 -0.0040510976 -0.0042232829 #> 9    -1.880528e-03 -2.105095e-03 -0.0023869690 -0.0025380829 -0.0027126364 #> 9.35 -2.636759e-04 -4.585227e-04 -0.0007145676 -0.0008542536 -0.0009962902 #> 9.45  1.971615e-04  1.185296e-05 -0.0002352102 -0.0003707340 -0.0005014660 #> 9.6   8.036537e-04  6.123101e-04  0.0003615394  0.0002264869  0.0001180373 #> 9.7   1.193773e-03  1.011299e-03  0.0007700875  0.0006399870  0.0005423345 #> 9.75  1.373984e-03  1.194745e-03  0.0009579399  0.0008305843  0.0007401718 #> 9.85  1.688050e-03  1.512862e-03  0.0012832169  0.0011609360  0.0010845917 #> 9.95  2.002028e-03  1.847100e-03  0.0016390688  0.0015274375  0.0014598003 #>               0.35          0.55          0.65         1.05          1.1 #> 0     0.2287809165  0.2058736866  0.1992739065  0.176046310  0.173474347 #> 0.1   0.2313017140  0.2135199874  0.2075020145  0.184367737  0.181635255 #> 0.2   0.2323359278  0.2196832353  0.2143997358  0.191999606  0.189175652 #> 0.25  0.2323590050  0.2219739380  0.2170670084  0.195216797  0.192377128 #> 0.3   0.2323265902  0.2245476141  0.2201133982  0.198940271  0.196077666 #> 0.35  0.2318847376  0.2251079253  0.2210726828  0.200938764  0.198149780 #> 0.55  0.2251079253  0.2280812052  0.2254757615  0.209859807  0.207331490 #> 0.65  0.2210726828  0.2254757615  0.2247824676  0.211777483  0.209548483 #> 1.05  0.2009387639  0.2098598069  0.2117774834  0.211712821  0.210398879 #> 1.1   0.1981497799  0.2073314895  0.2095484830  0.210398879  0.210247898 #> 1.15  0.1955880356  0.2050132522  0.2074978913  0.209643991  0.209186083 #> 1.2   0.1931210245  0.2026416211  0.2054172745  0.208836490  0.208618432 #> 1.3   0.1870212828  0.1965458360  0.1998408228  0.205896958  0.206013504 #> 1.4   0.1825790543  0.1921955488  0.1958898617  0.203768215  0.204156909 #> 1.75  0.1629381170  0.1733647570  0.1782079467  0.192670568  0.193992873 #> 1.85  0.1565688784  0.1677323824  0.1729551687  0.189244834  0.190799224 #> 1.95  0.1511980364  0.1627149174  0.1681011216  0.185348906  0.187034740 #> 2     0.1479554383  0.1597350091  0.1652927600  0.183271657  0.185046641 #> 2.2   0.1366011463  0.1491599738  0.1549610506  0.174857834  0.176882918 #> 2.35  0.1278782365  0.1402963667  0.1462781792  0.167439812  0.169684997 #> 2.4   0.1250237455  0.1376139461  0.1436361274  0.165085171  0.167335598 #> 2.5   0.1194934248  0.1318656065  0.1378927465  0.159761823  0.162141647 #> 2.55  0.1170048502  0.1294385656  0.1354597904  0.157479396  0.159907107 #> 2.6   0.1145290702  0.1267855089  0.1327980030  0.154976384  0.157425618 #> 2.8   0.1044421692  0.1161044290  0.1219653845  0.144235976  0.146776766 #> 2.85  0.1018065147  0.1133363279  0.1192193655  0.141683119  0.144275239 #> 2.9   0.0996743779  0.1111244609  0.1168910899  0.139187298  0.141768889 #> 2.95  0.0974925801  0.1085599300  0.1142255668  0.136151313  0.138717395 #> 3.15  0.0891504343  0.0995778128  0.1049586275  0.126085357  0.128618325 #> 3.4   0.0775127543  0.0875240011  0.0926877569  0.113438004  0.115986128 #> 3.45  0.0751689196  0.0850957964  0.0902063095  0.110780134  0.113317976 #> 3.5   0.0732235185  0.0830458376  0.0881184985  0.108631420  0.111171484 #> 3.55  0.0710690271  0.0807669750  0.0857803409  0.106139391  0.108670433 #> 3.6   0.0689730518  0.0784975040  0.0834243200  0.103480402  0.105983882 #> 3.65  0.0668709041  0.0762954730  0.0811815621  0.101199631  0.103706729 #> 3.7   0.0647941273  0.0740829661  0.0789112554  0.098786122  0.101284664 #> 4.1   0.0476972637  0.0558281201  0.0602191872  0.079129454  0.081579616 #> 4.15  0.0459919241  0.0538248596  0.0580798862  0.076501521  0.078901631 #> 4.45  0.0350831295  0.0416375418  0.0454006460  0.062360918  0.064644991 #> 4.65  0.0285630651  0.0343486250  0.0377486346  0.053460879  0.055620990 #> 4.75  0.0256053187  0.0311429566  0.0344101444  0.049627825  0.051734015 #> 4.8   0.0240803617  0.0294311944  0.0326117140  0.047531946  0.049609415 #> 4.9   0.0212877807  0.0263719014  0.0294024771  0.043745537  0.045756718 #> 5.3   0.0111036309  0.0154676825  0.0180175500  0.030401705  0.032162074 #> 5.5   0.0065517009  0.0105583224  0.0128897129  0.024384933  0.026046109 #> 5.6   0.0044564614  0.0082590430  0.0104945792  0.021617215  0.023222513 #> 5.7   0.0024449969  0.0060110335  0.0081166142  0.018695726  0.020231898 #> 5.9  -0.0010756271  0.0019714510  0.0038105810  0.013288494  0.014685204 #> 5.95 -0.0019886070  0.0009629444  0.0027376502  0.011933213  0.013290852 #> 6.15 -0.0048111008 -0.0024935939 -0.0010134650  0.006975750  0.008184391 #> 6.25 -0.0061132784 -0.0041069153 -0.0027754030  0.004586702  0.005715804 #> 6.65 -0.0095690427 -0.0086394486 -0.0078606288 -0.002929981 -0.002120070 #> 6.75 -0.0102045415 -0.0095249536 -0.0088791152 -0.004502351 -0.003765327 #> 7    -0.0108618695 -0.0105384257 -0.0101275475 -0.006903572 -0.006333191 #> 7.15 -0.0109038964 -0.0107640340 -0.0104838431 -0.007924625 -0.007450823 #> 7.2  -0.0109395139 -0.0108822824 -0.0106494490 -0.008314215 -0.007872561 #> 7.4  -0.0105934019 -0.0106765552 -0.0105723832 -0.008951103 -0.008619963 #> 7.45 -0.0104646197 -0.0106092676 -0.0105477510 -0.009143953 -0.008843557 #> 7.6  -0.0099876799 -0.0102485228 -0.0102955476 -0.009459788 -0.009245221 #> 7.7  -0.0095416405 -0.0098743339 -0.0099692803 -0.009466572 -0.009303175 #> 7.75 -0.0093291631 -0.0096888210 -0.0098144373 -0.009494324 -0.009359557 #> 7.8  -0.0091078596 -0.0095009697 -0.0096547540 -0.009498862 -0.009389361 #> 7.85 -0.0088663711 -0.0093030852 -0.0094845213 -0.009498485 -0.009413729 #> 7.9  -0.0086269837 -0.0091057745 -0.0093227993 -0.009521191 -0.009463675 #> 7.95 -0.0083815509 -0.0088948095 -0.0091392637 -0.009497924 -0.009464863 #> 8.05 -0.0079329593 -0.0084641018 -0.0087396186 -0.009325956 -0.009331507 #> 8.25 -0.0067581676 -0.0074342527 -0.0078106807 -0.008986322 -0.009081300 #> 8.35 -0.0062436462 -0.0069673513 -0.0073818829 -0.008787704 -0.008919678 #> 8.4  -0.0060133407 -0.0067425334 -0.0071662322 -0.008643132 -0.008788143 #> 8.45 -0.0057247436 -0.0064972419 -0.0069447498 -0.008548833 -0.008712917 #> 8.5  -0.0054912958 -0.0062555153 -0.0067053171 -0.008353595 -0.008527623 #> 8.55 -0.0052366977 -0.0059996796 -0.0064549094 -0.008149238 -0.008333347 #> 8.6  -0.0049691883 -0.0057524288 -0.0062218151 -0.008003727 -0.008201787 #> 8.7  -0.0044288650 -0.0052262241 -0.0057111188 -0.007608239 -0.007827115 #> 9    -0.0028967546 -0.0037352870 -0.0042551668 -0.006443099 -0.006715766 #> 9.35 -0.0012169167 -0.0020032304 -0.0025035912 -0.004746247 -0.005042524 #> 9.45 -0.0007332846 -0.0014983283 -0.0019879072 -0.004225209 -0.004524603 #> 9.6  -0.0001585930 -0.0008799656 -0.0013417520 -0.003495220 -0.003788705 #> 9.7   0.0002600412 -0.0004321416 -0.0008769029 -0.002983486 -0.003273572 #> 9.75  0.0004524078 -0.0002182810 -0.0006506961 -0.002714844 -0.003000960 #> 9.85  0.0007865145  0.0001613186 -0.0002444025 -0.002205764 -0.002481148 #> 9.95  0.0011799758  0.0005989079  0.0002173023 -0.001655605 -0.001921920 #>              1.15           1.2           1.3          1.4          1.75 #> 0     0.171051535  0.1691497214  0.1642667549  0.160211011  0.1416371662 #> 0.1   0.179088208  0.1769273267  0.1715315099  0.167276263  0.1480176837 #> 0.2   0.186563557  0.1842062959  0.1783940334  0.173990194  0.1543077173 #> 0.25  0.189757830  0.1873360631  0.1813752961  0.176926338  0.1571358989 #> 0.3   0.193444819  0.1909411600  0.1847811646  0.180256369  0.1603048407 #> 0.35  0.195588036  0.1931210245  0.1870212828  0.182579054  0.1629381170 #> 0.55  0.205013252  0.2026416211  0.1965458360  0.192195549  0.1733647570 #> 0.65  0.207497891  0.2054172745  0.1998408228  0.195889862  0.1782079467 #> 1.05  0.209643991  0.2088364898  0.2058969578  0.203768215  0.1926705678 #> 1.1   0.209186083  0.2086184316  0.2060135037  0.204156909  0.1939928727 #> 1.15  0.209260488  0.2083000044  0.2061019472  0.204515666  0.1952577655 #> 1.2   0.208300004  0.2090534649  0.2064021904  0.205079958  0.1967299612 #> 1.3   0.206101947  0.2064021904  0.2065130544  0.204860780  0.1986460063 #> 1.4   0.204515666  0.2050799583  0.2048607797  0.205584772  0.2004090348 #> 1.75  0.195257765  0.1967299612  0.1986460063  0.200409035  0.2030409702 #> 1.85  0.192295444  0.1939531697  0.1963353652  0.198569609  0.2020689995 #> 1.95  0.188664462  0.1904183342  0.1930806105  0.195572994  0.2003053641 #> 2     0.186764829  0.1885848304  0.1913648783  0.194221631  0.1993160563 #> 2.2   0.178860435  0.1807666368  0.1839773603  0.187172337  0.1945843457 #> 2.35  0.171878826  0.1740675133  0.1778384697  0.181614710  0.1909606975 #> 2.4   0.169604754  0.1718815381  0.1756233337  0.179473951  0.1893292005 #> 2.5   0.164474226  0.1667663802  0.1708104023  0.174928851  0.1858126250 #> 2.55  0.162237774  0.1644588329  0.1686234910  0.172753956  0.1839413978 #> 2.6   0.159826475  0.1621698874  0.1664127832  0.170611994  0.1822106548 #> 2.8   0.149269723  0.1517183940  0.1562787074  0.160730739  0.1737458146 #> 2.85  0.146821498  0.1493522479  0.1540710745  0.158689550  0.1723027890 #> 2.9   0.144307698  0.1467990975  0.1515353387  0.156068992  0.1699440989 #> 2.95  0.141237136  0.1437314345  0.1484826474  0.153044896  0.1669614303 #> 3.15  0.131114104  0.1335999839  0.1384428166  0.143048050  0.1577029687 #> 3.4   0.118508260  0.1209931597  0.1260070408  0.130747671  0.1465311740 #> 3.45  0.115831559  0.1182997706  0.1233115313  0.128069764  0.1440125154 #> 3.5   0.113688972  0.1161647161  0.1211959797  0.125979677  0.1420838287 #> 3.55  0.111181100  0.1136465366  0.1186767189  0.123466381  0.1396931961 #> 3.6   0.108470207  0.1109028966  0.1158831068  0.120650946  0.1368983126 #> 3.65  0.106198041  0.1086375769  0.1136464063  0.118436656  0.1348505332 #> 3.7   0.103769275  0.1062012481  0.1112052503  0.116000318  0.1325124314 #> 4.1   0.084022529  0.0864095120  0.0913826235  0.096215562  0.1133657212 #> 4.15  0.081298901  0.0836497133  0.0885417101  0.093309824  0.1103345091 #> 4.45  0.066935896  0.0692371425  0.0740181367  0.078688670  0.0957165675 #> 4.65  0.057798569  0.0600131323  0.0646285153  0.069150731  0.0859227621 #> 4.75  0.053861444  0.0560244407  0.0605542318  0.064997175  0.0816066874 #> 4.8   0.051710927  0.0538570789  0.0583555035  0.062764465  0.0792995801 #> 4.9   0.047794370  0.0498695796  0.0542477666  0.058553265  0.0748238867 #> 5.3   0.033964635  0.0357623741  0.0396335470  0.043501219  0.0585217929 #> 5.5   0.027715154  0.0293229596  0.0329792590  0.036624299  0.0508983329 #> 5.6   0.024848695  0.0264176179  0.0299405216  0.033475275  0.0473717319 #> 5.7   0.021787923  0.0232856480  0.0266659683  0.030067659  0.0434812668 #> 5.9   0.016099786  0.0174568962  0.0205463179  0.023674622  0.0361475112 #> 5.95  0.014670078  0.0159957355  0.0190033650  0.022057723  0.0342704312 #> 6.15  0.009414184  0.0106128970  0.0133302754  0.016102239  0.0273287165 #> 6.25  0.006868438  0.0080079996  0.0105735610  0.013197931  0.0238690448 #> 6.65 -0.001277202 -0.0003939019  0.0015418976  0.003553635  0.0120026344 #> 6.75 -0.002993197 -0.0021751103 -0.0003911693  0.001469034  0.0094117262 #> 7    -0.005729449 -0.0050870963 -0.0036745843 -0.002180063  0.0044058401 #> 7.15 -0.006944845 -0.0064067696 -0.0052073818 -0.003924367  0.0018675807 #> 7.2  -0.007398356 -0.0068895452 -0.0057600677 -0.004547351  0.0009756162 #> 7.4  -0.008260529 -0.0078845829 -0.0070174468 -0.006065634 -0.0015381160 #> 7.45 -0.008515268 -0.0081726268 -0.0073707466 -0.006484935 -0.0022018132 #> 7.6  -0.009002650 -0.0087571134 -0.0081521098 -0.007461072 -0.0038754608 #> 7.7  -0.009114610 -0.0089220048 -0.0084279747 -0.007846562 -0.0047624684 #> 7.75 -0.009199370 -0.0090356908 -0.0086060337 -0.008086392 -0.0052430388 #> 7.8  -0.009254833 -0.0091181252 -0.0087455852 -0.008282430 -0.0056632598 #> 7.85 -0.009304927 -0.0091929418 -0.0088719299 -0.008460657 -0.0060665943 #> 7.9  -0.009381536 -0.0092977728 -0.0090363008 -0.008683927 -0.0065000847 #> 7.95 -0.009407384 -0.0093489700 -0.0091419729 -0.008843119 -0.0068728300 #> 8.05 -0.009314315 -0.0092993219 -0.0091850547 -0.008978113 -0.0074027242 #> 8.25 -0.009153828 -0.0092257292 -0.0093092370 -0.009297666 -0.0085111512 #> 8.35 -0.009029624 -0.0091403072 -0.0093118831 -0.009382794 -0.0089401135 #> 8.4  -0.008911745 -0.0090366877 -0.0092411969 -0.009347491 -0.0090589438 #> 8.45 -0.008855428 -0.0089973055 -0.0092448947 -0.009392453 -0.0092719841 #> 8.5  -0.008681140 -0.0088354553 -0.0091116907 -0.009288739 -0.0093080797 #> 8.55 -0.008497702 -0.0086665919 -0.0089728078 -0.009182769 -0.0093390787 #> 8.6  -0.008380458 -0.0085632230 -0.0089024593 -0.009144254 -0.0094378504 #> 8.7  -0.008027910 -0.0082346021 -0.0086282801 -0.008927574 -0.0094693361 #> 9    -0.006972503 -0.0072322538 -0.0077640879 -0.008203457 -0.0093967444 #> 9.35 -0.005325101 -0.0056024331 -0.0062085912 -0.006730391 -0.0084068526 #> 9.45 -0.004810650 -0.0050876155 -0.0057042647 -0.006237833 -0.0080124996 #> 9.6  -0.004069957 -0.0043359613 -0.0049481572 -0.005483664 -0.0073491329 #> 9.7  -0.003551896 -0.0038124145 -0.0044213435 -0.004955591 -0.0068626897 #> 9.75 -0.003275717 -0.0035316628 -0.0041354935 -0.004666088 -0.0065849073 #> 9.85 -0.002746214 -0.0029916043 -0.0035800002 -0.004099147 -0.0060200690 #> 9.95 -0.002178568 -0.0024160270 -0.0029922270 -0.003500434 -0.0054159021 #>               1.85          1.95             2           2.2          2.35 #> 0     1.345441e-01  0.1290081514  0.1257082270  0.1139684598  0.1062534360 #> 0.1   1.410266e-01  0.1354625860  0.1321053483  0.1203057137  0.1122016713 #> 0.2   1.474929e-01  0.1419569632  0.1386079118  0.1268870651  0.1184535322 #> 0.25  1.504489e-01  0.1449546485  0.1416220158  0.1299874915  0.1214321131 #> 0.3   1.537518e-01  0.1483038332  0.1450013042  0.1334707963  0.1247643659 #> 0.35  1.565689e-01  0.1511980364  0.1479554383  0.1366011463  0.1278782365 #> 0.55  1.677324e-01  0.1627149174  0.1597350091  0.1491599738  0.1402963667 #> 0.65  1.729552e-01  0.1681011216  0.1652927600  0.1549610506  0.1462781792 #> 1.05  1.892448e-01  0.1853489058  0.1832716571  0.1748578337  0.1674398120 #> 1.1   1.907992e-01  0.1870347405  0.1850466409  0.1768829178  0.1696849969 #> 1.15  1.922954e-01  0.1886644623  0.1867648294  0.1788604346  0.1718788262 #> 1.2   1.939532e-01  0.1904183342  0.1885848304  0.1807666368  0.1740675133 #> 1.3   1.963354e-01  0.1930806105  0.1913648783  0.1839773603  0.1778384697 #> 1.4   1.985696e-01  0.1955729937  0.1942216306  0.1871723368  0.1816147096 #> 1.75  2.020690e-01  0.2003053641  0.1993160563  0.1945843457  0.1909606975 #> 1.85  2.031428e-01  0.2011396656  0.2003386744  0.1964380782  0.1934013757 #> 1.95  2.011397e-01  0.2004852607  0.1995355119  0.1964909467  0.1940168391 #> 2     2.003387e-01  0.1995355119  0.1999436448  0.1966475647  0.1946115170 #> 2.2   1.964381e-01  0.1964909467  0.1966475647  0.1964907845  0.1947424571 #> 2.35  1.934014e-01  0.1940168391  0.1946115170  0.1947424571  0.1952603137 #> 2.4   1.919924e-01  0.1928444769  0.1934118172  0.1941925087  0.1943123237 #> 2.5   1.887703e-01  0.1900347559  0.1906392773  0.1921313920  0.1927954211 #> 2.55  1.870538e-01  0.1884681863  0.1892900241  0.1912368260  0.1921694733 #> 2.6   1.854127e-01  0.1869669297  0.1878321694  0.1901956686  0.1912347166 #> 2.8   1.774435e-01  0.1796838106  0.1807754978  0.1843763289  0.1865735557 #> 2.85  1.760951e-01  0.1784488910  0.1796375835  0.1836020725  0.1859496611 #> 2.9   1.737932e-01  0.1762820875  0.1775541586  0.1816480769  0.1844496677 #> 2.95  1.708293e-01  0.1734559960  0.1746970574  0.1791527274  0.1820182032 #> 3.15  1.617361e-01  0.1648497361  0.1661749925  0.1715740502  0.1751766455 #> 3.4   1.509665e-01  0.1546334290  0.1562653447  0.1629910305  0.1675225825 #> 3.45  1.485095e-01  0.1523119450  0.1539284758  0.1609080745  0.1655831351 #> 3.5   1.466232e-01  0.1505113391  0.1521700214  0.1593175913  0.1641523116 #> 3.55  1.442773e-01  0.1482631783  0.1499612651  0.1573191168  0.1623066516 #> 3.6   1.415178e-01  0.1456093738  0.1473138032  0.1549482100  0.1600605073 #> 3.65  1.395084e-01  0.1436736887  0.1454478013  0.1531892298  0.1584642982 #> 3.7   1.372039e-01  0.1414521584  0.1432654536  0.1511813097  0.1565982596 #> 4.1   1.182799e-01  0.1231065468  0.1252510842  0.1343769678  0.1408168731 #> 4.15  1.151950e-01  0.1200439386  0.1221895430  0.1313846865  0.1379108572 #> 4.45  1.004813e-01  0.1054841893  0.1077251790  0.1172285142  0.1243068691 #> 4.65  9.059839e-02  0.0956271143  0.0979097197  0.1075071472  0.1148612431 #> 4.75  8.622442e-02  0.0912250594  0.0935247533  0.1031604786  0.1105371411 #> 4.8   8.391259e-02  0.0889159420  0.0911953652  0.1008239795  0.1082515462 #> 4.9   7.940607e-02  0.0843988983  0.0866791319  0.0963471336  0.1038073170 #> 5.3   6.301312e-02  0.0678679305  0.0701039476  0.0798010849  0.0871515710 #> 5.5   5.528886e-02  0.0600056775  0.0622160561  0.0717928620  0.0789742571 #> 5.6   5.170377e-02  0.0563403450  0.0585381103  0.0680391095  0.0751160235 #> 5.7   4.771037e-02  0.0522354129  0.0543919565  0.0637025514  0.0706475398 #> 5.9   4.008967e-02  0.0443423439  0.0464498016  0.0553439279  0.0620014405 #> 5.95  3.814440e-02  0.0423241512  0.0444067293  0.0531772380  0.0597489969 #> 6.15  3.081165e-02  0.0346492645  0.0366647112  0.0448414268  0.0510796727 #> 6.25  2.715948e-02  0.0308184550  0.0327704565  0.0405880370  0.0466342051 #> 6.65  1.451237e-02  0.0174343618  0.0191077451  0.0254910879  0.0306944185 #> 6.75  1.176493e-02  0.0145292980  0.0161198243  0.0221904183  0.0272082800 #> 7     6.405000e-03  0.0087494206  0.0101363015  0.0154192011  0.0198354173 #> 7.15  3.679631e-03  0.0057878883  0.0070374663  0.0118653880  0.0159223121 #> 7.2   2.712806e-03  0.0047368092  0.0059368042  0.0105818492  0.0145181981 #> 7.4  -2.462156e-05  0.0016968817  0.0027250051  0.0068000866  0.0102446897 #> 7.45 -7.490452e-04  0.0008998628  0.0018834066  0.0058182325  0.0091497067 #> 7.6  -2.590951e-03 -0.0011558689 -0.0003002768  0.0032232545  0.0062169581 #> 7.7  -3.608166e-03 -0.0023285086 -0.0015606668  0.0016470059  0.0043734937 #> 7.75 -4.157344e-03 -0.0029558939 -0.0022296806  0.0008167424  0.0034207227 #> 7.8  -4.636408e-03 -0.0035052732 -0.0028209661  0.0000811529  0.0025691739 #> 7.85 -5.099218e-03 -0.0040359604 -0.0033976763 -0.0006402853  0.0017310073 #> 7.9  -5.590787e-03 -0.0045931685 -0.0039957818 -0.0013737345  0.0008948606 #> 7.95 -6.021808e-03 -0.0050911260 -0.0045336082 -0.0020505874  0.0001072610 #> 8.05 -6.651105e-03 -0.0058478170 -0.0053671329 -0.0031505362 -0.0012173709 #> 8.25 -7.996716e-03 -0.0074448944 -0.0071228214 -0.0054659502 -0.0039533928 #> 8.35 -8.516012e-03 -0.0080690250 -0.0078116312 -0.0063929218 -0.0050598380 #> 8.4  -8.684954e-03 -0.0082960047 -0.0080687724 -0.0067754664 -0.0055448454 #> 8.45 -8.953540e-03 -0.0086203618 -0.0084253012 -0.0072639361 -0.0061223619 #> 8.5  -9.027586e-03 -0.0087446603 -0.0085786820 -0.0075302419 -0.0064839269 #> 8.55 -9.097213e-03 -0.0088617712 -0.0087252942 -0.0077821582 -0.0068271946 #> 8.6  -9.234927e-03 -0.0090437383 -0.0089363681 -0.0081000380 -0.0072239528 #> 8.7  -9.339000e-03 -0.0092343708 -0.0091841370 -0.0085521571 -0.0078397277 #> 9    -9.486292e-03 -0.0096219371 -0.0097131062 -0.0096670450 -0.0094021351 #> 9.35 -8.700607e-03 -0.0090661733 -0.0092686253 -0.0097946914 -0.0099833776 #> 9.45 -8.354593e-03 -0.0087718213 -0.0090003984 -0.0096648738 -0.0099639519 #> 9.6  -7.755873e-03 -0.0082457666 -0.0085008886 -0.0093589186 -0.0098110706 #> 9.7  -7.297413e-03 -0.0078174278 -0.0080909182 -0.0090440889 -0.0095753871 #> 9.75 -7.031297e-03 -0.0075659739 -0.0078464691 -0.0088456688 -0.0094164454 #> 9.85 -6.481028e-03 -0.0070370415 -0.0073283459 -0.0084014851 -0.0090386595 #> 9.95 -5.882244e-03 -0.0064476466 -0.0067505871 -0.0078765788 -0.0085651335 #>                2.4          2.5         2.55          2.6           2.8 #> 0     0.1033411360  0.098447879  0.096084394  0.094057115  0.0854146795 #> 0.1   0.1092620250  0.104156992  0.101724636  0.099557046  0.0904662926 #> 0.2   0.1155223964  0.110217374  0.107742583  0.105437437  0.0959092470 #> 0.25  0.1185190609  0.113130970  0.110647187  0.108280880  0.0985605414 #> 0.3   0.1218740314  0.116381039  0.113892416  0.111451345  0.1015046199 #> 0.35  0.1250237455  0.119493425  0.117004850  0.114529070  0.1044421692 #> 0.55  0.1376139461  0.131865607  0.129438566  0.126785509  0.1161044290 #> 0.65  0.1436361274  0.137892747  0.135459790  0.132798003  0.1219653845 #> 1.05  0.1650851709  0.159761823  0.157479396  0.154976384  0.1442359756 #> 1.1   0.1673355982  0.162141647  0.159907107  0.157425618  0.1467767659 #> 1.15  0.1696047543  0.164474226  0.162237774  0.159826475  0.1492697227 #> 1.2   0.1718815381  0.166766380  0.164458833  0.162169887  0.1517183940 #> 1.3   0.1756233337  0.170810402  0.168623491  0.166412783  0.1562787074 #> 1.4   0.1794739511  0.174928851  0.172753956  0.170611994  0.1607307387 #> 1.75  0.1893292005  0.185812625  0.183941398  0.182210655  0.1737458146 #> 1.85  0.1919923928  0.188770261  0.187053823  0.185412719  0.1774435488 #> 1.95  0.1928444769  0.190034756  0.188468186  0.186966930  0.1796838106 #> 2     0.1934118172  0.190639277  0.189290024  0.187832169  0.1807754978 #> 2.2   0.1941925087  0.192131392  0.191236826  0.190195669  0.1843763289 #> 2.35  0.1943123237  0.192795421  0.192169473  0.191234717  0.1865735557 #> 2.4   0.1951440010  0.192863041  0.192453564  0.191496960  0.1871693242 #> 2.5   0.1928630406  0.192779294  0.191623894  0.190967220  0.1875028911 #> 2.55  0.1924535642  0.191623894  0.192405282  0.190863548  0.1877539263 #> 2.6   0.1914969604  0.190967220  0.190863548  0.191071036  0.1877293913 #> 2.8   0.1871693242  0.187502891  0.187753926  0.187729391  0.1877982767 #> 2.85  0.1866144307  0.187100001  0.187407197  0.187647528  0.1868330875 #> 2.9   0.1850045573  0.185744232  0.186075091  0.186264919  0.1861145355 #> 2.95  0.1827874659  0.183793419  0.184214369  0.184564966  0.1849878450 #> 3.15  0.1761632536  0.177935790  0.178541317  0.179315368  0.1812956592 #> 3.4   0.1688399947  0.171572946  0.172355671  0.173579300  0.1772988492 #> 3.45  0.1669643820  0.169812438  0.170674651  0.171998589  0.1760647615 #> 3.5   0.1655834406  0.168530759  0.169474387  0.170855436  0.1751791617 #> 3.55  0.1638007517  0.166881401  0.167883510  0.169333467  0.1739486611 #> 3.6   0.1616590842  0.164873764  0.165958199  0.167474204  0.1724048490 #> 3.65  0.1600811478  0.163393438  0.164523162  0.166093688  0.1712461496 #> 3.7   0.1582719151  0.161687444  0.162887100  0.164512651  0.1699183202 #> 4.1   0.1429201555  0.147001790  0.148773837  0.150746780  0.1578891643 #> 4.15  0.1400464745  0.144199736  0.146043986  0.148064147  0.1554481536 #> 4.45  0.1265395923  0.131037296  0.133261457  0.135532706  0.1440693946 #> 4.65  0.1171294727  0.121882204  0.124231244  0.126651901  0.1358550170 #> 4.75  0.1128136466  0.117647699  0.120008732  0.122480271  0.1318994951 #> 4.8   0.1105204966  0.115401772  0.117788309  0.120296949  0.1298493067 #> 4.9   0.1061079231  0.111059695  0.113461446  0.116008267  0.1257444135 #> 5.3   0.0895291125  0.094629453  0.096999796  0.099567496  0.1095886606 #> 5.5   0.0814639410  0.086427045  0.088683298  0.091277280  0.1012130109 #> 5.6   0.0775769821  0.082532620  0.084810753  0.087330149  0.0971851089 #> 5.7   0.0730839801  0.077969047  0.080220849  0.082701278  0.0924465664 #> 5.9   0.0643710665  0.069083991  0.071287987  0.073683761  0.0832125199 #> 5.95  0.0620836940  0.066756093  0.068951159  0.071311899  0.0807617935 #> 6.15  0.0532804823  0.057726611  0.059866231  0.062136796  0.0713248821 #> 6.25  0.0487435195  0.053067288  0.055171185  0.057380151  0.0663759658 #> 6.65  0.0324301436  0.036183140  0.038106916  0.040055280  0.0481763099 #> 6.75  0.0288607254  0.032453389  0.034348667  0.036221466  0.0440933347 #> 7     0.0213055519  0.024489043  0.026191067  0.027854835  0.0349429946 #> 7.15  0.0172852221  0.020232570  0.021807973  0.023353685  0.0299732128 #> 7.2   0.0158336913  0.018687415  0.020229827  0.021727982  0.0281696906 #> 7.4   0.0114326989  0.013949556  0.015312664  0.016637336  0.0223885301 #> 7.45  0.0103032107  0.012752967  0.014070009  0.015362318  0.0209746868 #> 7.6   0.0072638480  0.009479443  0.010674008  0.011842226  0.0169744381 #> 7.7   0.0053510042  0.007422563  0.008505178  0.009604434  0.0144174502 #> 7.75  0.0043564520  0.006345732  0.007382777  0.008439746  0.0130832444 #> 7.8   0.0034688681  0.005381530  0.006374693  0.007392753  0.0118757095 #> 7.85  0.0025965290  0.004441215  0.005387217  0.006375548  0.0107159242 #> 7.9   0.0017224224  0.003496617  0.004403877  0.005356028  0.0095522007 #> 7.95  0.0008994169  0.002602467  0.003467225  0.004382936  0.0084283915 #> 8.05 -0.0004890015  0.001063451  0.001839718  0.002677871  0.0063954747 #> 8.25 -0.0033747061 -0.002119030 -0.001487579 -0.000793688  0.0023270863 #> 8.35 -0.0045381388 -0.003412362 -0.002852762 -0.002232372  0.0005959945 #> 8.4  -0.0050584092 -0.004004981 -0.003483516 -0.002901999 -0.0002318041 #> 8.45 -0.0056714590 -0.004690218 -0.004197053 -0.003653212 -0.0011298108 #> 8.5  -0.0060613184 -0.005153200 -0.004696285 -0.004191983 -0.0018319345 #> 8.55 -0.0064341635 -0.005591120 -0.005170164 -0.004705276 -0.0024957445 #> 8.6  -0.0068581593 -0.006078838 -0.005686813 -0.005255121 -0.0031837431 #> 8.7  -0.0075301609 -0.006883654 -0.006549144 -0.006186783 -0.0044010995 #> 9    -0.0092565209 -0.008961401 -0.008794312 -0.008623113 -0.0076234187 #> 9.35 -0.0100115072 -0.010075740 -0.010096198 -0.010125924 -0.0099885466 #> 9.45 -0.0100348914 -0.010185122 -0.010255576 -0.010331545 -0.0104085179 #> 9.6  -0.0099454791 -0.010225498 -0.010362631 -0.010511610 -0.0109139414 #> 9.7  -0.0097415915 -0.010087731 -0.010263180 -0.010449390 -0.0110268051 #> 9.75 -0.0095978718 -0.009980416 -0.010174556 -0.010381526 -0.0110541735 #> 9.85 -0.0092463431 -0.009693783 -0.009919567 -0.010165712 -0.0110133193 #> 9.95 -0.0087922970 -0.009293690 -0.009546054 -0.009825311 -0.0108237870 #>               2.85           2.9          2.95          3.15          3.4 #> 0     0.0831145974  0.0810660758  0.0795557762  0.0722462371  0.061548307 #> 0.1   0.0880565650  0.0859948929  0.0843061240  0.0767301908  0.065730213 #> 0.2   0.0933930501  0.0913131433  0.0894260053  0.0815593311  0.070283751 #> 0.25  0.0960000953  0.0939068401  0.0919259021  0.0839145403  0.072516607 #> 0.3   0.0988852579  0.0967805718  0.0946900123  0.0865183351  0.074986871 #> 0.35  0.1018065147  0.0996743779  0.0974925801  0.0891504343  0.077512754 #> 0.55  0.1133363279  0.1111244609  0.1085599300  0.0995778128  0.087524001 #> 0.65  0.1192193655  0.1168910899  0.1142255668  0.1049586275  0.092687757 #> 1.05  0.1416831188  0.1391872982  0.1361513128  0.1260853574  0.113438004 #> 1.1   0.1442752391  0.1417688894  0.1387173947  0.1286183247  0.115986128 #> 1.15  0.1468214976  0.1443076984  0.1412371358  0.1311141045  0.118508260 #> 1.2   0.1493522479  0.1467990975  0.1437314345  0.1335999839  0.120993160 #> 1.3   0.1540710745  0.1515353387  0.1484826474  0.1384428166  0.126007041 #> 1.4   0.1586895495  0.1560689923  0.1530448960  0.1430480498  0.130747671 #> 1.75  0.1723027890  0.1699440989  0.1669614303  0.1577029687  0.146531174 #> 1.85  0.1760950954  0.1737932221  0.1708292767  0.1617360533  0.150966508 #> 1.95  0.1784488910  0.1762820875  0.1734559960  0.1648497361  0.154633429 #> 2     0.1796375835  0.1775541586  0.1746970574  0.1661749925  0.156265345 #> 2.2   0.1836020725  0.1816480769  0.1791527274  0.1715740502  0.162991031 #> 2.35  0.1859496611  0.1844496677  0.1820182032  0.1751766455  0.167522582 #> 2.4   0.1866144307  0.1850045573  0.1827874659  0.1761632536  0.168839995 #> 2.5   0.1871000010  0.1857442323  0.1837934185  0.1779357900  0.171572946 #> 2.55  0.1874071973  0.1860750915  0.1842143687  0.1785413165  0.172355671 #> 2.6   0.1876475282  0.1862649190  0.1845649661  0.1793153684  0.173579300 #> 2.8   0.1868330875  0.1861145355  0.1849878450  0.1812956592  0.177298849 #> 2.85  0.1876868242  0.1863104463  0.1852390545  0.1818634112  0.178219668 #> 2.9   0.1863104463  0.1866483164  0.1849981344  0.1822413075  0.179261114 #> 2.95  0.1852390545  0.1849981344  0.1853114281  0.1820708374  0.179624766 #> 3.15  0.1818634112  0.1822413075  0.1820708374  0.1826668084  0.181451178 #> 3.4   0.1782196679  0.1792611143  0.1796247658  0.1814511778  0.184294623 #> 3.45  0.1770567219  0.1783187451  0.1787720020  0.1811875669  0.183715669 #> 3.5   0.1762363125  0.1775396690  0.1781014658  0.1807656938  0.183556841 #> 3.55  0.1750705694  0.1764764468  0.1770940789  0.1801718108  0.183357999 #> 3.6   0.1735791936  0.1751824550  0.1757805624  0.1792282539  0.182801266 #> 3.65  0.1724931869  0.1740708009  0.1748167588  0.1786300742  0.182533226 #> 3.7   0.1712252580  0.1728665926  0.1736807325  0.1778142367  0.182027371 #> 4.1   0.1595969458  0.1615234798  0.1628250610  0.1691023517  0.175097822 #> 4.15  0.1572115696  0.1592082344  0.1605450390  0.1671322388  0.173589570 #> 4.45  0.1461066191  0.1481878835  0.1500038330  0.1577854170  0.165420172 #> 4.65  0.1380860745  0.1402492192  0.1423590291  0.1508826937  0.159394819 #> 4.75  0.1341551633  0.1364329115  0.1386365913  0.1474889025  0.156482774 #> 4.8   0.1321641339  0.1344661322  0.1367362046  0.1457578566  0.154969908 #> 4.9   0.1281040607  0.1304969655  0.1328376714  0.1421551867  0.151823588 #> 5.3   0.1120581907  0.1147859287  0.1172131349  0.1273015857  0.138577794 #> 5.5   0.1036618145  0.1064417419  0.1088255251  0.1190117923  0.130677748 #> 5.6   0.0996008465  0.1023890918  0.1047351012  0.1148954263  0.126668334 #> 5.7   0.0948445693  0.0975898263  0.0999285803  0.1100498331  0.121832451 #> 5.9   0.0855233715  0.0881775680  0.0904951880  0.1004553415  0.112210808 #> 5.95  0.0830556771  0.0856843485  0.0879929330  0.0978981548  0.109635803 #> 6.15  0.0735170825  0.0759734430  0.0782987480  0.0879386853  0.099453883 #> 6.25  0.0685315590  0.0708665254  0.0731970387  0.0826676410  0.093961520 #> 6.65  0.0501386212  0.0520894285  0.0543655537  0.0630462652  0.073600560 #> 6.75  0.0460106064  0.0478838789  0.0500827094  0.0584933689  0.068789493 #> 7     0.0366936277  0.0384087073  0.0403894078  0.0480904134  0.057801728 #> 7.15  0.0316300471  0.0332737159  0.0351129296  0.0424125928  0.051798252 #> 7.2   0.0297971702  0.0313862873  0.0331817025  0.0403061138  0.049498212 #> 7.4   0.0238651432  0.0253591496  0.0269261831  0.0334102072  0.042062923 #> 7.45  0.0224205804  0.0239012311  0.0254180292  0.0317996560  0.040356980 #> 7.6   0.0183143183  0.0197364591  0.0210742991  0.0270008785  0.035146417 #> 7.7   0.0156861807  0.0170470517  0.0183270192  0.0240225219  0.031938934 #> 7.75  0.0143160810  0.0156392063  0.0168790996  0.0224133626  0.030165158 #> 7.8   0.0130737433  0.0143672494  0.0155610581  0.0209488618  0.028549744 #> 7.85  0.0118847363  0.0131532422  0.0143148107  0.0195960098  0.027081904 #> 7.9   0.0106894582  0.0119359791  0.0130464490  0.0181941184  0.025538000 #> 7.95  0.0095320441  0.0107500044  0.0118179126  0.0168307151  0.024028374 #> 8.05  0.0074318078  0.0085840470  0.0095641364  0.0142692633  0.021150060 #> 8.25  0.0032276359  0.0042380293  0.0050687817  0.0091897286  0.015374012 #> 8.35  0.0014401594  0.0023696406  0.0031160088  0.0069312157  0.012733722 #> 8.4   0.0005722405  0.0014614796  0.0021633898  0.0058109819  0.011404559 #> 8.45 -0.0003580805  0.0004804398  0.0011453073  0.0046216339  0.009992893 #> 8.5  -0.0010954503 -0.0003007428  0.0003184117  0.0036133500  0.008771303 #> 8.55 -0.0017981552 -0.0010346072 -0.0004694797  0.0026687452  0.007605245 #> 8.6  -0.0025135261 -0.0017921289 -0.0012664395  0.0017137666  0.006453398 #> 8.7  -0.0037963899 -0.0031500051 -0.0027130221 -0.0000599953  0.004268836 #> 9    -0.0072012326 -0.0068047365 -0.0065839153 -0.0048545561 -0.001765124 #> 9.35 -0.0097746009 -0.0096763771 -0.0096934015 -0.0090433466 -0.007396075 #> 9.45 -0.0102451771 -0.0102248167 -0.0102963132 -0.0099159414 -0.008639063 #> 9.6  -0.0108314282 -0.0109415100 -0.0110996048 -0.0111607414 -0.010487709 #> 9.7  -0.0109857614 -0.0111604208 -0.0113682874 -0.0116617932 -0.011326670 #> 9.75 -0.0110360069 -0.0112474525 -0.0114830392 -0.0119101571 -0.011761941 #> 9.85 -0.0110378005 -0.0113162725 -0.0116078373 -0.0122873911 -0.012499109 #> 9.95 -0.0108840706 -0.0112160887 -0.0115595603 -0.0124602994 -0.013000668 #>              3.45           3.5          3.55          3.6         3.65 #> 0     0.059322062  0.0576268619  0.0557391022  0.053978748  0.052140096 #> 0.1   0.063468127  0.0616975335  0.0597287614  0.057870856  0.055947840 #> 0.2   0.067988241  0.0661453430  0.0640975390  0.062139819  0.060138046 #> 0.25  0.070204909  0.0683292248  0.0662465849  0.064244908  0.062209060 #> 0.3   0.072652851  0.0707443197  0.0686229689  0.066571251  0.064499473 #> 0.35  0.075168920  0.0732235185  0.0710690271  0.068973052  0.066870904 #> 0.55  0.085095796  0.0830458376  0.0807669750  0.078497504  0.076295473 #> 0.65  0.090206310  0.0881184985  0.0857803409  0.083424320  0.081181562 #> 1.05  0.110780134  0.1086314197  0.1061393911  0.103480402  0.101199631 #> 1.1   0.113317976  0.1111714837  0.1086704330  0.105983882  0.103706729 #> 1.15  0.115831559  0.1136889723  0.1111811005  0.108470207  0.106198041 #> 1.2   0.118299771  0.1161647161  0.1136465366  0.110902897  0.108637577 #> 1.3   0.123311531  0.1211959797  0.1186767189  0.115883107  0.113646406 #> 1.4   0.128069764  0.1259796770  0.1234663814  0.120650946  0.118436656 #> 1.75  0.144012515  0.1420838287  0.1396931961  0.136898313  0.134850533 #> 1.85  0.148509547  0.1466231657  0.1442773202  0.141517770  0.139508374 #> 1.95  0.152311945  0.1505113391  0.1482631783  0.145609374  0.143673689 #> 2     0.153928476  0.1521700214  0.1499612651  0.147313803  0.145447801 #> 2.2   0.160908074  0.1593175913  0.1573191168  0.154948210  0.153189230 #> 2.35  0.165583135  0.1641523116  0.1623066516  0.160060507  0.158464298 #> 2.4   0.166964382  0.1655834406  0.1638007517  0.161659084  0.160081148 #> 2.5   0.169812438  0.1685307588  0.1668814009  0.164873764  0.163393438 #> 2.55  0.170674651  0.1694743871  0.1678835097  0.165958199  0.164523162 #> 2.6   0.171998589  0.1708554355  0.1693334673  0.167474204  0.166093688 #> 2.8   0.176064761  0.1751791617  0.1739486611  0.172404849  0.171246150 #> 2.85  0.177056722  0.1762363125  0.1750705694  0.173579194  0.172493187 #> 2.9   0.178318745  0.1775396690  0.1764764468  0.175182455  0.174070801 #> 2.95  0.178772002  0.1781014658  0.1770940789  0.175780562  0.174816759 #> 3.15  0.181187567  0.1807656938  0.1801718108  0.179228254  0.178630074 #> 3.4   0.183715669  0.1835568411  0.1833579991  0.182801266  0.182533226 #> 3.45  0.185171877  0.1842254907  0.1841400150  0.183686509  0.183648776 #> 3.5   0.184225491  0.1849029837  0.1843843868  0.183765950  0.183666374 #> 3.55  0.184140015  0.1843843868  0.1849551737  0.183918864  0.183903412 #> 3.6   0.183686509  0.1837659498  0.1839188636  0.184649146  0.183760814 #> 3.65  0.183648776  0.1836663736  0.1839034117  0.183760814  0.184580376 #> 3.7   0.183173838  0.1833043944  0.1836191524  0.183553346  0.183958606 #> 4.1   0.176445978  0.1773088749  0.1781675083  0.178688262  0.179505238 #> 4.15  0.175014907  0.1760024977  0.1769907972  0.177576427  0.178526405 #> 4.45  0.166666906  0.1682432696  0.1695298176  0.170491866  0.171857403 #> 4.65  0.160604511  0.1625385530  0.1640159113  0.165183329  0.166794714 #> 4.75  0.157702074  0.1598087720  0.1613754027  0.162638230  0.164384349 #> 4.8   0.156203347  0.1583545879  0.1599620070  0.161258548  0.163040951 #> 4.9   0.153189929  0.1554071082  0.1571091424  0.158509312  0.160378090 #> 5.3   0.140571824  0.1429019449  0.1449240245  0.146666704  0.148822313 #> 5.5   0.133009796  0.1352775928  0.1374234446  0.139318178  0.141533137 #> 5.6   0.129183151  0.1313817839  0.1335797312  0.135542359  0.137763430 #> 5.7   0.124433914  0.1266057072  0.1288393924  0.130861506  0.133078642 #> 5.9   0.114949956  0.1170479847  0.1193314672  0.121446346  0.123639457 #> 5.95  0.112394131  0.1144790188  0.1167703082  0.118902661  0.121091828 #> 6.15  0.102185043  0.1042230705  0.1065166102  0.108701899  0.110824326 #> 6.25  0.096641680  0.0986663210  0.1009496972  0.103151646  0.105231270 #> 6.65  0.076018109  0.0779742059  0.0801705645  0.082366307  0.084313081 #> 6.75  0.071101075  0.0730469951  0.0752103229  0.077354719  0.079303319 #> 7     0.060022735  0.0618635182  0.0639381677  0.065997948  0.067909964 #> 7.15  0.053960919  0.0557507314  0.0577697914  0.059759585  0.061655160 #> 7.2   0.051595805  0.0533749345  0.0553646033  0.057327238  0.059211594 #> 7.4   0.044072865  0.0457562023  0.0476485469  0.049503122  0.051363869 #> 7.45  0.042348989  0.0440286249  0.0459049375  0.047722992  0.049577512 #> 7.6   0.037020064  0.0386675150  0.0404649595  0.042160276  0.044011333 #> 7.7   0.033789129  0.0353928187  0.0371440545  0.038816503  0.040606377 #> 7.75  0.031961785  0.0335498670  0.0352672302  0.036910138  0.038683228 #> 7.8   0.030304344  0.0318782377  0.0335661029  0.035176827  0.036934534 #> 7.85  0.028804729  0.0303694302  0.0320332643  0.033620521  0.035355143 #> 7.9   0.027206264  0.0287708229  0.0304060456  0.031946816  0.033675341 #> 7.95  0.025654116  0.0272078162  0.0288144589  0.030322774  0.032034503 #> 8.05  0.022684488  0.0242062017  0.0257481535  0.027201689  0.028877251 #> 8.25  0.016680777  0.0181352993  0.0195376726  0.020853802  0.022433436 #> 8.35  0.013924381  0.0153604859  0.0166953408  0.017946585  0.019494994 #> 8.4   0.012551774  0.0139500780  0.0152438835  0.016453211  0.017961679 #> 8.45  0.011076749  0.0124464753  0.0136991145  0.014870333  0.016346461 #> 8.5   0.009805739  0.0111391761  0.0123498396  0.013486212  0.014929223 #> 8.55  0.008579636  0.0099027132  0.0110768020  0.012167906  0.013594735 #> 8.6   0.007374724  0.0086702119  0.0098058058  0.010859741  0.012257051 #> 8.7   0.005084901  0.0063161899  0.0073709775  0.008341524  0.009677290 #> 9    -0.001252197 -0.0002204619  0.0005901007  0.001326149  0.002436941 #> 9.35 -0.007154461 -0.0064586426 -0.0059578675 -0.005525276 -0.004771260 #> 9.45 -0.008468965 -0.0078637480 -0.0074477648 -0.007096725 -0.006447083 #> 9.6  -0.010410433 -0.0099746281 -0.0096928213 -0.009470331 -0.008996669 #> 9.7  -0.011320061 -0.0109598913 -0.0107548522 -0.010609744 -0.010225687 #> 9.75 -0.011788821 -0.0114764215 -0.0113129540 -0.011207576 -0.010872649 #> 9.85 -0.012590473 -0.0123668332 -0.0122817333 -0.012254281 -0.012008863 #> 9.95 -0.013166273 -0.0130091941 -0.0129961355 -0.013041889 -0.012866332 #>               3.7           4.1          4.15          4.45          4.65 #> 0     0.050367029  0.0359406525  0.0347516991  0.0262069846  0.0209834207 #> 0.1   0.054082941  0.0388376756  0.0375185475  0.0283396369  0.0227830619 #> 0.2   0.058183015  0.0421345884  0.0406673409  0.0308038961  0.0248801542 #> 0.25  0.060214324  0.0438156814  0.0422786208  0.0320910996  0.0259887507 #> 0.3   0.062461332  0.0456623955  0.0440522941  0.0335152791  0.0272275471 #> 0.35  0.064794127  0.0476972637  0.0459919241  0.0350831295  0.0285630651 #> 0.55  0.074082966  0.0558281201  0.0538248596  0.0416375418  0.0343486250 #> 0.65  0.078911255  0.0602191872  0.0580798862  0.0454006460  0.0377486346 #> 1.05  0.098786122  0.0791294537  0.0765015210  0.0623609178  0.0534608788 #> 1.1   0.101284664  0.0815796163  0.0789016314  0.0646449909  0.0556209896 #> 1.15  0.103769275  0.0840225294  0.0812989011  0.0669358957  0.0577985689 #> 1.2   0.106201248  0.0864095120  0.0836497133  0.0692371425  0.0600131323 #> 1.3   0.111205250  0.0913826235  0.0885417101  0.0740181367  0.0646285153 #> 1.4   0.116000318  0.0962155619  0.0933098239  0.0786886703  0.0691507306 #> 1.75  0.132512431  0.1133657212  0.1103345091  0.0957165675  0.0859227621 #> 1.85  0.137203916  0.1182799250  0.1151949870  0.1004813337  0.0905983893 #> 1.95  0.141452158  0.1231065468  0.1200439386  0.1054841893  0.0956271143 #> 2     0.143265454  0.1252510842  0.1221895430  0.1077251790  0.0979097197 #> 2.2   0.151181310  0.1343769678  0.1313846865  0.1172285142  0.1075071472 #> 2.35  0.156598260  0.1408168731  0.1379108572  0.1243068691  0.1148612431 #> 2.4   0.158271915  0.1429201555  0.1400464745  0.1265395923  0.1171294727 #> 2.5   0.161687444  0.1470017897  0.1441997365  0.1310372962  0.1218822040 #> 2.55  0.162887100  0.1487738373  0.1460439861  0.1332614567  0.1242312444 #> 2.6   0.164512651  0.1507467798  0.1480641472  0.1355327055  0.1266519014 #> 2.8   0.169918320  0.1578891643  0.1554481536  0.1440693946  0.1358550170 #> 2.85  0.171225258  0.1595969458  0.1572115696  0.1461066191  0.1380860745 #> 2.9   0.172866593  0.1615234798  0.1592082344  0.1481878835  0.1402492192 #> 2.95  0.173680732  0.1628250610  0.1605450390  0.1500038330  0.1423590291 #> 3.15  0.177814237  0.1691023517  0.1671322388  0.1577854170  0.1508826937 #> 3.4   0.182027371  0.1750978218  0.1735895703  0.1654201717  0.1593948188 #> 3.45  0.183173838  0.1764459785  0.1750149072  0.1666669063  0.1606045110 #> 3.5   0.183304394  0.1773088749  0.1760024977  0.1682432696  0.1625385530 #> 3.55  0.183619152  0.1781675083  0.1769907972  0.1695298176  0.1640159113 #> 3.6   0.183553346  0.1786882619  0.1775764266  0.1704918660  0.1651833288 #> 3.65  0.183958606  0.1795052383  0.1785264053  0.1718574029  0.1667947138 #> 3.7   0.184424575  0.1800730228  0.1792109588  0.1729947940  0.1681932527 #> 4.1   0.180073023  0.1822155012  0.1813924358  0.1788757760  0.1761011863 #> 4.15  0.179210959  0.1813924358  0.1826298731  0.1797545906  0.1772229490 #> 4.45  0.172994794  0.1788757760  0.1797545906  0.1829677702  0.1819722212 #> 4.65  0.168193253  0.1761011863  0.1772229490  0.1819722212  0.1847437026 #> 4.75  0.165904786  0.1745001067  0.1756576973  0.1812060949  0.1836653867 #> 4.8   0.164602777  0.1737143268  0.1749173362  0.1812122133  0.1842484042 #> 4.9   0.162029148  0.1719387485  0.1731643133  0.1800237175  0.1835294585 #> 5.3   0.150737984  0.1631529548  0.1642320272  0.1722988818  0.1771771328 #> 5.5   0.143533196  0.1572655103  0.1583260987  0.1666197053  0.1716459344 #> 5.6   0.139788900  0.1541876115  0.1552257271  0.1634558415  0.1683507676 #> 5.7   0.135136178  0.1501759172  0.1512798852  0.1598932052  0.1649760127 #> 5.9   0.125739444  0.1419142120  0.1431217179  0.1524596843  0.1579367660 #> 5.95  0.123201217  0.1396187039  0.1408513636  0.1504002610  0.1560014997 #> 6.15  0.112956720  0.1303018755  0.1317347777  0.1425242402  0.1489191108 #> 6.25  0.107373410  0.1251706884  0.1267504776  0.1382769276  0.1450776695 #> 6.65  0.086442626  0.1050230638  0.1069930159  0.1207895506  0.1293457727 #> 6.75  0.081425882  0.1001478515  0.1022031026  0.1165045140  0.1254712103 #> 7     0.069968193  0.0884075070  0.0904599356  0.1047599080  0.1139140465 #> 7.15  0.063668654  0.0817848631  0.0837966895  0.0979786067  0.1071893245 #> 7.2   0.061210814  0.0792391909  0.0812875837  0.0955640485  0.1048653755 #> 7.4   0.053281066  0.0706159555  0.0725621170  0.0862198875  0.0952635043 #> 7.45  0.051478584  0.0686556491  0.0705695431  0.0841608392  0.0931947363 #> 7.6   0.045851314  0.0624168946  0.0642452372  0.0775078131  0.0864427696 #> 7.7   0.042398358  0.0584664001  0.0602454897  0.0731403797  0.0819210543 #> 7.75  0.040450874  0.0562643631  0.0580361958  0.0708640742  0.0796525032 #> 7.8   0.038678523  0.0542460504  0.0559986593  0.0686992323  0.0774436929 #> 7.85  0.037077517  0.0523955251  0.0541286704  0.0667094981  0.0754228222 #> 7.9   0.035376579  0.0504486581  0.0521586625  0.0646768480  0.0733952187 #> 7.95  0.033712517  0.0485328250  0.0502237785  0.0626190715  0.0712938143 #> 8.05  0.030505015  0.0447561386  0.0464088449  0.0584553238  0.0669925859 #> 8.25  0.023950583  0.0370936908  0.0387107248  0.0502999594  0.0586793200 #> 8.35  0.020966960  0.0336083115  0.0352273136  0.0466029794  0.0548681176 #> 8.4   0.019394008  0.0317243648  0.0333102084  0.0444903275  0.0526406328 #> 8.45  0.017746012  0.0298172869  0.0314034161  0.0424836383  0.0505728242 #> 8.5   0.016292094  0.0280447463  0.0296061593  0.0404523946  0.0484047498 #> 8.55  0.014931121  0.0264165419  0.0279710053  0.0386823731  0.0465389265 #> 8.6   0.013560546  0.0247573113  0.0262940690  0.0368247550  0.0445696648 #> 8.7   0.010908557  0.0214939396  0.0229798051  0.0330778281  0.0405467602 #> 9     0.003445767  0.0121992102  0.0135513734  0.0225324585  0.0292751880 #> 9.35 -0.004090602  0.0021616750  0.0031836612  0.0103303782  0.0158559731 #> 9.45 -0.005859214 -0.0003542114  0.0005660784  0.0071673507  0.0123445124 #> 9.6  -0.008561228 -0.0041436117 -0.0033896936  0.0023495752  0.0069329186 #> 9.7  -0.009872939 -0.0061473308 -0.0054844923 -0.0002677444  0.0039639251 #> 9.75 -0.010565404 -0.0071918124 -0.0065781288 -0.0016534542  0.0023734181 #> 9.85 -0.011786799 -0.0090683910 -0.0085472493 -0.0041847953 -0.0005663273 #> 9.95 -0.012717968 -0.0106396080 -0.0101947691 -0.0063709600 -0.0031445604 #>              4.75           4.8         4.9         5.3         5.5 #> 0     0.018458106  0.0173188747 0.014851521 0.005813722 0.001765194 #> 0.1   0.020135526  0.0188976287 0.016340084 0.006960589 0.002765732 #> 0.2   0.022110424  0.0207677938 0.018111971 0.008400904 0.004054351 #> 0.25  0.023159117  0.0217659999 0.019060534 0.009190146 0.004771570 #> 0.3   0.024337895  0.0229107073 0.020127467 0.010066149 0.005539521 #> 0.35  0.025605319  0.0240803617 0.021287781 0.011103631 0.006551701 #> 0.55  0.031142957  0.0294311944 0.026371901 0.015467682 0.010558322 #> 0.65  0.034410144  0.0326117140 0.029402477 0.018017550 0.012889713 #> 1.05  0.049627825  0.0475319462 0.043745537 0.030401705 0.024384933 #> 1.1   0.051734015  0.0496094145 0.045756718 0.032162074 0.026046109 #> 1.15  0.053861444  0.0517109270 0.047794370 0.033964635 0.027715154 #> 1.2   0.056024441  0.0538570789 0.049869580 0.035762374 0.029322960 #> 1.3   0.060554232  0.0583555035 0.054247767 0.039633547 0.032979259 #> 1.4   0.064997175  0.0627644650 0.058553265 0.043501219 0.036624299 #> 1.75  0.081606687  0.0792995801 0.074823887 0.058521793 0.050898333 #> 1.85  0.086224418  0.0839125925 0.079406067 0.063013119 0.055288857 #> 1.95  0.091225059  0.0889159420 0.084398898 0.067867930 0.060005678 #> 2     0.093524753  0.0911953652 0.086679132 0.070103948 0.062216056 #> 2.2   0.103160479  0.1008239795 0.096347134 0.079801085 0.071792862 #> 2.35  0.110537141  0.1082515462 0.103807317 0.087151571 0.078974257 #> 2.4   0.112813647  0.1105204966 0.106107923 0.089529112 0.081463941 #> 2.5   0.117647699  0.1154017725 0.111059695 0.094629453 0.086427045 #> 2.55  0.120008732  0.1177883093 0.113461446 0.096999796 0.088683298 #> 2.6   0.122480271  0.1202969488 0.116008267 0.099567496 0.091277280 #> 2.8   0.131899495  0.1298493067 0.125744413 0.109588661 0.101213011 #> 2.85  0.134155163  0.1321641339 0.128104061 0.112058191 0.103661815 #> 2.9   0.136432912  0.1344661322 0.130496966 0.114785929 0.106441742 #> 2.95  0.138636591  0.1367362046 0.132837671 0.117213135 0.108825525 #> 3.15  0.147488902  0.1457578566 0.142155187 0.127301586 0.119011792 #> 3.4   0.156482774  0.1549699076 0.151823588 0.138577794 0.130677748 #> 3.45  0.157702074  0.1562033466 0.153189929 0.140571824 0.133009796 #> 3.5   0.159808772  0.1583545879 0.155407108 0.142901945 0.135277593 #> 3.55  0.161375403  0.1599620070 0.157109142 0.144924025 0.137423445 #> 3.6   0.162638230  0.1612585477 0.158509312 0.146666704 0.139318178 #> 3.65  0.164384349  0.1630409506 0.160378090 0.148822313 0.141533137 #> 3.7   0.165904786  0.1646027772 0.162029148 0.150737984 0.143533196 #> 4.1   0.174500107  0.1737143268 0.171938748 0.163152955 0.157265510 #> 4.15  0.175657697  0.1749173362 0.173164313 0.164232027 0.158326099 #> 4.45  0.181206095  0.1812122133 0.180023717 0.172298882 0.166619705 #> 4.65  0.183665387  0.1842484042 0.183529458 0.177177133 0.171645934 #> 4.75  0.184854754  0.1847123934 0.184278507 0.179015862 0.173806094 #> 4.8   0.184712393  0.1864986278 0.185648293 0.180511708 0.175202903 #> 4.9   0.184278507  0.1856482931 0.186134672 0.181812577 0.177095026 #> 5.3   0.179015862  0.1805117075 0.181812577 0.185365339 0.182697821 #> 5.5   0.173806094  0.1752029032 0.177095026 0.182697821 0.183551430 #> 5.6   0.170539305  0.1717802090 0.173891252 0.180463952 0.181686617 #> 5.7   0.167383087  0.1685727146 0.170957550 0.178682576 0.180878617 #> 5.9   0.160632145  0.1617783844 0.164656854 0.174188843 0.177967753 #> 5.95  0.158813745  0.1599901476 0.162912380 0.172871374 0.177065584 #> 6.15  0.152069800  0.1533712295 0.156577471 0.167456497 0.172425412 #> 6.25  0.148443281  0.1497476036 0.153057787 0.164112289 0.169457295 #> 6.65  0.133552707  0.1352694061 0.138973043 0.151432434 0.157417738 #> 6.75  0.129886892  0.1316950999 0.135467382 0.148306545 0.154336581 #> 7     0.118465180  0.1203995058 0.124427928 0.138874719 0.145839776 #> 7.15  0.111782289  0.1138101182 0.117971935 0.133355365 0.140813479 #> 7.2   0.109513589  0.1115560482 0.115728169 0.131207079 0.138690826 #> 7.4   0.099812964  0.1019003518 0.106205165 0.122891006 0.131139167 #> 7.45  0.097750545  0.0998556561 0.104198423 0.121144275 0.129517707 #> 7.6   0.090954909  0.0931238667 0.097532105 0.115066905 0.123800112 #> 7.7   0.086373771  0.0885547268 0.092993763 0.110922398 0.119903956 #> 7.75  0.084112874  0.0863344779 0.090774366 0.108755549 0.117702791 #> 7.8   0.081887092  0.0841228123 0.088564841 0.106652182 0.115643754 #> 7.85  0.079861460  0.0821141992 0.086552671 0.104755952 0.113752427 #> 7.9   0.077838298  0.0801230542 0.084562453 0.102824642 0.111791778 #> 7.95  0.075718593  0.0780152843 0.082454440 0.100786632 0.109784286 #> 8.05  0.071369561  0.0736925303 0.078090401 0.096599458 0.105619066 #> 8.25  0.062974106  0.0653247556 0.069653939 0.087920092 0.096704967 #> 8.35  0.059105389  0.0614614819 0.065743455 0.083860778 0.092502430 #> 8.4   0.056830689  0.0591641099 0.063395974 0.081394908 0.090000180 #> 8.45  0.054725764  0.0570466077 0.061245243 0.079059170 0.087591605 #> 8.5   0.052501637  0.0547975440 0.058945324 0.076677281 0.085178913 #> 8.55  0.050583381  0.0528594522 0.056963142 0.074530745 0.082939076 #> 8.6   0.048565401  0.0508171697 0.054877654 0.072299917 0.080644263 #> 8.7   0.044416592  0.0465973762 0.050555582 0.067649582 0.075888447 #> 9     0.032802706  0.0348110547 0.038412449 0.054138665 0.061762040 #> 9.35  0.018855521  0.0205501641 0.023560839 0.037290381 0.044155060 #> 9.45  0.015197488  0.0168060562 0.019637963 0.032746383 0.039290788 #> 9.6   0.009533853  0.0109887750 0.013488992 0.025594935 0.031753611 #> 9.7   0.006409539  0.0077750916 0.010083959 0.021503365 0.027308102 #> 9.75  0.004727609  0.0060398739 0.008242527 0.019313777 0.024961474 #> 9.85  0.001602228  0.0028049240 0.004792243 0.015155547 0.020520353 #> 9.95 -0.001166226 -0.0000692901 0.001729209 0.011343608 0.016362279 #>               5.6           5.7          5.9          5.95         6.15 #> 0    5.250797e-05 -0.0016669791 -0.004467585 -0.0052403873 -0.007020685 #> 0.1  9.312909e-04 -0.0008546114 -0.003835424 -0.0046325282 -0.006674984 #> 0.2  2.103024e-03  0.0002321709 -0.002957791 -0.0037906895 -0.006125249 #> 0.25 2.765950e-03  0.0008537116 -0.002440322 -0.0032896365 -0.005771067 #> 0.3  3.463325e-03  0.0014888324 -0.001943899 -0.0028076031 -0.005435718 #> 0.35 4.456461e-03  0.0024449969 -0.001075627 -0.0019886070 -0.004811101 #> 0.55 8.259043e-03  0.0060110335  0.001971451  0.0009629444 -0.002493594 #> 0.65 1.049458e-02  0.0081166142  0.003810581  0.0027376502 -0.001013465 #> 1.05 2.161722e-02  0.0186957256  0.013288494  0.0119332126  0.006975750 #> 1.1  2.322251e-02  0.0202318984  0.014685204  0.0132908517  0.008184391 #> 1.15 2.484870e-02  0.0217879227  0.016099786  0.0146700783  0.009414184 #> 1.2  2.641762e-02  0.0232856480  0.017456896  0.0159957355  0.010612897 #> 1.3  2.994052e-02  0.0266659683  0.020546318  0.0190033650  0.013330275 #> 1.4  3.347527e-02  0.0300676592  0.023674622  0.0220577227  0.016102239 #> 1.75 4.737173e-02  0.0434812668  0.036147511  0.0342704312  0.027328716 #> 1.85 5.170377e-02  0.0477103677  0.040089672  0.0381444044  0.030811646 #> 1.95 5.634034e-02  0.0522354129  0.044342344  0.0423241512  0.034649265 #> 2    5.853811e-02  0.0543919565  0.046449802  0.0444067293  0.036664711 #> 2.2  6.803911e-02  0.0637025514  0.055343928  0.0531772380  0.044841427 #> 2.35 7.511602e-02  0.0706475398  0.062001440  0.0597489969  0.051079673 #> 2.4  7.757698e-02  0.0730839801  0.064371067  0.0620836940  0.053280482 #> 2.5  8.253262e-02  0.0779690467  0.069083991  0.0667560931  0.057726611 #> 2.55 8.481075e-02  0.0802208490  0.071287987  0.0689511594  0.059866231 #> 2.6  8.733015e-02  0.0827012777  0.073683761  0.0713118993  0.062136796 #> 2.8  9.718511e-02  0.0924465664  0.083212520  0.0807617935  0.071324882 #> 2.85 9.960085e-02  0.0948445693  0.085523371  0.0830556771  0.073517082 #> 2.9  1.023891e-01  0.0975898263  0.088177568  0.0856843485  0.075973443 #> 2.95 1.047351e-01  0.0999285803  0.090495188  0.0879929330  0.078298748 #> 3.15 1.148954e-01  0.1100498331  0.100455342  0.0978981548  0.087938685 #> 3.4  1.266683e-01  0.1218324511  0.112210808  0.1096358030  0.099453883 #> 3.45 1.291832e-01  0.1244339136  0.114949956  0.1123941308  0.102185043 #> 3.5  1.313818e-01  0.1266057072  0.117047985  0.1144790188  0.104223071 #> 3.55 1.335797e-01  0.1288393924  0.119331467  0.1167703082  0.106516610 #> 3.6  1.355424e-01  0.1308615062  0.121446346  0.1189026606  0.108701899 #> 3.65 1.377634e-01  0.1330786415  0.123639457  0.1210918282  0.110824326 #> 3.7  1.397889e-01  0.1351361776  0.125739444  0.1232012172  0.112956720 #> 4.1  1.541876e-01  0.1501759172  0.141914212  0.1396187039  0.130301875 #> 4.15 1.552257e-01  0.1512798852  0.143121718  0.1408513636  0.131734778 #> 4.45 1.634558e-01  0.1598932052  0.152459684  0.1504002610  0.142524240 #> 4.65 1.683508e-01  0.1649760127  0.157936766  0.1560014997  0.148919111 #> 4.75 1.705393e-01  0.1673830874  0.160632145  0.1588137448  0.152069800 #> 4.8  1.717802e-01  0.1685727146  0.161778384  0.1599901476  0.153371229 #> 4.9  1.738913e-01  0.1709575501  0.164656854  0.1629123804  0.156577471 #> 5.3  1.804640e-01  0.1786825764  0.174188843  0.1728713739  0.167456497 #> 5.5  1.816866e-01  0.1808786170  0.177967753  0.1770655838  0.172425412 #> 5.6  1.820459e-01  0.1812270138  0.179101629  0.1783451492  0.174371576 #> 5.7  1.812270e-01  0.1819543318  0.180355935  0.1798907620  0.176645389 #> 5.9  1.791016e-01  0.1803559353  0.182144564  0.1809937948  0.179354171 #> 5.95 1.783451e-01  0.1798907620  0.180993795  0.1817800703  0.179717929 #> 6.15 1.743716e-01  0.1766453894  0.179354171  0.1797179288  0.181443851 #> 6.25 1.716861e-01  0.1742803138  0.177988830  0.1785578671  0.180741839 #> 6.65 1.601054e-01  0.1634424668  0.169406740  0.1706718380  0.176764429 #> 6.75 1.570433e-01  0.1604221832  0.166710100  0.1680986954  0.174825715 #> 7    1.490882e-01  0.1528768577  0.160284704  0.1619744111  0.169940319 #> 7.15 1.443630e-01  0.1483628968  0.156182805  0.1579983290  0.166193519 #> 7.2  1.422641e-01  0.1462782031  0.154279764  0.1561571017  0.164669345 #> 7.4  1.351815e-01  0.1394611615  0.147967579  0.1499688501  0.158580243 #> 7.45 1.336478e-01  0.1379723898  0.146572463  0.1486067501  0.157255806 #> 7.6  1.281643e-01  0.1326269169  0.141466274  0.1435577102  0.152301160 #> 7.7  1.243918e-01  0.1289506999  0.137940458  0.1401374253  0.148796440 #> 7.75 1.222275e-01  0.1267484308  0.135746811  0.1378979698  0.146771650 #> 7.8  1.202069e-01  0.1247347973  0.133759659  0.1359239275  0.144814756 #> 7.85 1.183376e-01  0.1228310684  0.131813960  0.1339620608  0.142784648 #> 7.9  1.163800e-01  0.1208460903  0.129784173  0.1319215097  0.140762153 #> 7.95 1.143915e-01  0.1188662057  0.127815072  0.1299783275  0.138804198 #> 8.05 1.102614e-01  0.1146984557  0.123590862  0.1257237176  0.134427395 #> 8.25 1.012694e-01  0.1055683017  0.114268460  0.1164419885  0.125193679 #> 8.35 9.701152e-02  0.1011845726  0.109683515  0.1118411599  0.120425649 #> 8.4  9.450171e-02  0.0986811015  0.107207593  0.1093731595  0.118034449 #> 8.45 9.206839e-02  0.0962270643  0.104739151  0.1069352141  0.115658524 #> 8.5  8.965368e-02  0.0937936906  0.102286048  0.1044638269  0.113151101 #> 8.55 8.736859e-02  0.0914370080  0.099817460  0.1019817659  0.110560601 #> 8.6  8.505011e-02  0.0890811504  0.097404459  0.0995644703  0.108097061 #> 8.7  8.026044e-02  0.0842403371  0.092493114  0.0946486781  0.103100319 #> 9    6.587154e-02  0.0696186867  0.077486960  0.0795957541  0.087892262 #> 9.35 4.796359e-02  0.0515986155  0.059378383  0.0614635174  0.070118759 #> 9.45 4.297808e-02  0.0465310668  0.054196484  0.0562534726  0.064963117 #> 9.6  3.530171e-02  0.0388230373  0.046492738  0.0485479649  0.057519949 #> 9.7  3.069710e-02  0.0340863238  0.041532947  0.0435345922  0.052406165 #> 9.75 2.829794e-02  0.0316468386  0.039030229  0.0410167814  0.049876088 #> 9.85 2.373401e-02  0.0269920418  0.034222011  0.0361665417  0.044936751 #> 9.95 1.942319e-02  0.0225258166  0.029467055  0.0313484374  0.039861572 #>              6.25          6.65          6.75            7         7.15 #> 0    -0.007853483 -0.0096297903 -0.0098475701 -0.010079145 -0.009940366 #> 0.1  -0.007612617 -0.0097734917 -0.0100913910 -0.010414289 -0.010308788 #> 0.2  -0.007192248 -0.0098062503 -0.0102382366 -0.010673976 -0.010614357 #> 0.25 -0.006903007 -0.0097506367 -0.0102404541 -0.010739759 -0.010708753 #> 0.3  -0.006632992 -0.0096831964 -0.0102209160 -0.010782929 -0.010779563 #> 0.35 -0.006113278 -0.0095690427 -0.0102045415 -0.010861869 -0.010903896 #> 0.55 -0.004106915 -0.0086394486 -0.0095249536 -0.010538426 -0.010764034 #> 0.65 -0.002775403 -0.0078606288 -0.0088791152 -0.010127548 -0.010483843 #> 1.05  0.004586702 -0.0029299807 -0.0045023509 -0.006903572 -0.007924625 #> 1.1   0.005715804 -0.0021200703 -0.0037653269 -0.006333191 -0.007450823 #> 1.15  0.006868438 -0.0012772016 -0.0029931970 -0.005729449 -0.006944845 #> 1.2   0.008008000 -0.0003939019 -0.0021751103 -0.005087096 -0.006406770 #> 1.3   0.010573561  0.0015418976 -0.0003911693 -0.003674584 -0.005207382 #> 1.4   0.013197931  0.0035536346  0.0014690340 -0.002180063 -0.003924367 #> 1.75  0.023869045  0.0120026344  0.0094117262  0.004405840  0.001867581 #> 1.85  0.027159481  0.0145123742  0.0117649296  0.006405000  0.003679631 #> 1.95  0.030818455  0.0174343618  0.0145292980  0.008749421  0.005787888 #> 2     0.032770456  0.0191077451  0.0161198243  0.010136301  0.007037466 #> 2.2   0.040588037  0.0254910879  0.0221904183  0.015419201  0.011865388 #> 2.35  0.046634205  0.0306944185  0.0272082800  0.019835417  0.015922312 #> 2.4   0.048743519  0.0324301436  0.0288607254  0.021305552  0.017285222 #> 2.5   0.053067288  0.0361831404  0.0324533890  0.024489043  0.020232570 #> 2.55  0.055171185  0.0381069162  0.0343486675  0.026191067  0.021807973 #> 2.6   0.057380151  0.0400552804  0.0362214659  0.027854835  0.023353685 #> 2.8   0.066375966  0.0481763099  0.0440933347  0.034942995  0.029973213 #> 2.85  0.068531559  0.0501386212  0.0460106064  0.036693628  0.031630047 #> 2.9   0.070866525  0.0520894285  0.0478838789  0.038408707  0.033273716 #> 2.95  0.073197039  0.0543655537  0.0500827094  0.040389408  0.035112930 #> 3.15  0.082667641  0.0630462652  0.0584933689  0.048090413  0.042412593 #> 3.4   0.093961520  0.0736005605  0.0687894933  0.057801728  0.051798252 #> 3.45  0.096641680  0.0760181094  0.0711010755  0.060022735  0.053960919 #> 3.5   0.098666321  0.0779742059  0.0730469951  0.061863518  0.055750731 #> 3.55  0.100949697  0.0801705645  0.0752103229  0.063938168  0.057769791 #> 3.6   0.103151646  0.0823663067  0.0773547192  0.065997948  0.059759585 #> 3.65  0.105231270  0.0843130809  0.0793033190  0.067909964  0.061655160 #> 3.7   0.107373410  0.0864426259  0.0814258817  0.069968193  0.063668654 #> 4.1   0.125170688  0.1050230638  0.1001478515  0.088407507  0.081784863 #> 4.15  0.126750478  0.1069930159  0.1022031026  0.090459936  0.083796690 #> 4.45  0.138276928  0.1207895506  0.1165045140  0.104759908  0.097978607 #> 4.65  0.145077669  0.1293457727  0.1254712103  0.113914046  0.107189325 #> 4.75  0.148443281  0.1335527071  0.1298868920  0.118465180  0.111782289 #> 4.8   0.149747604  0.1352694061  0.1316950999  0.120399506  0.113810118 #> 4.9   0.153057787  0.1389730425  0.1354673822  0.124427928  0.117971935 #> 5.3   0.164112289  0.1514324340  0.1483065451  0.138874719  0.133355365 #> 5.5   0.169457295  0.1574177379  0.1543365808  0.145839776  0.140813479 #> 5.6   0.171686146  0.1601053898  0.1570433071  0.149088219  0.144363019 #> 5.7   0.174280314  0.1634424668  0.1604221832  0.152876858  0.148362897 #> 5.9   0.177988830  0.1694067405  0.1667100997  0.160284704  0.156182805 #> 5.95  0.178557867  0.1706718380  0.1680986954  0.161974411  0.157998329 #> 6.15  0.180741839  0.1767644295  0.1748257147  0.169940319  0.166193519 #> 6.25  0.182606955  0.1797849697  0.1781537022  0.173710066  0.170213207 #> 6.65  0.179784970  0.1882003729  0.1876689431  0.186338078  0.183877853 #> 6.75  0.178153702  0.1876689431  0.1895931460  0.188473654  0.186631643 #> 7     0.173710066  0.1863380778  0.1884736539  0.191087632  0.189449196 #> 7.15  0.170213207  0.1838778531  0.1866316431  0.189449196  0.190067539 #> 7.2   0.168857400  0.1835869427  0.1864915585  0.190274665  0.190207519 #> 7.4   0.162773132  0.1780722701  0.1814380351  0.186541246  0.187925950 #> 7.45  0.161466923  0.1769449440  0.1803976065  0.185820391  0.187450613 #> 7.6   0.156611306  0.1724406306  0.1759648201  0.182203801  0.184670102 #> 7.7   0.153121404  0.1689800690  0.1726628773  0.179433362  0.182423904 #> 7.75  0.151171903  0.1675552236  0.1713689550  0.178438838  0.181702113 #> 7.8   0.149233851  0.1657871430  0.1696626076  0.177029014  0.180531639 #> 7.85  0.147172168  0.1637322478  0.1677153135  0.175354810  0.179067283 #> 7.9   0.145178026  0.1619470716  0.1659556816  0.173813595  0.177746877 #> 7.95  0.143232464  0.1600731077  0.1640940706  0.172166536  0.176313834 #> 8.05  0.138818917  0.1556635358  0.1597017612  0.168201514  0.172804639 #> 8.25  0.129664548  0.1474167904  0.1517847327  0.161313876  0.166690222 #> 8.35  0.124799906  0.1426717475  0.1471756213  0.157199687  0.162919411 #> 8.4   0.122464658  0.1406575734  0.1452592301  0.155560282  0.161461663 #> 8.45  0.120133240  0.1386592195  0.1433911457  0.153988500  0.160054127 #> 8.5   0.117616238  0.1362318066  0.1410219316  0.151877031  0.158136366 #> 8.55  0.114954651  0.1336336153  0.1385142734  0.149682426  0.156100079 #> 8.6   0.112471108  0.1312439115  0.1361967087  0.147616377  0.154187544 #> 8.7   0.107443879  0.1264085262  0.1315013740  0.143484004  0.150372442 #> 9     0.092239185  0.1118878780  0.1173957687  0.130514084  0.138196100 #> 9.35  0.074826641  0.0962016940  0.1021684508  0.116555685  0.125112406 #> 9.45  0.069755669  0.0915784163  0.0976377941  0.112273744  0.121039932 #> 9.6   0.062535339  0.0852939832  0.0915648132  0.106652415  0.115704956 #> 9.7   0.057409247  0.0802910784  0.0866061060  0.101849619  0.111036133 #> 9.75  0.054895946  0.0779009788  0.0842585780  0.099625269  0.108899074 #> 9.85  0.049941251  0.0730206433  0.0794409202  0.095015382  0.104414409 #> 9.95  0.044753986  0.0676095985  0.0740481557  0.089780853  0.099294838 #>                7.2           7.4          7.45           7.6          7.7 #> 0    -0.0098574111 -9.448972e-03 -0.0092813380 -0.0087750082 -0.008302340 #> 0.1  -0.0102512495 -9.846009e-03 -0.0096822960 -0.0091668354 -0.008693523 #> 0.2  -0.0105881902 -1.019547e-02 -0.0100418257 -0.0095301267 -0.009061015 #> 0.25 -0.0106994254 -1.032063e-02 -0.0101743028 -0.0096710413 -0.009209091 #> 0.3  -0.0107836116 -1.042242e-02 -0.0102862305 -0.0097955732 -0.009340590 #> 0.35 -0.0109395139 -1.059340e-02 -0.0104646197 -0.0099876799 -0.009541641 #> 0.55 -0.0108822824 -1.067656e-02 -0.0106092676 -0.0102485228 -0.009874334 #> 0.65 -0.0106494490 -1.057238e-02 -0.0105477510 -0.0102955476 -0.009969280 #> 1.05 -0.0083142154 -8.951103e-03 -0.0091439529 -0.0094597885 -0.009466572 #> 1.1  -0.0078725609 -8.619963e-03 -0.0088435567 -0.0092452205 -0.009303175 #> 1.15 -0.0073983565 -8.260529e-03 -0.0085152678 -0.0090026497 -0.009114610 #> 1.2  -0.0068895452 -7.884583e-03 -0.0081726268 -0.0087571134 -0.008922005 #> 1.3  -0.0057600677 -7.017447e-03 -0.0073707466 -0.0081521098 -0.008427975 #> 1.4  -0.0045473514 -6.065634e-03 -0.0064849353 -0.0074610722 -0.007846562 #> 1.75  0.0009756162 -1.538116e-03 -0.0022018132 -0.0038754608 -0.004762468 #> 1.85  0.0027128056 -2.462156e-05 -0.0007490452 -0.0025909514 -0.003608166 #> 1.95  0.0047368092  1.696882e-03  0.0008998628 -0.0011558689 -0.002328509 #> 2     0.0059368042  2.725005e-03  0.0018834066 -0.0003002768 -0.001560667 #> 2.2   0.0105818492  6.800087e-03  0.0058182325  0.0032232545  0.001647006 #> 2.35  0.0145181981  1.024469e-02  0.0091497067  0.0062169581  0.004373494 #> 2.4   0.0158336913  1.143270e-02  0.0103032107  0.0072638480  0.005351004 #> 2.5   0.0186874149  1.394956e-02  0.0127529673  0.0094794426  0.007422563 #> 2.55  0.0202298268  1.531266e-02  0.0140700089  0.0106740082  0.008505178 #> 2.6   0.0217279822  1.663734e-02  0.0153623182  0.0118422256  0.009604434 #> 2.8   0.0281696906  2.238853e-02  0.0209746868  0.0169744381  0.014417450 #> 2.85  0.0297971702  2.386514e-02  0.0224205804  0.0183143183  0.015686181 #> 2.9   0.0313862873  2.535915e-02  0.0239012311  0.0197364591  0.017047052 #> 2.95  0.0331817025  2.692618e-02  0.0254180292  0.0210742991  0.018327019 #> 3.15  0.0403061138  3.341021e-02  0.0317996560  0.0270008785  0.024022522 #> 3.4   0.0494982122  4.206292e-02  0.0403569803  0.0351464170  0.031938934 #> 3.45  0.0515958047  4.407286e-02  0.0423489887  0.0370200645  0.033789129 #> 3.5   0.0533749345  4.575620e-02  0.0440286249  0.0386675150  0.035392819 #> 3.55  0.0553646033  4.764855e-02  0.0459049375  0.0404649595  0.037144054 #> 3.6   0.0573272379  4.950312e-02  0.0477229919  0.0421602762  0.038816503 #> 3.65  0.0592115937  5.136387e-02  0.0495775124  0.0440113328  0.040606377 #> 3.7   0.0612108137  5.328107e-02  0.0514785840  0.0458513137  0.042398358 #> 4.1   0.0792391909  7.061596e-02  0.0686556491  0.0624168946  0.058466400 #> 4.15  0.0812875837  7.256212e-02  0.0705695431  0.0642452372  0.060245490 #> 4.45  0.0955640485  8.621989e-02  0.0841608392  0.0775078131  0.073140380 #> 4.65  0.1048653755  9.526350e-02  0.0931947363  0.0864427696  0.081921054 #> 4.75  0.1095135894  9.981296e-02  0.0977505449  0.0909549089  0.086373771 #> 4.8   0.1115560482  1.019004e-01  0.0998556561  0.0931238667  0.088554727 #> 4.9   0.1157281691  1.062052e-01  0.1041984227  0.0975321049  0.092993763 #> 5.3   0.1312070793  1.228910e-01  0.1211442752  0.1150669054  0.110922398 #> 5.5   0.1386908261  1.311392e-01  0.1295177072  0.1238001121  0.119903956 #> 5.6   0.1422640731  1.351815e-01  0.1336477622  0.1281642576  0.124391763 #> 5.7   0.1462782031  1.394612e-01  0.1379723898  0.1326269169  0.128950700 #> 5.9   0.1542797644  1.479676e-01  0.1465724634  0.1414662738  0.137940458 #> 5.95  0.1561571017  1.499689e-01  0.1486067501  0.1435577102  0.140137425 #> 6.15  0.1646693449  1.585802e-01  0.1572558056  0.1523011599  0.148796440 #> 6.25  0.1688574002  1.627731e-01  0.1614669233  0.1566113056  0.153121404 #> 6.65  0.1835869427  1.780723e-01  0.1769449440  0.1724406306  0.168980069 #> 6.75  0.1864915585  1.814380e-01  0.1803976065  0.1759648201  0.172662877 #> 7     0.1902746654  1.865412e-01  0.1858203913  0.1822038009  0.179433362 #> 7.15  0.1902075194  1.879260e-01  0.1874506128  0.1846701018  0.182423904 #> 7.2   0.1919826722  1.891696e-01  0.1887471787  0.1860304871  0.183829407 #> 7.4   0.1891695757  1.900236e-01  0.1890351670  0.1875877458  0.186207788 #> 7.45  0.1887471787  1.890352e-01  0.1900762940  0.1879126864  0.186696710 #> 7.6   0.1860304871  1.875877e-01  0.1879126864  0.1887028175  0.187417247 #> 7.7   0.1838294069  1.862078e-01  0.1866967103  0.1874172470  0.187997898 #> 7.75  0.1831079242  1.856981e-01  0.1862738966  0.1872392969  0.187249103 #> 7.8   0.1819932727  1.849524e-01  0.1856161898  0.1869195505  0.187122337 #> 7.85  0.1806469511  1.840622e-01  0.1848067431  0.1865929096  0.187044523 #> 7.9   0.1793839953  1.831115e-01  0.1839079921  0.1859589436  0.186652092 #> 7.95  0.1779577632  1.820151e-01  0.1829113396  0.1853192572  0.186157794 #> 8.05  0.1744887634  1.791985e-01  0.1803207794  0.1835238781  0.184770248 #> 8.25  0.1686592345  1.744935e-01  0.1759378341  0.1803192472  0.182191698 #> 8.35  0.1650536514  1.714495e-01  0.1730734311  0.1779838384  0.180128374 #> 8.4   0.1636731527  1.703431e-01  0.1720203427  0.1771738189  0.179397498 #> 8.45  0.1623738736  1.693068e-01  0.1710603409  0.1764076811  0.178796676 #> 8.5   0.1605246880  1.677419e-01  0.1696073051  0.1752506991  0.177805270 #> 8.55  0.1586132861  1.661622e-01  0.1680841597  0.1739360664  0.176594656 #> 8.6   0.1567884763  1.646075e-01  0.1666035493  0.1726710735  0.175446498 #> 8.7   0.1531622025  1.615787e-01  0.1637132941  0.1701762510  0.173184709 #> 9     0.1414367499  1.512487e-01  0.1537623357  0.1615248077  0.165218707 #> 9.35  0.1287472128  1.399806e-01  0.1427281588  0.1518291363  0.156311336 #> 9.45  0.1247505337  1.362875e-01  0.1390808697  0.1485984045  0.153316409 #> 9.6   0.1195614224  1.315256e-01  0.1343568577  0.1443179056  0.149313415 #> 9.7   0.1149697904  1.272022e-01  0.1300621694  0.1403552687  0.145531501 #> 9.75  0.1128804719  1.252627e-01  0.1281535290  0.1386046095  0.143875145 #> 9.85  0.1084951299  1.211613e-01  0.1240939655  0.1347712100  0.140178578 #> 9.95  0.1034725219  1.164414e-01  0.1194406034  0.1303691792  0.135917516 #>               7.75           7.8          7.85           7.9          7.95 #> 0    -0.0081089941 -0.0078808414 -0.0076070712 -0.0073588176 -0.0071110666 #> 0.1  -0.0084863513 -0.0082547598 -0.0079841374 -0.0077310633 -0.0074784769 #> 0.2  -0.0088455866 -0.0086142861 -0.0083506377 -0.0080984762 -0.0078452524 #> 0.25 -0.0089920910 -0.0087631614 -0.0085052912 -0.0082559765 -0.0080047797 #> 0.3  -0.0091224237 -0.0088963278 -0.0086421692 -0.0083972898 -0.0081498630 #> 0.35 -0.0093291631 -0.0091078596 -0.0088663711 -0.0086269837 -0.0083815509 #> 0.55 -0.0096888210 -0.0095009697 -0.0093030852 -0.0091057745 -0.0088948095 #> 0.65 -0.0098144373 -0.0096547540 -0.0094845213 -0.0093227993 -0.0091392637 #> 1.05 -0.0094943241 -0.0094988622 -0.0094984853 -0.0095211914 -0.0094979244 #> 1.1  -0.0093595566 -0.0093893605 -0.0094137286 -0.0094636745 -0.0094648633 #> 1.15 -0.0091993704 -0.0092548334 -0.0093049268 -0.0093815355 -0.0094073842 #> 1.2  -0.0090356908 -0.0091181252 -0.0091929418 -0.0092977728 -0.0093489700 #> 1.3  -0.0086060337 -0.0087455852 -0.0088719299 -0.0090363008 -0.0091419729 #> 1.4  -0.0080863922 -0.0082824300 -0.0084606568 -0.0086839272 -0.0088431191 #> 1.75 -0.0052430388 -0.0056632598 -0.0060665943 -0.0065000847 -0.0068728300 #> 1.85 -0.0041573436 -0.0046364082 -0.0050992175 -0.0055907875 -0.0060218083 #> 1.95 -0.0029558939 -0.0035052732 -0.0040359604 -0.0045931685 -0.0050911260 #> 2    -0.0022296806 -0.0028209661 -0.0033976763 -0.0039957818 -0.0045336082 #> 2.2   0.0008167424  0.0000811529 -0.0006402853 -0.0013737345 -0.0020505874 #> 2.35  0.0034207227  0.0025691739  0.0017310073  0.0008948606  0.0001072610 #> 2.4   0.0043564520  0.0034688681  0.0025965290  0.0017224224  0.0008994169 #> 2.5   0.0063457323  0.0053815296  0.0044412155  0.0034966174  0.0026024666 #> 2.55  0.0073827771  0.0063746932  0.0053872172  0.0044038771  0.0034672253 #> 2.6   0.0084397460  0.0073927528  0.0063755478  0.0053560284  0.0043829360 #> 2.8   0.0130832444  0.0118757095  0.0107159242  0.0095522007  0.0084283915 #> 2.85  0.0143160810  0.0130737433  0.0118847363  0.0106894582  0.0095320441 #> 2.9   0.0156392063  0.0143672494  0.0131532422  0.0119359791  0.0107500044 #> 2.95  0.0168790996  0.0155610581  0.0143148107  0.0130464490  0.0118179126 #> 3.15  0.0224133626  0.0209488618  0.0195960098  0.0181941184  0.0168307151 #> 3.4   0.0301651582  0.0285497444  0.0270819041  0.0255379998  0.0240283742 #> 3.45  0.0319617855  0.0303043437  0.0288047287  0.0272062640  0.0256541164 #> 3.5   0.0335498670  0.0318782377  0.0303694302  0.0287708229  0.0272078162 #> 3.55  0.0352672302  0.0335661029  0.0320332643  0.0304060456  0.0288144589 #> 3.6   0.0369101383  0.0351768274  0.0336205213  0.0319468160  0.0303227743 #> 3.65  0.0386832280  0.0369345336  0.0353551431  0.0336753413  0.0320345033 #> 3.7   0.0404508740  0.0386785231  0.0370775173  0.0353765786  0.0337125166 #> 4.1   0.0562643631  0.0542460504  0.0523955251  0.0504486581  0.0485328250 #> 4.15  0.0580361958  0.0559986593  0.0541286704  0.0521586625  0.0502237785 #> 4.45  0.0708640742  0.0686992323  0.0667094981  0.0646768480  0.0626190715 #> 4.65  0.0796525032  0.0774436929  0.0754228222  0.0733952187  0.0712938143 #> 4.75  0.0841128740  0.0818870919  0.0798614600  0.0778382975  0.0757185927 #> 4.8   0.0863344779  0.0841228123  0.0821141992  0.0801230542  0.0780152843 #> 4.9   0.0907743658  0.0885648408  0.0865526709  0.0845624530  0.0824544400 #> 5.3   0.1087555489  0.1066521818  0.1047559524  0.1028246423  0.1007866320 #> 5.5   0.1177027905  0.1156437544  0.1137524265  0.1117917784  0.1097842861 #> 5.6   0.1222275112  0.1202069236  0.1183375943  0.1163799522  0.1143914874 #> 5.7   0.1267484308  0.1247347973  0.1228310684  0.1208460903  0.1188662057 #> 5.9   0.1357468110  0.1337596594  0.1318139603  0.1297841727  0.1278150717 #> 5.95  0.1378979698  0.1359239275  0.1339620608  0.1319215097  0.1299783275 #> 6.15  0.1467716501  0.1448147563  0.1427846479  0.1407621529  0.1388041980 #> 6.25  0.1511719027  0.1492338509  0.1471721675  0.1451780260  0.1432324643 #> 6.65  0.1675552236  0.1657871430  0.1637322478  0.1619470716  0.1600731077 #> 6.75  0.1713689550  0.1696626076  0.1677153135  0.1659556816  0.1640940706 #> 7     0.1784388377  0.1770290145  0.1753548101  0.1738135954  0.1721665363 #> 7.15  0.1817021125  0.1805316390  0.1790672831  0.1777468766  0.1763138342 #> 7.2   0.1831079242  0.1819932727  0.1806469511  0.1793839953  0.1779577632 #> 7.4   0.1856980837  0.1849524225  0.1840622228  0.1831114884  0.1820150712 #> 7.45  0.1862738966  0.1856161898  0.1848067431  0.1839079921  0.1829113396 #> 7.6   0.1872392969  0.1869195505  0.1865929096  0.1859589436  0.1853192572 #> 7.7   0.1872491034  0.1871223368  0.1870445228  0.1866520924  0.1861577942 #> 7.75  0.1880665758  0.1875456454  0.1872184793  0.1870050780  0.1867007615 #> 7.8   0.1875456454  0.1881314865  0.1874072716  0.1873109756  0.1871209521 #> 7.85  0.1872184793  0.1874072716  0.1881001140  0.1876261661  0.1874637546 #> 7.9   0.1870050780  0.1873109756  0.1876261661  0.1881858208  0.1878765289 #> 7.95  0.1867007615  0.1871209521  0.1874637546  0.1878765289  0.1886089435 #> 8.05  0.1856191658  0.1862928639  0.1868370194  0.1874593974  0.1879593305 #> 8.25  0.1835535180  0.1846448384  0.1855487565  0.1866896642  0.1876548289 #> 8.35  0.1817571903  0.1830528718  0.1841069257  0.1855049580  0.1866944435 #> 8.4   0.1811855679  0.1825668372  0.1837082801  0.1852207099  0.1864676314 #> 8.45  0.1806240082  0.1820846657  0.1832734546  0.1848467092  0.1861968104 #> 8.5   0.1797496649  0.1813149628  0.1825949425  0.1843045696  0.1857869429 #> 8.55  0.1786962748  0.1803598212  0.1816801963  0.1834900031  0.1850451803 #> 8.6   0.1776599269  0.1794100614  0.1807897834  0.1826973308  0.1843390445 #> 8.7   0.1756196154  0.1775320068  0.1789836439  0.1810414860  0.1828239874 #> 9     0.1681797740  0.1705935037  0.1725320351  0.1751716506  0.1774830306 #> 9.35  0.1598067759  0.1626992365  0.1650488663  0.1681435368  0.1709323320 #> 9.45  0.1569827850  0.1600221638  0.1625097202  0.1657710692  0.1687284538 #> 9.6   0.1531545528  0.1563544896  0.1589972280  0.1624042121  0.1655242641 #> 9.7   0.1495313022  0.1528617486  0.1556137161  0.1591597495  0.1624193856 #> 9.75  0.1479412247  0.1513321576  0.1541388709  0.1577502155  0.1610748753 #> 9.85  0.1443591433  0.1478485531  0.1507311597  0.1544315050  0.1578478180 #> 9.95  0.1402355755  0.1438381806  0.1468019202  0.1506201741  0.1541475269 #>               8.05         8.25          8.35           8.4          8.45 #> 0    -0.0066541964 -0.005511954 -0.0050225642 -0.0047982528 -0.0045094135 #> 0.1  -0.0070172333 -0.005841929 -0.0053389537 -0.0051092676 -0.0048154288 #> 0.2  -0.0073806425 -0.006193376 -0.0056831992 -0.0054501313 -0.0051571377 #> 0.25 -0.0075411351 -0.006358856 -0.0058490370 -0.0056151601 -0.0053251310 #> 0.3  -0.0076758510 -0.006516611 -0.0060154768 -0.0057783537 -0.0054993733 #> 0.35 -0.0079329593 -0.006758168 -0.0062436462 -0.0060133407 -0.0057247436 #> 0.55 -0.0084641018 -0.007434253 -0.0069673513 -0.0067425334 -0.0064972419 #> 0.65 -0.0087396186 -0.007810681 -0.0073818829 -0.0071662322 -0.0069447498 #> 1.05 -0.0093259562 -0.008986322 -0.0087877044 -0.0086431323 -0.0085488334 #> 1.1  -0.0093315066 -0.009081300 -0.0089196782 -0.0087881429 -0.0087129169 #> 1.15 -0.0093143152 -0.009153828 -0.0090296237 -0.0089117446 -0.0088554283 #> 1.2  -0.0092993219 -0.009225729 -0.0091403072 -0.0090366877 -0.0089973055 #> 1.3  -0.0091850547 -0.009309237 -0.0093118831 -0.0092411969 -0.0092448947 #> 1.4  -0.0089781131 -0.009297666 -0.0093827938 -0.0093474914 -0.0093924530 #> 1.75 -0.0074027242 -0.008511151 -0.0089401135 -0.0090589438 -0.0092719841 #> 1.85 -0.0066511048 -0.007996716 -0.0085160116 -0.0086849541 -0.0089535397 #> 1.95 -0.0058478170 -0.007444894 -0.0080690250 -0.0082960047 -0.0086203618 #> 2    -0.0053671329 -0.007122821 -0.0078116312 -0.0080687724 -0.0084253012 #> 2.2  -0.0031505362 -0.005465950 -0.0063929218 -0.0067754664 -0.0072639361 #> 2.35 -0.0012173709 -0.003953393 -0.0050598380 -0.0055448454 -0.0061223619 #> 2.4  -0.0004890015 -0.003374706 -0.0045381388 -0.0050584092 -0.0056714590 #> 2.5   0.0010634514 -0.002119030 -0.0034123617 -0.0040049807 -0.0046902181 #> 2.55  0.0018397177 -0.001487579 -0.0028527624 -0.0034835158 -0.0041970532 #> 2.6   0.0026778710 -0.000793688 -0.0022323716 -0.0029019990 -0.0036532121 #> 2.8   0.0063954747  0.002327086  0.0005959945 -0.0002318041 -0.0011298108 #> 2.85  0.0074318078  0.003227636  0.0014401594  0.0005722405 -0.0003580805 #> 2.9   0.0085840470  0.004238029  0.0023696406  0.0014614796  0.0004804398 #> 2.95  0.0095641364  0.005068782  0.0031160088  0.0021633898  0.0011453073 #> 3.15  0.0142692633  0.009189729  0.0069312157  0.0058109819  0.0046216339 #> 3.4   0.0211500604  0.015374012  0.0127337223  0.0114045590  0.0099928927 #> 3.45  0.0226844877  0.016680777  0.0139243805  0.0125517741  0.0110767495 #> 3.5   0.0242062017  0.018135299  0.0153604859  0.0139500780  0.0124464753 #> 3.55  0.0257481535  0.019537673  0.0166953408  0.0152438835  0.0136991145 #> 3.6   0.0272016893  0.020853802  0.0179465847  0.0164532110  0.0148703332 #> 3.65  0.0288772513  0.022433436  0.0194949938  0.0179616791  0.0163464611 #> 3.7   0.0305050148  0.023950583  0.0209669600  0.0193940076  0.0177460119 #> 4.1   0.0447561386  0.037093691  0.0336083115  0.0317243648  0.0298172869 #> 4.15  0.0464088449  0.038710725  0.0352273136  0.0333102084  0.0314034161 #> 4.45  0.0584553238  0.050299959  0.0466029794  0.0444903275  0.0424836383 #> 4.65  0.0669925859  0.058679320  0.0548681176  0.0526406328  0.0505728242 #> 4.75  0.0713695608  0.062974106  0.0591053894  0.0568306894  0.0547257645 #> 4.8   0.0736925303  0.065324756  0.0614614819  0.0591641099  0.0570466077 #> 4.9   0.0780904014  0.069653939  0.0657434547  0.0633959737  0.0612452430 #> 5.3   0.0965994577  0.087920092  0.0838607778  0.0813949083  0.0790591704 #> 5.5   0.1056190656  0.096704967  0.0925024304  0.0900001799  0.0875916048 #> 5.6   0.1102613592  0.101269405  0.0970115217  0.0945017104  0.0920683932 #> 5.7   0.1146984557  0.105568302  0.1011845726  0.0986811015  0.0962270643 #> 5.9   0.1235908618  0.114268460  0.1096835147  0.1072075929  0.1047391506 #> 5.95  0.1257237176  0.116441989  0.1118411599  0.1093731595  0.1069352141 #> 6.15  0.1344273954  0.125193679  0.1204256491  0.1180344492  0.1156585236 #> 6.25  0.1388189175  0.129664548  0.1247999059  0.1224646582  0.1201332401 #> 6.65  0.1556635358  0.147416790  0.1426717475  0.1406575734  0.1386592195 #> 6.75  0.1597017612  0.151784733  0.1471756213  0.1452592301  0.1433911457 #> 7     0.1682015141  0.161313876  0.1571996867  0.1555602820  0.1539885004 #> 7.15  0.1728046393  0.166690222  0.1629194113  0.1614616626  0.1600541273 #> 7.2   0.1744887634  0.168659234  0.1650536514  0.1636731527  0.1623738736 #> 7.4   0.1791984529  0.174493461  0.1714494553  0.1703431074  0.1693068188 #> 7.45  0.1803207794  0.175937834  0.1730734311  0.1720203427  0.1710603409 #> 7.6   0.1835238781  0.180319247  0.1779838384  0.1771738189  0.1764076811 #> 7.7   0.1847702478  0.182191698  0.1801283737  0.1793974976  0.1787966756 #> 7.75  0.1856191658  0.183553518  0.1817571903  0.1811855679  0.1806240082 #> 7.8   0.1862928639  0.184644838  0.1830528718  0.1825668372  0.1820846657 #> 7.85  0.1868370194  0.185548757  0.1841069257  0.1837082801  0.1832734546 #> 7.9   0.1874593974  0.186689664  0.1855049580  0.1852207099  0.1848467092 #> 7.95  0.1879593305  0.187654829  0.1866944435  0.1864676314  0.1861968104 #> 8.05  0.1895593636  0.189477488  0.1890467302  0.1890024895  0.1889919274 #> 8.25  0.1894774878  0.193165836  0.1928293457  0.1932008295  0.1934882721 #> 8.35  0.1890467302  0.192829346  0.1947433662  0.1946438212  0.1953318730 #> 8.4   0.1890024895  0.193200830  0.1946438212  0.1962754656  0.1959292421 #> 8.45  0.1889919274  0.193488272  0.1953318730  0.1959292421  0.1972849186 #> 8.5   0.1887206079  0.193799371  0.1959183642  0.1966151417  0.1976494742 #> 8.55  0.1882345469  0.194008411  0.1962839403  0.1972242769  0.1982909931 #> 8.6   0.1877262020  0.193893385  0.1965177516  0.1975463131  0.1987473636 #> 8.7   0.1865132114  0.193363605  0.1966185779  0.1978074690  0.1992983604 #> 9     0.1823462484  0.191910048  0.1967506807  0.1984604373  0.2007953146 #> 9.35  0.1767988627  0.188622228  0.1944655675  0.1967197680  0.1999238578 #> 9.45  0.1749204313  0.187510435  0.1935963131  0.1960186361  0.1994751657 #> 9.6   0.1722406114  0.185420628  0.1916651474  0.1943580228  0.1979300924 #> 9.7   0.1694875446  0.183366908  0.1899151474  0.1927856496  0.1965641775 #> 9.75  0.1682986771  0.182466595  0.1891288549  0.1921014572  0.1959533668 #> 9.85  0.1653754657  0.180013394  0.1869273111  0.1900904695  0.1940527755 #> 9.95  0.1619359040  0.177247141  0.1845364718  0.1878990021  0.1920764970 #>                8.5          8.55          8.6           8.7             9 #> 0    -0.0042875099 -0.0040675182 -0.003809993 -0.0033109974 -0.0018805280 #> 0.1  -0.0045889874 -0.0043590063 -0.004095010 -0.0035794365 -0.0021050954 #> 0.2  -0.0049255872 -0.0046864547 -0.004419470 -0.0038917339 -0.0023869690 #> 0.25 -0.0050916149 -0.0048490331 -0.004582232 -0.0040510976 -0.0025380829 #> 0.3  -0.0052594520 -0.0050167734 -0.004753552 -0.0042232829 -0.0027126364 #> 0.35 -0.0054912958 -0.0052366977 -0.004969188 -0.0044288650 -0.0028967546 #> 0.55 -0.0062555153 -0.0059996796 -0.005752429 -0.0052262241 -0.0037352870 #> 0.65 -0.0067053171 -0.0064549094 -0.006221815 -0.0057111188 -0.0042551668 #> 1.05 -0.0083535948 -0.0081492376 -0.008003727 -0.0076082390 -0.0064430988 #> 1.1  -0.0085276228 -0.0083333472 -0.008201787 -0.0078271153 -0.0067157659 #> 1.15 -0.0086811402 -0.0084977020 -0.008380458 -0.0080279101 -0.0069725029 #> 1.2  -0.0088354553 -0.0086665919 -0.008563223 -0.0082346021 -0.0072322538 #> 1.3  -0.0091116907 -0.0089728078 -0.008902459 -0.0086282801 -0.0077640879 #> 1.4  -0.0092887391 -0.0091827685 -0.009144254 -0.0089275736 -0.0082034570 #> 1.75 -0.0093080797 -0.0093390787 -0.009437850 -0.0094693361 -0.0093967444 #> 1.85 -0.0090275861 -0.0090972134 -0.009234927 -0.0093390003 -0.0094862917 #> 1.95 -0.0087446603 -0.0088617712 -0.009043738 -0.0092343708 -0.0096219371 #> 2    -0.0085786820 -0.0087252942 -0.008936368 -0.0091841370 -0.0097131062 #> 2.2  -0.0075302419 -0.0077821582 -0.008100038 -0.0085521571 -0.0096670450 #> 2.35 -0.0064839269 -0.0068271946 -0.007223953 -0.0078397277 -0.0094021351 #> 2.4  -0.0060613184 -0.0064341635 -0.006858159 -0.0075301609 -0.0092565209 #> 2.5  -0.0051532000 -0.0055911203 -0.006078838 -0.0068836537 -0.0089614005 #> 2.55 -0.0046962853 -0.0051701638 -0.005686813 -0.0065491443 -0.0087943120 #> 2.6  -0.0041919827 -0.0047052759 -0.005255121 -0.0061867829 -0.0086231134 #> 2.8  -0.0018319345 -0.0024957445 -0.003183743 -0.0044010995 -0.0076234187 #> 2.85 -0.0010954503 -0.0017981552 -0.002513526 -0.0037963899 -0.0072012326 #> 2.9  -0.0003007428 -0.0010346072 -0.001792129 -0.0031500051 -0.0068047365 #> 2.95  0.0003184117 -0.0004694797 -0.001266440 -0.0027130221 -0.0065839153 #> 3.15  0.0036133500  0.0026687452  0.001713767 -0.0000599953 -0.0048545561 #> 3.4   0.0087713031  0.0076052449  0.006453398  0.0042688355 -0.0017651236 #> 3.45  0.0098057392  0.0085796362  0.007374724  0.0050849014 -0.0012521974 #> 3.5   0.0111391761  0.0099027132  0.008670212  0.0063161899 -0.0002204619 #> 3.55  0.0123498396  0.0110768020  0.009805806  0.0073709775  0.0005901007 #> 3.6   0.0134862121  0.0121679057  0.010859741  0.0083415238  0.0013261494 #> 3.65  0.0149292235  0.0135947349  0.012257051  0.0096772903  0.0024369413 #> 3.7   0.0162920940  0.0149311210  0.013560546  0.0109085569  0.0034457672 #> 4.1   0.0280447463  0.0264165419  0.024757311  0.0214939396  0.0121992102 #> 4.15  0.0296061593  0.0279710053  0.026294069  0.0229798051  0.0135513734 #> 4.45  0.0404523946  0.0386823731  0.036824755  0.0330778281  0.0225324585 #> 4.65  0.0484047498  0.0465389265  0.044569665  0.0405467602  0.0292751880 #> 4.75  0.0525016371  0.0505833806  0.048565401  0.0444165919  0.0328027055 #> 4.8   0.0547975440  0.0528594522  0.050817170  0.0465973762  0.0348110547 #> 4.9   0.0589453235  0.0569631423  0.054877654  0.0505555817  0.0384124490 #> 5.3   0.0766772813  0.0745307453  0.072299917  0.0676495820  0.0541386647 #> 5.5   0.0851789134  0.0829390757  0.080644263  0.0758884468  0.0617620398 #> 5.6   0.0896536806  0.0873685878  0.085050114  0.0802604411  0.0658715351 #> 5.7   0.0937936906  0.0914370080  0.089081150  0.0842403371  0.0696186867 #> 5.9   0.1022860483  0.0998174598  0.097404459  0.0924931142  0.0774869597 #> 5.95  0.1044638269  0.1019817659  0.099564470  0.0946486781  0.0795957541 #> 6.15  0.1131511007  0.1105606012  0.108097061  0.1031003191  0.0878922623 #> 6.25  0.1176162383  0.1149546515  0.112471108  0.1074438789  0.0922391851 #> 6.65  0.1362318066  0.1336336153  0.131243911  0.1264085262  0.1118878780 #> 6.75  0.1410219316  0.1385142734  0.136196709  0.1315013740  0.1173957687 #> 7     0.1518770309  0.1496824261  0.147616377  0.1434840039  0.1305140836 #> 7.15  0.1581363656  0.1561000790  0.154187544  0.1503724416  0.1381960996 #> 7.2   0.1605246880  0.1586132861  0.156788476  0.1531622025  0.1414367499 #> 7.4   0.1677418622  0.1661622015  0.164607495  0.1615787049  0.1512486607 #> 7.45  0.1696073051  0.1680841597  0.166603549  0.1637132941  0.1537623357 #> 7.6   0.1752506991  0.1739360664  0.172671073  0.1701762510  0.1615248077 #> 7.7   0.1778052704  0.1765946562  0.175446498  0.1731847088  0.1652187065 #> 7.75  0.1797496649  0.1786962748  0.177659927  0.1756196154  0.1681797740 #> 7.8   0.1813149628  0.1803598212  0.179410061  0.1775320068  0.1705935037 #> 7.85  0.1825949425  0.1816801963  0.180789783  0.1789836439  0.1725320351 #> 7.9   0.1843045696  0.1834900031  0.182697331  0.1810414860  0.1751716506 #> 7.95  0.1857869429  0.1850451803  0.184339044  0.1828239874  0.1774830306 #> 8.05  0.1887206079  0.1882345469  0.187726202  0.1865132114  0.1823462484 #> 8.25  0.1937993707  0.1940084111  0.193893385  0.1933636051  0.1919100480 #> 8.35  0.1959183642  0.1962839403  0.196517752  0.1966185779  0.1967506807 #> 8.4   0.1966151417  0.1972242769  0.197546313  0.1978074690  0.1984604373 #> 8.45  0.1976494742  0.1982909931  0.198747364  0.1992983604  0.2007953146 #> 8.5   0.1990696297  0.1993713534  0.199950031  0.2007266657  0.2029498006 #> 8.55  0.1993713534  0.2012073887  0.201471617  0.2025530935  0.2056465336 #> 8.6   0.1999500313  0.2014716171  0.202885896  0.2037550514  0.2076091056 #> 8.7   0.2007266657  0.2025530935  0.203755051  0.2061376682  0.2112259133 #> 9     0.2029498006  0.2056465336  0.207609106  0.2112259133  0.2222652203 #> 9.35  0.2027784790  0.2057002875  0.208220103  0.2130669828  0.2279371365 #> 9.45  0.2024898397  0.2053791784  0.208013834  0.2131092488  0.2290478793 #> 9.6   0.2013367535  0.2041508068  0.206913768  0.2123384856  0.2295600064 #> 9.7   0.2001932980  0.2031075624  0.206036269  0.2118264114  0.2303917528 #> 9.75  0.1996971788  0.2026623733  0.205664814  0.2116203524  0.2307589940 #> 9.85  0.1980662194  0.2011930166  0.204364841  0.2106972447  0.2310137935 #> 9.95  0.1963088410  0.1997099718  0.203104918  0.2099003132  0.2316118139 #>               9.35          9.45           9.6           9.7          9.75 #> 0    -0.0002636759  1.971615e-04  0.0008036537  0.0011937731  0.0013739836 #> 0.1  -0.0004585227  1.185296e-05  0.0006123101  0.0010112992  0.0011947446 #> 0.2  -0.0007145676 -2.352102e-04  0.0003615394  0.0007700875  0.0009579399 #> 0.25 -0.0008542536 -3.707340e-04  0.0002264869  0.0006399870  0.0008305843 #> 0.3  -0.0009962902 -5.014660e-04  0.0001180373  0.0005423345  0.0007401718 #> 0.35 -0.0012169167 -7.332846e-04 -0.0001585930  0.0002600412  0.0004524078 #> 0.55 -0.0020032304 -1.498328e-03 -0.0008799656 -0.0004321416 -0.0002182810 #> 0.65 -0.0025035912 -1.987907e-03 -0.0013417520 -0.0008769029 -0.0006506961 #> 1.05 -0.0047462475 -4.225209e-03 -0.0034952202 -0.0029834862 -0.0027148439 #> 1.1  -0.0050425245 -4.524603e-03 -0.0037887045 -0.0032735721 -0.0030009595 #> 1.15 -0.0053251005 -4.810650e-03 -0.0040699573 -0.0035518964 -0.0032757168 #> 1.2  -0.0056024331 -5.087615e-03 -0.0043359613 -0.0038124145 -0.0035316628 #> 1.3  -0.0062085912 -5.704265e-03 -0.0049481572 -0.0044213435 -0.0041354935 #> 1.4  -0.0067303914 -6.237833e-03 -0.0054836641 -0.0049555912 -0.0046660882 #> 1.75 -0.0084068526 -8.012500e-03 -0.0073491329 -0.0068626897 -0.0065849073 #> 1.85 -0.0087006073 -8.354593e-03 -0.0077558727 -0.0072974133 -0.0070312969 #> 1.95 -0.0090661733 -8.771821e-03 -0.0082457666 -0.0078174278 -0.0075659739 #> 2    -0.0092686253 -9.000398e-03 -0.0085008886 -0.0080909182 -0.0078464691 #> 2.2  -0.0097946914 -9.664874e-03 -0.0093589186 -0.0090440889 -0.0088456688 #> 2.35 -0.0099833776 -9.963952e-03 -0.0098110706 -0.0095753871 -0.0094164454 #> 2.4  -0.0100115072 -1.003489e-02 -0.0099454791 -0.0097415915 -0.0095978718 #> 2.5  -0.0100757403 -1.018512e-02 -0.0102254979 -0.0100877312 -0.0099804156 #> 2.55 -0.0100961982 -1.025558e-02 -0.0103626310 -0.0102631802 -0.0101745562 #> 2.6  -0.0101259238 -1.033155e-02 -0.0105116101 -0.0104493903 -0.0103815262 #> 2.8  -0.0099885466 -1.040852e-02 -0.0109139414 -0.0110268051 -0.0110541735 #> 2.85 -0.0097746009 -1.024518e-02 -0.0108314282 -0.0109857614 -0.0110360069 #> 2.9  -0.0096763771 -1.022482e-02 -0.0109415100 -0.0111604208 -0.0112474525 #> 2.95 -0.0096934015 -1.029631e-02 -0.0110996048 -0.0113682874 -0.0114830392 #> 3.15 -0.0090433466 -9.915941e-03 -0.0111607414 -0.0116617932 -0.0119101571 #> 3.4  -0.0073960754 -8.639063e-03 -0.0104877092 -0.0113266699 -0.0117619406 #> 3.45 -0.0071544609 -8.468965e-03 -0.0104104329 -0.0113200611 -0.0117888208 #> 3.5  -0.0064586426 -7.863748e-03 -0.0099746281 -0.0109598913 -0.0114764215 #> 3.55 -0.0059578675 -7.447765e-03 -0.0096928213 -0.0107548522 -0.0113129540 #> 3.6  -0.0055252762 -7.096725e-03 -0.0094703308 -0.0106097435 -0.0112075761 #> 3.65 -0.0047712598 -6.447083e-03 -0.0089966687 -0.0102256873 -0.0108726489 #> 3.7  -0.0040906024 -5.859214e-03 -0.0085612284 -0.0098729390 -0.0105654039 #> 4.1   0.0021616750 -3.542114e-04 -0.0041436117 -0.0061473308 -0.0071918124 #> 4.15  0.0031836612  5.660784e-04 -0.0033896936 -0.0054844923 -0.0065781288 #> 4.45  0.0103303782  7.167351e-03  0.0023495752 -0.0002677444 -0.0016534542 #> 4.65  0.0158559731  1.234451e-02  0.0069329186  0.0039639251  0.0023734181 #> 4.75  0.0188555212  1.519749e-02  0.0095338532  0.0064095390  0.0047276090 #> 4.8   0.0205501641  1.680606e-02  0.0109887750  0.0077750916  0.0060398739 #> 4.9   0.0235608390  1.963796e-02  0.0134889921  0.0100839592  0.0082425273 #> 5.3   0.0372903811  3.274638e-02  0.0255949354  0.0215033647  0.0193137768 #> 5.5   0.0441550597  3.929079e-02  0.0317536115  0.0273081018  0.0249614738 #> 5.6   0.0479635908  4.297808e-02  0.0353017138  0.0306971040  0.0282979447 #> 5.7   0.0515986155  4.653107e-02  0.0388230373  0.0340863238  0.0316468386 #> 5.9   0.0593783830  5.419648e-02  0.0464927379  0.0415329465  0.0390302293 #> 5.95  0.0614635174  5.625347e-02  0.0485479649  0.0435345922  0.0410167814 #> 6.15  0.0701187590  6.496312e-02  0.0575199494  0.0524061649  0.0498760878 #> 6.25  0.0748266408  6.975567e-02  0.0625353394  0.0574092466  0.0548959457 #> 6.65  0.0962016940  9.157842e-02  0.0852939832  0.0802910784  0.0779009788 #> 6.75  0.1021684508  9.763779e-02  0.0915648132  0.0866061060  0.0842585780 #> 7     0.1165556847  1.122737e-01  0.1066524145  0.1018496186  0.0996252686 #> 7.15  0.1251124060  1.210399e-01  0.1157049558  0.1110361331  0.1088990737 #> 7.2   0.1287472128  1.247505e-01  0.1195614224  0.1149697904  0.1128804719 #> 7.4   0.1399805904  1.362875e-01  0.1315256436  0.1272021727  0.1252626790 #> 7.45  0.1427281588  1.390809e-01  0.1343568577  0.1300621694  0.1281535290 #> 7.6   0.1518291363  1.485984e-01  0.1443179056  0.1403552687  0.1386046095 #> 7.7   0.1563113360  1.533164e-01  0.1493134147  0.1455315014  0.1438751450 #> 7.75  0.1598067759  1.569828e-01  0.1531545528  0.1495313022  0.1479412247 #> 7.8   0.1626992365  1.600222e-01  0.1563544896  0.1528617486  0.1513321576 #> 7.85  0.1650488663  1.625097e-01  0.1589972280  0.1556137161  0.1541388709 #> 7.9   0.1681435368  1.657711e-01  0.1624042121  0.1591597495  0.1577502155 #> 7.95  0.1709323320  1.687285e-01  0.1655242641  0.1624193856  0.1610748753 #> 8.05  0.1767988627  1.749204e-01  0.1722406114  0.1694875446  0.1682986771 #> 8.25  0.1886222284  1.875104e-01  0.1854206283  0.1833669082  0.1824665947 #> 8.35  0.1944655675  1.935963e-01  0.1916651474  0.1899151474  0.1891288549 #> 8.4   0.1967197680  1.960186e-01  0.1943580228  0.1927856496  0.1921014572 #> 8.45  0.1999238578  1.994752e-01  0.1979300924  0.1965641775  0.1959533668 #> 8.5   0.2027784790  2.024898e-01  0.2013367535  0.2001932980  0.1996971788 #> 8.55  0.2057002875  2.053792e-01  0.2041508068  0.2031075624  0.2026623733 #> 8.6   0.2082201035  2.080138e-01  0.2069137677  0.2060362686  0.2056648141 #> 8.7   0.2130669828  2.131092e-01  0.2123384856  0.2118264114  0.2116203524 #> 9     0.2279371365  2.290479e-01  0.2295600064  0.2303917528  0.2307589940 #> 9.35  0.2437235800  2.463413e-01  0.2503238798  0.2536467831  0.2551314023 #> 9.45  0.2463412790  2.518258e-01  0.2563642913  0.2605251739  0.2624519369 #> 9.6   0.2503238798  2.563643e-01  0.2646847186  0.2692730395  0.2719078728 #> 9.7   0.2536467831  2.605252e-01  0.2692730395  0.2763837442  0.2783864249 #> 9.75  0.2551314023  2.624519e-01  0.2719078728  0.2783864249  0.2826246396 #> 9.85  0.2572131348  2.652958e-01  0.2758447922  0.2828922841  0.2865639150 #> 9.95  0.2592955316  2.678022e-01  0.2795304759  0.2868025722  0.2908443007 #>               9.85          9.95 #> 0     0.0016880497  0.0020020279 #> 0.1   0.0015128619  0.0018471003 #> 0.2   0.0012832169  0.0016390688 #> 0.25  0.0011609360  0.0015274375 #> 0.3   0.0010845917  0.0014598003 #> 0.35  0.0007865145  0.0011799758 #> 0.55  0.0001613186  0.0005989079 #> 0.65 -0.0002444025  0.0002173023 #> 1.05 -0.0022057636 -0.0016556048 #> 1.1  -0.0024811478 -0.0019219195 #> 1.15 -0.0027462140 -0.0021785684 #> 1.2  -0.0029916043 -0.0024160270 #> 1.3  -0.0035800002 -0.0029922270 #> 1.4  -0.0040991467 -0.0035004338 #> 1.75 -0.0060200690 -0.0054159021 #> 1.85 -0.0064810283 -0.0058822444 #> 1.95 -0.0070370415 -0.0064476466 #> 2    -0.0073283459 -0.0067505871 #> 2.2  -0.0084014851 -0.0078765788 #> 2.35 -0.0090386595 -0.0085651335 #> 2.4  -0.0092463431 -0.0087922970 #> 2.5  -0.0096937832 -0.0092936902 #> 2.55 -0.0099195668 -0.0095460543 #> 2.6  -0.0101657115 -0.0098253108 #> 2.8  -0.0110133193 -0.0108237870 #> 2.85 -0.0110378005 -0.0108840706 #> 2.9  -0.0113162725 -0.0112160887 #> 2.95 -0.0116078373 -0.0115595603 #> 3.15 -0.0122873911 -0.0124602994 #> 3.4  -0.0124991091 -0.0130006678 #> 3.45 -0.0125904727 -0.0131662730 #> 3.5  -0.0123668332 -0.0130091941 #> 3.55 -0.0122817333 -0.0129961355 #> 3.6  -0.0122542812 -0.0130418890 #> 3.65 -0.0120088627 -0.0128663322 #> 3.7  -0.0117867992 -0.0127179676 #> 4.1  -0.0090683910 -0.0106396080 #> 4.15 -0.0085472493 -0.0101947691 #> 4.45 -0.0041847953 -0.0063709600 #> 4.65 -0.0005663273 -0.0031445604 #> 4.75  0.0016022285 -0.0011662260 #> 4.8   0.0028049240 -0.0000692901 #> 4.9   0.0047922427  0.0017292093 #> 5.3   0.0151555469  0.0113436078 #> 5.5   0.0205203528  0.0163622789 #> 5.6   0.0237340129  0.0194231944 #> 5.7   0.0269920418  0.0225258166 #> 5.9   0.0342220112  0.0294670553 #> 5.95  0.0361665417  0.0313484374 #> 6.15  0.0449367509  0.0398615719 #> 6.25  0.0499412512  0.0447539858 #> 6.65  0.0730206433  0.0676095985 #> 6.75  0.0794409202  0.0740481557 #> 7     0.0950153818  0.0897808533 #> 7.15  0.1044144094  0.0992948382 #> 7.2   0.1084951299  0.1034725219 #> 7.4   0.1211613464  0.1164414161 #> 7.45  0.1240939655  0.1194406034 #> 7.6   0.1347712100  0.1303691792 #> 7.7   0.1401785781  0.1359175163 #> 7.75  0.1443591433  0.1402355755 #> 7.8   0.1478485531  0.1438381806 #> 7.85  0.1507311597  0.1468019202 #> 7.9   0.1544315050  0.1506201741 #> 7.95  0.1578478180  0.1541475269 #> 8.05  0.1653754657  0.1619359040 #> 8.25  0.1800133939  0.1772471410 #> 8.35  0.1869273111  0.1845364718 #> 8.4   0.1900904695  0.1878990021 #> 8.45  0.1940527755  0.1920764970 #> 8.5   0.1980662194  0.1963088410 #> 8.55  0.2011930166  0.1997099718 #> 8.6   0.2043648409  0.2031049180 #> 8.7   0.2106972447  0.2099003132 #> 9     0.2310137935  0.2316118139 #> 9.35  0.2572131348  0.2592955316 #> 9.45  0.2652958412  0.2678022243 #> 9.6   0.2758447922  0.2795304759 #> 9.7   0.2828922841  0.2868025722 #> 9.75  0.2865639150  0.2908443007 #> 9.85  0.2932948196  0.2974139804 #> 9.95  0.2974139804  0.3041763399 #>"},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/elbo_GP_mod_common_hp_k.html","id":null,"dir":"Reference","previous_headings":"","what":"Penalised elbo for multiple mean GPs with common HPs — elbo_GP_mod_common_hp_k","title":"Penalised elbo for multiple mean GPs with common HPs — elbo_GP_mod_common_hp_k","text":"Penalised elbo multiple mean GPs common HPs","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/elbo_GP_mod_common_hp_k.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Penalised elbo for multiple mean GPs with common HPs — elbo_GP_mod_common_hp_k","text":"","code":"elbo_GP_mod_common_hp_k(hp, db, mean, kern, post_cov, pen_diag = NULL)"},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/elbo_GP_mod_common_hp_k.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Penalised elbo for multiple mean GPs with common HPs — elbo_GP_mod_common_hp_k","text":"hp tibble, data frame named vector containing hyper-parameters. db tibble containing values want compute elbo . Required columns: Input, Output. Additional covariate columns allowed. mean list K mean GPs union observed timestamps. kern kernel function used compute covariance matrix corresponding timestamps. post_cov List K posterior covariance mean GP (mu_k). Used compute correction term (cor_term). pen_diag jitter term added covariance matrix avoid numerical issues inverting, cases nearly singular matrices.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/elbo_GP_mod_common_hp_k.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Penalised elbo for multiple mean GPs with common HPs — elbo_GP_mod_common_hp_k","text":"value penalised Gaussian elbo sum k mean GPs common HPs.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/elbo_GP_mod_common_hp_k.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Penalised elbo for multiple mean GPs with common HPs — elbo_GP_mod_common_hp_k","text":"","code":"TRUE #> [1] TRUE"},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/elbo_clust_multi_GP.html","id":null,"dir":"Reference","previous_headings":"","what":"Evidence Lower Bound for a mixture of GPs — elbo_clust_multi_GP","title":"Evidence Lower Bound for a mixture of GPs — elbo_clust_multi_GP","text":"Evidence Lower Bound mixture GPs","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/elbo_clust_multi_GP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evidence Lower Bound for a mixture of GPs — elbo_clust_multi_GP","text":"","code":"elbo_clust_multi_GP(hp, db, hyperpost, kern, pen_diag)"},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/elbo_clust_multi_GP.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evidence Lower Bound for a mixture of GPs — elbo_clust_multi_GP","text":"hp tibble, data frame named vector containing hyper-parameters. db tibble containing values want compute elbo . Required columns: Input, Output. Additional covariate columns allowed. hyperpost List parameters K mean GPs. kern kernel function used compute covariance matrix corresponding timestamps. pen_diag jitter term added covariance matrix avoid numerical issues inverting, cases nearly singular matrices.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/elbo_clust_multi_GP.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evidence Lower Bound for a mixture of GPs — elbo_clust_multi_GP","text":"value penalised Gaussian elbo mixture GPs","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/elbo_clust_multi_GP.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Evidence Lower Bound for a mixture of GPs — elbo_clust_multi_GP","text":"","code":"TRUE #> [1] TRUE"},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/elbo_clust_multi_GP_common_hp_i.html","id":null,"dir":"Reference","previous_headings":"","what":"Penalised elbo for multiple individual GPs with common HPs — elbo_clust_multi_GP_common_hp_i","title":"Penalised elbo for multiple individual GPs with common HPs — elbo_clust_multi_GP_common_hp_i","text":"Penalised elbo multiple individual GPs common HPs","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/elbo_clust_multi_GP_common_hp_i.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Penalised elbo for multiple individual GPs with common HPs — elbo_clust_multi_GP_common_hp_i","text":"","code":"elbo_clust_multi_GP_common_hp_i(hp, db, hyperpost, kern, pen_diag)"},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/elbo_clust_multi_GP_common_hp_i.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Penalised elbo for multiple individual GPs with common HPs — elbo_clust_multi_GP_common_hp_i","text":"hp tibble, data frame named vector containing hyper-parameters. db tibble containing values want compute elbo . Required columns: Input, Output. Additional covariate columns allowed. hyperpost List parameters K mean Gaussian processes. kern kernel function used compute covariance matrix corresponding timestamps. pen_diag jitter term added covariance matrix avoid numerical issues inverting, cases nearly singular matrices.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/elbo_clust_multi_GP_common_hp_i.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Penalised elbo for multiple individual GPs with common HPs — elbo_clust_multi_GP_common_hp_i","text":"value penalised Gaussian elbo sum M individual GPs common HPs.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/elbo_clust_multi_GP_common_hp_i.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Penalised elbo for multiple individual GPs with common HPs — elbo_clust_multi_GP_common_hp_i","text":"","code":"TRUE #> [1] TRUE"},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/elbo_monitoring_VEM.html","id":null,"dir":"Reference","previous_headings":"","what":"Evidence Lower Bound maximised in MagmaClust — elbo_monitoring_VEM","title":"Evidence Lower Bound maximised in MagmaClust — elbo_monitoring_VEM","text":"Evidence Lower Bound maximised MagmaClust","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/elbo_monitoring_VEM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evidence Lower Bound maximised in MagmaClust — elbo_monitoring_VEM","text":"","code":"elbo_monitoring_VEM(hp_k, hp_i, db, kern_i, kern_k, hyperpost, m_k, pen_diag)"},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/elbo_monitoring_VEM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evidence Lower Bound maximised in MagmaClust — elbo_monitoring_VEM","text":"hp_k tibble, data frame named vector hyper-parameters clusters. hp_i tibble, data frame named vector hyper-parameters individuals. db tibble containing values want compute elbo . Required columns: Input, Output. Additional covariate columns allowed. kern_i Kernel used compute covariance matrix individuals GPs corresponding inputs. kern_k Kernel used compute covariance matrix mean GPs corresponding inputs. hyperpost list parameters variational distributions K mean GPs. m_k Prior value mean parameter mean GPs (mu_k). Length = 1 nrow(db). pen_diag jitter term added covariance matrix avoid numerical issues inverting, cases nearly singular matrices.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/elbo_monitoring_VEM.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evidence Lower Bound maximised in MagmaClust — elbo_monitoring_VEM","text":"Value elbo maximised VEM algorithm used training MagmaClust.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/elbo_monitoring_VEM.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Evidence Lower Bound maximised in MagmaClust — elbo_monitoring_VEM","text":"","code":"TRUE #> [1] TRUE"},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/gr_GP.html","id":null,"dir":"Reference","previous_headings":"","what":"Gradient of the logLikelihood of a Gaussian Process — gr_GP","title":"Gradient of the logLikelihood of a Gaussian Process — gr_GP","text":"Gradient logLikelihood Gaussian Process","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/gr_GP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gradient of the logLikelihood of a Gaussian Process — gr_GP","text":"","code":"gr_GP(hp, db, mean, kern, post_cov, pen_diag)"},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/gr_GP.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gradient of the logLikelihood of a Gaussian Process — gr_GP","text":"hp tibble, data frame named vector containing hyper-parameters. db tibble containing values want compute logL . Required columns: Input, Output. Additional covariate columns allowed. mean vector, specifying mean GP reference inputs. kern kernel function. post_cov (optional) matrix, corresponding covariance parameter hyper-posterior. Used compute hyper-prior distribution new individual Magma. pen_diag jitter term added covariance matrix avoid numerical issues inverting, cases nearly singular matrices.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/gr_GP.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gradient of the logLikelihood of a Gaussian Process — gr_GP","text":"named vector, corresponding value hyper-parameters gradients Gaussian log-Likelihood (covariance can sum individual hyper-posterior's mean process covariances).","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/gr_GP.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gradient of the logLikelihood of a Gaussian Process — gr_GP","text":"","code":"db <- tibble::tibble(Input = 1:5, Output = 2:6) mean <- rep(0, 5) hp <- tibble::tibble(se_variance = 1, se_lengthscale = 0.5) post_cov <- kern_to_cov(1:5, \"SE\", hp) MagmaClustR:::gr_GP(hp, db, mean, \"SE\", post_cov, 0.001) #>    se_variance se_lengthscale  #>     -0.8468554     -1.5165957"},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/gr_GP_mod.html","id":null,"dir":"Reference","previous_headings":"","what":"Gradient of the modified logLikelihood for GPs in Magma — gr_GP_mod","title":"Gradient of the modified logLikelihood for GPs in Magma — gr_GP_mod","text":"Gradient modified logLikelihood GPs Magma","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/gr_GP_mod.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gradient of the modified logLikelihood for GPs in Magma — gr_GP_mod","text":"","code":"gr_GP_mod(hp, db, mean, kern, post_cov, pen_diag)"},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/gr_GP_mod.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gradient of the modified logLikelihood for GPs in Magma — gr_GP_mod","text":"hp tibble, data frame named vector containing hyper-parameters. db tibble containing values want compute logL . Required columns: Input, Output. Additional covariate columns allowed. mean vector, specifying mean GPs reference inputs. kern kernel function. post_cov matrix, covariance parameter hyper-posterior. Used compute correction term. pen_diag jitter term added covariance matrix avoid numerical issues inverting, cases nearly singular matrices.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/gr_GP_mod.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gradient of the modified logLikelihood for GPs in Magma — gr_GP_mod","text":"named vector, corresponding value hyper-parameters gradients modified Gaussian log-Likelihood involved Magma.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/gr_GP_mod.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gradient of the modified logLikelihood for GPs in Magma — gr_GP_mod","text":"","code":"db <- tibble::tibble(Input = 1:5, Output = 2:6) mean <- rep(0, 5) hp <- tibble::tibble(se_variance = 1, se_lengthscale = 0.5) post_cov <- kern_to_cov(1:5, \"SE\", hp) MagmaClustR:::gr_GP_mod(hp, db, mean, \"SE\", post_cov, 0.001) #>    se_variance se_lengthscale  #>      -8.358967      -0.746123"},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/gr_GP_mod_common_hp.html","id":null,"dir":"Reference","previous_headings":"","what":"Gradient of the modified logLikelihood with common HPs for GPs in Magma — gr_GP_mod_common_hp","title":"Gradient of the modified logLikelihood with common HPs for GPs in Magma — gr_GP_mod_common_hp","text":"Gradient modified logLikelihood common HPs GPs Magma","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/gr_GP_mod_common_hp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gradient of the modified logLikelihood with common HPs for GPs in Magma — gr_GP_mod_common_hp","text":"","code":"gr_GP_mod_common_hp(hp, db, mean, kern, post_cov, pen_diag)"},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/gr_GP_mod_common_hp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gradient of the modified logLikelihood with common HPs for GPs in Magma — gr_GP_mod_common_hp","text":"hp tibble data frame containing hyper-parameters individuals. db tibble containing values want compute logL . Required columns: ID, Input, Output. Additional covariate columns allowed. mean vector, specifying mean GPs reference inputs. kern kernel function. post_cov matrix, covariance parameter hyper-posterior. Used compute correction term. pen_diag jitter term added covariance matrix avoid numerical issues inverting, cases nearly singular matrices.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/gr_GP_mod_common_hp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gradient of the modified logLikelihood with common HPs for GPs in Magma — gr_GP_mod_common_hp","text":"named vector, corresponding value hyper-parameters' gradients modified Gaussian log-Likelihood involved Magma 'common HP' setting.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/gr_GP_mod_common_hp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gradient of the modified logLikelihood with common HPs for GPs in Magma — gr_GP_mod_common_hp","text":"","code":"db <- simu_db(N = 10, common_input = TRUE) mean <- tibble::tibble(Input = unique(db$Input), Output = 0) hp <- tibble::tibble(se_variance = 1, se_lengthscale = 0.5) post_cov <- kern_to_cov(unique(db$Input), \"SE\", hp) MagmaClustR:::gr_GP_mod_common_hp(hp, db, mean, \"SE\", post_cov, 0.001) #>    se_variance se_lengthscale  #>      -4667.382      19337.504"},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/gr_GP_mod_common_hp_k.html","id":null,"dir":"Reference","previous_headings":"","what":"Gradient of the penalised elbo for multiple mean GPs with common HPs — gr_GP_mod_common_hp_k","title":"Gradient of the penalised elbo for multiple mean GPs with common HPs — gr_GP_mod_common_hp_k","text":"Gradient penalised elbo multiple mean GPs common HPs","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/gr_GP_mod_common_hp_k.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gradient of the penalised elbo for multiple mean GPs with common HPs — gr_GP_mod_common_hp_k","text":"","code":"gr_GP_mod_common_hp_k(hp, db, mean, kern, post_cov, pen_diag = NULL)"},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/gr_GP_mod_common_hp_k.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gradient of the penalised elbo for multiple mean GPs with common HPs — gr_GP_mod_common_hp_k","text":"hp tibble, data frame named vector containing hyper-parameters. db tibble containing values want compute elbo . Required columns: Input, Output. Additional covariate columns allowed. mean list k means GPs union observed timestamps. kern kernel function post_cov list k posterior covariance mean GP (mu_k). Used compute correction term (cor_term) pen_diag jitter term added covariance matrix avoid numerical issues inverting, cases nearly singular matrices.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/gr_GP_mod_common_hp_k.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gradient of the penalised elbo for multiple mean GPs with common HPs — gr_GP_mod_common_hp_k","text":"gradient penalised Gaussian elbo sum k mean GPs common HPs.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/gr_GP_mod_common_hp_k.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gradient of the penalised elbo for multiple mean GPs with common HPs — gr_GP_mod_common_hp_k","text":"","code":"TRUE #> [1] TRUE"},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/gr_clust_multi_GP.html","id":null,"dir":"Reference","previous_headings":"","what":"Gradient of the elbo for a mixture of GPs — gr_clust_multi_GP","title":"Gradient of the elbo for a mixture of GPs — gr_clust_multi_GP","text":"Gradient elbo mixture GPs","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/gr_clust_multi_GP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gradient of the elbo for a mixture of GPs — gr_clust_multi_GP","text":"","code":"gr_clust_multi_GP(hp, db, hyperpost, kern, pen_diag)"},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/gr_clust_multi_GP.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gradient of the elbo for a mixture of GPs — gr_clust_multi_GP","text":"hp tibble, data frame named vector containing hyper-parameters. db tibble containing values want compute elbo . Required columns: Input, Output. Additional covariate columns allowed. hyperpost List parameters K mean Gaussian processes. kern kernel function. pen_diag jitter term added covariance matrix avoid numerical issues inverting, cases nearly singular matrices.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/gr_clust_multi_GP.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gradient of the elbo for a mixture of GPs — gr_clust_multi_GP","text":"gradient penalised Gaussian elbo mixture GPs","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/gr_clust_multi_GP.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gradient of the elbo for a mixture of GPs — gr_clust_multi_GP","text":"","code":"TRUE #> [1] TRUE"},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/gr_clust_multi_GP_common_hp_i.html","id":null,"dir":"Reference","previous_headings":"","what":"Gradient of the penalised elbo for multiple individual GPs with common HPs — gr_clust_multi_GP_common_hp_i","title":"Gradient of the penalised elbo for multiple individual GPs with common HPs — gr_clust_multi_GP_common_hp_i","text":"Gradient penalised elbo multiple individual GPs common HPs","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/gr_clust_multi_GP_common_hp_i.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gradient of the penalised elbo for multiple individual GPs with common HPs — gr_clust_multi_GP_common_hp_i","text":"","code":"gr_clust_multi_GP_common_hp_i(hp, db, hyperpost, kern, pen_diag = NULL)"},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/gr_clust_multi_GP_common_hp_i.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gradient of the penalised elbo for multiple individual GPs with common HPs — gr_clust_multi_GP_common_hp_i","text":"hp tibble, data frame name vector hyper-parameters. db tibble containing values want compute elbo . Required columns: Input, Output. Additional covariate columns allowed. hyperpost List parameters K mean Gaussian processes. kern kernel function used compute covariance matrix corresponding timestamps. pen_diag jitter term added covariance matrix avoid numerical issues inverting, cases nearly singular matrices.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/gr_clust_multi_GP_common_hp_i.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gradient of the penalised elbo for multiple individual GPs with common HPs — gr_clust_multi_GP_common_hp_i","text":"gradient penalised Gaussian elbo sum M individual GPs common HPs.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/gr_clust_multi_GP_common_hp_i.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gradient of the penalised elbo for multiple individual GPs with common HPs — gr_clust_multi_GP_common_hp_i","text":"","code":"TRUE #> [1] TRUE"},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/gr_sum_logL_GP_clust.html","id":null,"dir":"Reference","previous_headings":"","what":"Gradient of the mixture of Gaussian likelihoods — gr_sum_logL_GP_clust","title":"Gradient of the mixture of Gaussian likelihoods — gr_sum_logL_GP_clust","text":"Compute gradient sum Gaussian log-likelihoods, weighted mixture probabilities.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/gr_sum_logL_GP_clust.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gradient of the mixture of Gaussian likelihoods — gr_sum_logL_GP_clust","text":"","code":"gr_sum_logL_GP_clust(hp, db, mixture, mean, kern, post_cov, pen_diag)"},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/gr_sum_logL_GP_clust.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gradient of the mixture of Gaussian likelihoods — gr_sum_logL_GP_clust","text":"hp tibble, data frame named vector hyper-parameters. db tibble containing data want evaluate logL . Required columns: Input, Output. Additional covariate columns allowed. mixture tibble data frame, indicating mixture probabilities cluster new individual/task. mean list hyper-posterior mean parameters clusters. kern kernel function. post_cov list hyper-posterior covariance parameters clusters. pen_diag jitter term added covariance matrix avoid numerical issues inverting, cases nearly singular matrices.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/gr_sum_logL_GP_clust.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gradient of the mixture of Gaussian likelihoods — gr_sum_logL_GP_clust","text":"named vector, corresponding value hyper-parameters' gradients mixture Gaussian log-likelihoods involved prediction step MagmaClust.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/gr_sum_logL_GP_clust.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gradient of the mixture of Gaussian likelihoods — gr_sum_logL_GP_clust","text":"","code":"TRUE #> [1] TRUE"},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/hp.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate random hyper-parameters — hp","title":"Generate random hyper-parameters — hp","text":"Generate set random hyper-parameters, specific chosen type kernel, format used Magma.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/hp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate random hyper-parameters — hp","text":"","code":"hp(kern = \"SE\", list_ID = NULL, list_hp = NULL, noise = F, common_hp = F)"},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/hp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate random hyper-parameters — hp","text":"kern function, character string indicating chosen type kernel among: \"SE\": Squared Exponential kernel, \"LIN\": Linear kernel, \"PERIO\": Periodic kernel, \"RQ\": Rational Quadratic kernel. Compound kernels can created sums products kernels. combining kernels, simply provide formula character string elements separated whitespaces (e.g. \"SE + PERIO\"). elements treated sequentially left right, product operator '*' shall always used '+' operators (e.g. 'SE * LIN + RQ' valid whereas 'RQ + SE * LIN'  ). case custom kernel function, argument list_hp provided well, designing tibble correct names hyper-parameters. list_ID vector, associating ID value individual hyper-parameters generated. NULL (default) one set hyper-parameters return without ID column. list_hp vector characters, providing name hyper-parameter, case kern custom kernel function. noise logical value, indicating whether 'noise' hyper-parameter included. common_hp logical value, indicating whether set hyper-parameters assumed common indiviuals.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/hp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate random hyper-parameters — hp","text":"tibble, providing set random hyper-parameters associated kernel specified argument kern.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/hp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate random hyper-parameters — hp","text":"","code":"hp(\"PERIO\") #> # A tibble: 1 × 3 #>   perio_variance perio_lengthscale period #>            <dbl>             <dbl>  <dbl> #> 1           1.03             0.597  0.808 hp(MagmaClustR:::se_kernel, 1:5, c(\"var\", \"lengthsc\"), TRUE) #> # A tibble: 5 × 4 #>   ID      var lengthsc   noise #>   <chr> <dbl>    <dbl>   <dbl> #> 1 1     1.25     0.827 -0.0804 #> 2 2     0.871    0.886 -1.85   #> 3 3     0.632    2.89  -1.54   #> 4 4     2.01     1.05  -1.58   #> 5 5     1.58     2.28  -0.175"},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/hyperposterior.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the hyper-posterior distribution in Magma — hyperposterior","title":"Compute the hyper-posterior distribution in Magma — hyperposterior","text":"Compute parameters hyper-posterior Gaussian distribution mean process Magma (similarly expectation step EM algorithm used learning). hyper-posterior distribution, evaluated grid inputs provided grid_inputs argument, key component making prediction Magma, required function pred_magma.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/hyperposterior.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the hyper-posterior distribution in Magma — hyperposterior","text":"","code":"hyperposterior(   data,   hp_0,   hp_i,   kern_0,   kern_i,   prior_mean = NULL,   grid_inputs = NULL,   pen_diag = 1e-08 )"},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/hyperposterior.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the hyper-posterior distribution in Magma — hyperposterior","text":"data tibble data frame. Required columns: 'Input', 'Output'. Additional columns covariates can specified. 'Input' column define variable used reference observations (e.g. time longitudinal data). 'Output' column specifies observed values (response variable). data frame can also provide many covariates desired, constraints column names. covariates additional inputs (explanatory variables) models also observed reference 'Input'. hp_0 named vector, tibble data frame hyper-parameters associated kern_0. hp_i tibble data frame hyper-parameters associated kern_i. kern_0 kernel function, associated mean GP. Several popular kernels (see Kernel Cookbook) already implemented can selected within following list: \"SE\": (default value) Squared Exponential Kernel (also called Radial Basis Function Gaussian kernel), \"LIN\": Linear kernel, \"PERIO\": Periodic kernel, \"RQ\": Rational Quadratic kernel. Compound kernels can created sums products kernels. combining kernels, simply provide formula character string elements separated whitespaces (e.g. \"SE + PERIO\"). elements treated sequentially left right, product operator '*' shall always used '+' operators (e.g. 'SE * LIN + RQ' valid whereas 'RQ + SE * LIN'  ). kern_i kernel function, associated individual GPs. (\"SE\", \"PERIO\" \"RQ\" aso available ) prior_mean Hyper-prior mean parameter mean GP. argument, can specified various formats, : NULL (default). hyper-prior mean set 0 everywhere. number. hyper-prior mean constant function. vector length distinct Input values data argument. vector considered evaluation hyper-prior mean function training Inputs. function. function defined hyper-prior mean. tibble data frame. Required columns: Input, Output. Input values include least values data argument. grid_inputs vector, indicating grid additional reference inputs mean process' hyper-posterior evaluated. pen_diag number. jitter term, added diagonal prevent numerical issues inverting nearly singular matrices.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/hyperposterior.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the hyper-posterior distribution in Magma — hyperposterior","text":"list gathering parameters mean processes' hyper-posterior distributions, namely: mean: tibble, hyper-posterior mean parameter evaluated training Input. cov: matrix, covariance parameter hyper-posterior distribution mean process. pred: tibble, predicted mean variance Input mean process' hyper-posterior distribution format allows direct visualisation GP prediction.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/hyperposterior.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the hyper-posterior distribution in Magma — hyperposterior","text":"","code":"TRUE #> [1] TRUE"},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/hyperposterior_clust.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the hyper-posterior distribution for each cluster in MagmaClust — hyperposterior_clust","title":"Compute the hyper-posterior distribution for each cluster in MagmaClust — hyperposterior_clust","text":"Recompute E-step VEM algorithm MagmaClust new set reference Input. training completed, can necessary evaluate hyper-posterior distributions mean processes specific locations, want make predictions. process directly implemented pred_magmaclust function user might want use hyperpost_clust tailored control 'hand' prediction procedure.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/hyperposterior_clust.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the hyper-posterior distribution for each cluster in MagmaClust — hyperposterior_clust","text":"","code":"hyperposterior_clust(   data,   mixture,   hp_k,   hp_i,   kern_k,   kern_i,   prior_mean_k = NULL,   grid_inputs = NULL,   pen_diag = 1e-08 )"},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/hyperposterior_clust.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the hyper-posterior distribution for each cluster in MagmaClust — hyperposterior_clust","text":"data tibble data frame. Required columns: ID, Input , Output. Additional columns covariates can specified. ID column contains unique names/codes used identify individual/task (batch data). Input column define variable used reference observations (e.g. time longitudinal data). Output column specifies observed values (response variable). data frame can also provide many covariates desired, constraints column names. covariates additional inputs (explanatory variables) models also observed reference Input. mixture tibble data frame, indicating mixture probabilities cluster individual. Required column: ID. hp_k tibble data frame hyper-parameters associated kern_k. hp_i tibble data frame hyper-parameters associated kern_i. kern_k kernel function, associated mean GPs. Several popular kernels (see Kernel Cookbook) already implemented can selected within following list: \"SE\": (default value) Squared Exponential Kernel (also called Radial Basis Function Gaussian kernel), \"LIN\": Linear kernel, \"PERIO\": Periodic kernel, \"RQ\": Rational Quadratic kernel. Compound kernels can created sums products kernels. combining kernels, simply provide formula character string elements separated whitespaces (e.g. \"SE + PERIO\"). elements treated sequentially left right, product operator '*' shall always used '+' operators (e.g. 'SE * LIN + RQ' valid whereas 'RQ + SE * LIN'  ). kern_i kernel function, associated individual GPs. (\"SE\", \"LIN\", PERIO\" \"RQ\" also available ) prior_mean_k set hyper-prior mean parameters (m_k) K mean GPs, one value cluster. cluster. argument can specified various formats, : NULL (default). hyper-prior means set 0 everywhere. numerical vector length number clusters. number associated one cluster, considered hyper-prior mean parameter cluster (.e. constant function Input). list functions. function associated one cluster. functions evaluated Input values, provide specific hyper-prior mean vectors cluster. grid_inputs vector, indicating grid additional reference inputs mean process' hyper-posterior evaluated. pen_diag number. jitter term, added diagonal prevent numerical issues inverting nearly singular matrices.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/hyperposterior_clust.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the hyper-posterior distribution for each cluster in MagmaClust — hyperposterior_clust","text":"list containing parameters mean processes' hyper-posterior distribution, namely: mean: list tibbles containing, cluster, hyper-posterior mean parameters evaluated Input. cov: list matrices containing, cluster, hyper-posterior covariance parameter mean process. mixture: tibble, indicating mixture probabilities cluster individual.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/hyperposterior_clust.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the hyper-posterior distribution for each cluster in MagmaClust — hyperposterior_clust","text":"","code":"TRUE #> [1] TRUE"},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/ini_kmeans.html","id":null,"dir":"Reference","previous_headings":"","what":"ini_kmeans — ini_kmeans","title":"ini_kmeans — ini_kmeans","text":"ini_kmeans","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/ini_kmeans.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ini_kmeans — ini_kmeans","text":"","code":"ini_kmeans(data, k, nstart = 50, summary = F)"},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/ini_kmeans.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ini_kmeans — ini_kmeans","text":"data tibble containing common Input associated Output values cluster. k number clusters assumed running kmeans algorithm. nstart number, indicating many re-starts kmeans set. summary boolean, indicating whether want outcome summary","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/ini_kmeans.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ini_kmeans — ini_kmeans","text":"tibble containing initial clustering obtained kmeans.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/ini_kmeans.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ini_kmeans — ini_kmeans","text":"","code":"TRUE #> [1] TRUE"},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/ini_mixture.html","id":null,"dir":"Reference","previous_headings":"","what":"Mixture initialisation with kmeans — ini_mixture","title":"Mixture initialisation with kmeans — ini_mixture","text":"Provide initial kmeans allocation individuals/tasks dataset definite number clusters, return associated mixture probabilities.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/ini_mixture.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mixture initialisation with kmeans — ini_mixture","text":"","code":"ini_mixture(data, k, name_clust = NULL, nstart = 50)"},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/ini_mixture.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mixture initialisation with kmeans — ini_mixture","text":"data tibble data frame. Required columns: ID, Input , Output. k number, indicating number clusters. name_clust vector characters. element correspond name one cluster. nstart number restart used underlying kmeans algorithm","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/ini_mixture.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mixture initialisation with kmeans — ini_mixture","text":"tibble indicating ID cluster belongs kmeans initialisation.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/ini_mixture.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mixture initialisation with kmeans — ini_mixture","text":"","code":"TRUE #> [1] TRUE"},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/kern_to_cov.html","id":null,"dir":"Reference","previous_headings":"","what":"Create covariance matrix from a kernel — kern_to_cov","title":"Create covariance matrix from a kernel — kern_to_cov","text":"kern_to_cov() creates covariance matrix input values (either scalars vectors) evaluated within kernel function, characterised specified hyper-parameters. matrix finite-dimensional evaluation infinite-dimensional covariance structure GP, defined thanks kernel.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/kern_to_cov.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create covariance matrix from a kernel — kern_to_cov","text":"","code":"kern_to_cov(input, kern = \"SE\", hp, deriv = NULL, input_2 = NULL)"},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/kern_to_cov.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create covariance matrix from a kernel — kern_to_cov","text":"input vector, matrix, data frame tibble containing inputs one individual. vector, elements used reference, otherwise , one column named 'Input' indicate represents reference (e.g. 'Input' contain timestamps time-series applications). columns considered covariates. column named 'Input', first one used default. kern kernel function. Several popular kernels (see Kernel Cookbook) already implemented can selected within following list: \"SE\": (default value) Squared Exponential Kernel (also called Radial Basis Function Gaussian kernel), \"LIN\": Linear kernel, \"PERIO\": Periodic kernel, \"RQ\": Rational Quadratic kernel. Compound kernels can created sums products kernels. combining kernels, simply provide formula character string elements separated whitespaces (e.g. \"SE + PERIO\"). elements treated sequentially left right, product operator '*' shall always used '+' operators (e.g. 'SE * LIN + RQ' valid whereas 'RQ + SE * LIN'  ). hp list, data frame tibble containing hyper-parameters used kernel. name elements (columns) correspond exactly used kernel definition. hp contains element column 'Noise', value added diagonal covariance matrix. deriv character, indicating according hyper-parameter derivative computed. NULL (default), function simply returns covariance matrix. input_2 (optional) vector, matrix, data frame tibble format input. argument used kernel needs evaluated two different sets inputs, typically resulting non-square matrix.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/kern_to_cov.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create covariance matrix from a kernel — kern_to_cov","text":"covariance matrix, elements evaluations associated kernel pair reference inputs.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/kern_to_cov.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create covariance matrix from a kernel — kern_to_cov","text":"","code":"kern_to_cov(   rbind(c(1, 0, 1), c(2, 1, 2), c(1, 2, 3)),   \"SE\",   tibble::tibble(se_variance = 1, se_lengthscale = 0.5) ) #>           1        2         1 #> 1 2.7182818 1.094398 0.2402386 #> 2 1.0943975 2.718282 1.0943975 #> 1 0.2402386 1.094398 2.7182818"},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/kern_to_inv.html","id":null,"dir":"Reference","previous_headings":"","what":"Create inverse of a covariance matrix from a kernel — kern_to_inv","title":"Create inverse of a covariance matrix from a kernel — kern_to_inv","text":"kern_to_inv() creates inverse covariance matrix input values (either scalars vectors) evaluated within kernel function, characterised specified hyper-parameters. matrix finite-dimensional evaluation infinite-dimensional covariance structure GP, defined thanks kernel.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/kern_to_inv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create inverse of a covariance matrix from a kernel — kern_to_inv","text":"","code":"kern_to_inv(input, kern, hp, pen_diag = 0, deriv = NULL)"},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/kern_to_inv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create inverse of a covariance matrix from a kernel — kern_to_inv","text":"input vector, matrix, data frame tibble containing inputs one individual. vector, elements used reference, otherwise ,one column named 'Input' indicate represents reference (e.g. 'Input' contain timestamps time-series applications). columns considered covariates. column named 'Input', first one used default. kern kernel function. Several popular kernels (see Kernel Cookbook) already implemented can selected within following list: \"SE\": (default value) Squared Exponential Kernel (also called Radial Basis Function Gaussian kernel), \"LIN\": Linear kernel, \"PERIO\": Periodic kernel, \"RQ\": Rational Quadratic kernel. Compound kernels can created sums products kernels. combining kernels, simply provide formula character string elements separated whitespaces (e.g. \"SE + PERIO\"). elements treated sequentially left right, product operator '*' shall always used '+' operators (e.g. 'SE * LIN + RQ' valid whereas 'RQ + SE * LIN'  ). hp list, data frame tibble containing hyper-parameters used kernel. name elements (columns) correspond exactly used kernel definition. pen_diag jitter term added covariance matrix avoid numerical issues inverting, cases nearly singular matrices. deriv character, indicating according hyper-parameter derivative computed. NULL (default), function simply returns inverse covariance matrix.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/kern_to_inv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create inverse of a covariance matrix from a kernel — kern_to_inv","text":"inverse covariance matrix, elements evaluations associated kernel pair reference inputs.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/kern_to_inv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create inverse of a covariance matrix from a kernel — kern_to_inv","text":"","code":"kern_to_inv(   rbind(c(1, 0, 1), c(2, 1, 2), c(1, 2, 3)),   \"SE\",   tibble::tibble(se_variance = 1, se_lengthscale = 0.5) )"},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/lin_kernel.html","id":null,"dir":"Reference","previous_headings":"","what":"Linear Kernel — lin_kernel","title":"Linear Kernel — lin_kernel","text":"Linear Kernel","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/lin_kernel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Linear Kernel — lin_kernel","text":"","code":"lin_kernel(x = NULL, y = NULL, hp, deriv = NULL, vectorized = F)"},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/lin_kernel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Linear Kernel — lin_kernel","text":"x vector (matrix vectorized = T) inputs. y vector (matrix vectorized = T) inputs. hp tibble, data frame named vector, containing kernel's hyperparameters. Required columns: 'lin_slope' 'lin_offset'. deriv character, indicating according hyper-parameter derivative computed. NULL (default), function simply returns evaluation kernel. vectorized logical value, indicating whether function provides vectorized version speeded-calculations. TRUE, x y arguments vector matrix containing inputs kernel evaluated pairs elements. FALSE, x y arguments simply two inputs.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/lin_kernel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Linear Kernel — lin_kernel","text":"scalar, corresponding evaluation kernel.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/lin_kernel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Linear Kernel — lin_kernel","text":"","code":"MagmaClustR:::lin_kernel(   c(1, 0), c(0, 1),   tibble::tibble(lin_slope = 1, lin_offset = 1) ) #>          [,1] #> [1,] 2.718282"},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/list_kern_to_cov.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute a covariance matrix for multiple individuals — list_kern_to_cov","title":"Compute a covariance matrix for multiple individuals — list_kern_to_cov","text":"Compute covariance matrices associated individuals database, taking account specific inputs hyper-parameters.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/list_kern_to_cov.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute a covariance matrix for multiple individuals — list_kern_to_cov","text":"","code":"list_kern_to_cov(data, kern, hp, deriv = NULL)"},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/list_kern_to_cov.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute a covariance matrix for multiple individuals — list_kern_to_cov","text":"data tibble data frame input data. Required column: 'ID'. Suggested column: 'Input' (indicating reference input). kern kernel function. hp tibble data frame, containing hyper-parameters associated individual. deriv character, indicating according hyper-parameter derivative computed. NULL (default), function simply returns list covariance matrices.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/list_kern_to_cov.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute a covariance matrix for multiple individuals — list_kern_to_cov","text":"named list containing inverse covariance matrices.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/list_kern_to_cov.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute a covariance matrix for multiple individuals — list_kern_to_cov","text":"","code":"db <- simu_db(M = 3) hp <- tibble::tibble(ID = unique(db$ID), hp()) MagmaClustR:::list_kern_to_cov(db, \"SE\", hp) #> $`1` #>            1.1     2.55     3.05      3.1      3.9      6.6     7.25     7.45 #> 1.1  6.3131104 5.854795 5.508662 5.469800 4.766399 2.134577 1.627134 1.487659 #> 2.55 5.8547951 6.313110 6.256787 6.245023 5.913856 3.506627 2.859872 2.669661 #> 3.05 5.5086620 6.256787 6.313110 6.312545 6.151705 4.018351 3.354472 3.153895 #> 3.1  5.4698001 6.245023 6.312545 6.313110 6.169925 4.069449 3.405052 3.203747 #> 3.9  4.7663990 5.913856 6.151705 6.169925 6.313110 4.861304 4.222131 4.018351 #> 6.6  2.1345773 3.506627 4.018351 4.069449 4.861304 6.313110 6.218218 6.151705 #> 7.25 1.6271341 2.859872 3.354472 3.405052 4.222131 6.218218 6.313110 6.304065 #> 7.45 1.4876589 2.669661 3.153895 3.203747 4.018351 6.151705 6.304065 6.313110 #> 7.95 1.1742341 2.219632 2.669661 2.716724 3.506627 5.913856 6.203190 6.256787 #> 9.35 0.5503608 1.203316 1.521774 1.556392 2.176884 4.814049 5.389998 5.546806 #>          7.95      9.35 #> 1.1  1.174234 0.5503608 #> 2.55 2.219632 1.2033164 #> 3.05 2.669661 1.5217739 #> 3.1  2.716724 1.5563922 #> 3.9  3.506627 2.1768844 #> 6.6  5.913856 4.8140491 #> 7.25 6.203190 5.3899977 #> 7.45 6.256787 5.5468059 #> 7.95 6.313110 5.8847787 #> 9.35 5.884779 6.3131104 #>  #> $`2` #>            1.1     2.55     3.05      3.1      3.9      6.6     7.25     7.45 #> 1.1  6.3131104 5.854795 5.508662 5.469800 4.766399 2.134577 1.627134 1.487659 #> 2.55 5.8547951 6.313110 6.256787 6.245023 5.913856 3.506627 2.859872 2.669661 #> 3.05 5.5086620 6.256787 6.313110 6.312545 6.151705 4.018351 3.354472 3.153895 #> 3.1  5.4698001 6.245023 6.312545 6.313110 6.169925 4.069449 3.405052 3.203747 #> 3.9  4.7663990 5.913856 6.151705 6.169925 6.313110 4.861304 4.222131 4.018351 #> 6.6  2.1345773 3.506627 4.018351 4.069449 4.861304 6.313110 6.218218 6.151705 #> 7.25 1.6271341 2.859872 3.354472 3.405052 4.222131 6.218218 6.313110 6.304065 #> 7.45 1.4876589 2.669661 3.153895 3.203747 4.018351 6.151705 6.304065 6.313110 #> 7.95 1.1742341 2.219632 2.669661 2.716724 3.506627 5.913856 6.203190 6.256787 #> 9.35 0.5503608 1.203316 1.521774 1.556392 2.176884 4.814049 5.389998 5.546806 #>          7.95      9.35 #> 1.1  1.174234 0.5503608 #> 2.55 2.219632 1.2033164 #> 3.05 2.669661 1.5217739 #> 3.1  2.716724 1.5563922 #> 3.9  3.506627 2.1768844 #> 6.6  5.913856 4.8140491 #> 7.25 6.203190 5.3899977 #> 7.45 6.256787 5.5468059 #> 7.95 6.313110 5.8847787 #> 9.35 5.884779 6.3131104 #>  #> $`3` #>            1.1     2.55     3.05      3.1      3.9      6.6     7.25     7.45 #> 1.1  6.3131104 5.854795 5.508662 5.469800 4.766399 2.134577 1.627134 1.487659 #> 2.55 5.8547951 6.313110 6.256787 6.245023 5.913856 3.506627 2.859872 2.669661 #> 3.05 5.5086620 6.256787 6.313110 6.312545 6.151705 4.018351 3.354472 3.153895 #> 3.1  5.4698001 6.245023 6.312545 6.313110 6.169925 4.069449 3.405052 3.203747 #> 3.9  4.7663990 5.913856 6.151705 6.169925 6.313110 4.861304 4.222131 4.018351 #> 6.6  2.1345773 3.506627 4.018351 4.069449 4.861304 6.313110 6.218218 6.151705 #> 7.25 1.6271341 2.859872 3.354472 3.405052 4.222131 6.218218 6.313110 6.304065 #> 7.45 1.4876589 2.669661 3.153895 3.203747 4.018351 6.151705 6.304065 6.313110 #> 7.95 1.1742341 2.219632 2.669661 2.716724 3.506627 5.913856 6.203190 6.256787 #> 9.35 0.5503608 1.203316 1.521774 1.556392 2.176884 4.814049 5.389998 5.546806 #>          7.95      9.35 #> 1.1  1.174234 0.5503608 #> 2.55 2.219632 1.2033164 #> 3.05 2.669661 1.5217739 #> 3.1  2.716724 1.5563922 #> 3.9  3.506627 2.1768844 #> 6.6  5.913856 4.8140491 #> 7.25 6.203190 5.3899977 #> 7.45 6.256787 5.5468059 #> 7.95 6.313110 5.8847787 #> 9.35 5.884779 6.3131104 #>"},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/list_kern_to_inv.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute an inverse covariance matrix for multiple individuals — list_kern_to_inv","title":"Compute an inverse covariance matrix for multiple individuals — list_kern_to_inv","text":"Compute inverse covariance matrices associated individuals database, taking account specific inputs hyper-parameters.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/list_kern_to_inv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute an inverse covariance matrix for multiple individuals — list_kern_to_inv","text":"","code":"list_kern_to_inv(db, kern, hp, pen_diag, deriv = NULL)"},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/list_kern_to_inv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute an inverse covariance matrix for multiple individuals — list_kern_to_inv","text":"db tibble data frame input data. Required column: 'ID'. Suggested column: 'Input' (indicating reference input). kern kernel function. hp tibble data frame, containing hyper-parameters associated individual. pen_diag number. jitter term, added diagonal prevent numerical issues inverting nearly singular matrices. deriv character, indicating according hyper-parameter derivative computed. NULL (default), function simply returns list covariance matrices.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/list_kern_to_inv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute an inverse covariance matrix for multiple individuals — list_kern_to_inv","text":"named list containing inverse covariance matrices.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/list_kern_to_inv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute an inverse covariance matrix for multiple individuals — list_kern_to_inv","text":"","code":"db <- simu_db(M = 3) hp <- tibble::tibble(ID = unique(db$ID), MagmaClustR:::hp()) MagmaClustR:::list_kern_to_inv(db, \"SE\", hp, 0) #> $`1` #>              0.1          1.7          2.2         4.75         6.15 #> 0.1     1.556030    -6.255999     5.840676    -2.784955     6.275892 #> 1.7    -6.255999    33.853912   -33.518008    18.644119   -43.526578 #> 2.2     5.840676   -33.518008    33.947621   -20.149889    47.782720 #> 4.75   -2.784955    18.644119   -20.149889    17.787236   -47.941412 #> 6.15    6.275892   -43.526578    47.782720   -47.941412   142.915300 #> 7.65  -36.471502   258.748307  -286.945770   314.393061 -1017.336690 #> 8.25   88.485635  -631.828120   702.723324  -790.190802  2624.351185 #> 8.9  -211.433871  1518.564024 -1693.416351  1950.119695 -6638.012632 #> 9.1   171.832916 -1236.107597  1379.431815 -1599.010360  5480.597960 #> 9.65  -16.738602   120.889908  -135.149739   159.266070  -555.554765 #>             7.65          8.25          8.9          9.1        9.65 #> 0.1     -36.4715      88.48563    -211.4339     171.8329    -16.7386 #> 1.7     258.7483    -631.82812    1518.5640   -1236.1076    120.8899 #> 2.2    -286.9458     702.72332   -1693.4164    1379.4318   -135.1497 #> 4.75    314.3931    -790.19080    1950.1197   -1599.0104    159.2661 #> 6.15  -1017.3367    2624.35118   -6638.0126    5480.5980   -555.5548 #> 7.65   7981.4041  -21349.99180   56020.2929  -46750.3595   4873.6581 #> 8.25 -21349.9918   58020.43508 -154885.4202  129937.6286 -13740.3687 #> 8.9   56020.2929 -154885.42017  421753.4745 -356053.4419  38319.7808 #> 9.1  -46750.3595  129937.62863 -356053.4419  301205.0869 -32608.2481 #> 9.65   4873.6581  -13740.36866   38319.7808  -32608.2481   3592.0927 #>  #> $`2` #>              0.1          1.7          2.2         4.75         6.15 #> 0.1     1.556030    -6.255999     5.840676    -2.784955     6.275892 #> 1.7    -6.255999    33.853912   -33.518008    18.644119   -43.526578 #> 2.2     5.840676   -33.518008    33.947621   -20.149889    47.782720 #> 4.75   -2.784955    18.644119   -20.149889    17.787236   -47.941412 #> 6.15    6.275892   -43.526578    47.782720   -47.941412   142.915300 #> 7.65  -36.471502   258.748307  -286.945770   314.393061 -1017.336690 #> 8.25   88.485635  -631.828120   702.723324  -790.190802  2624.351185 #> 8.9  -211.433871  1518.564024 -1693.416351  1950.119695 -6638.012632 #> 9.1   171.832916 -1236.107597  1379.431815 -1599.010360  5480.597960 #> 9.65  -16.738602   120.889908  -135.149739   159.266070  -555.554765 #>             7.65          8.25          8.9          9.1        9.65 #> 0.1     -36.4715      88.48563    -211.4339     171.8329    -16.7386 #> 1.7     258.7483    -631.82812    1518.5640   -1236.1076    120.8899 #> 2.2    -286.9458     702.72332   -1693.4164    1379.4318   -135.1497 #> 4.75    314.3931    -790.19080    1950.1197   -1599.0104    159.2661 #> 6.15  -1017.3367    2624.35118   -6638.0126    5480.5980   -555.5548 #> 7.65   7981.4041  -21349.99180   56020.2929  -46750.3595   4873.6581 #> 8.25 -21349.9918   58020.43508 -154885.4202  129937.6286 -13740.3687 #> 8.9   56020.2929 -154885.42017  421753.4745 -356053.4419  38319.7808 #> 9.1  -46750.3595  129937.62863 -356053.4419  301205.0869 -32608.2481 #> 9.65   4873.6581  -13740.36866   38319.7808  -32608.2481   3592.0927 #>  #> $`3` #>              0.1          1.7          2.2         4.75         6.15 #> 0.1     1.556030    -6.255999     5.840676    -2.784955     6.275892 #> 1.7    -6.255999    33.853912   -33.518008    18.644119   -43.526578 #> 2.2     5.840676   -33.518008    33.947621   -20.149889    47.782720 #> 4.75   -2.784955    18.644119   -20.149889    17.787236   -47.941412 #> 6.15    6.275892   -43.526578    47.782720   -47.941412   142.915300 #> 7.65  -36.471502   258.748307  -286.945770   314.393061 -1017.336690 #> 8.25   88.485635  -631.828120   702.723324  -790.190802  2624.351185 #> 8.9  -211.433871  1518.564024 -1693.416351  1950.119695 -6638.012632 #> 9.1   171.832916 -1236.107597  1379.431815 -1599.010360  5480.597960 #> 9.65  -16.738602   120.889908  -135.149739   159.266070  -555.554765 #>             7.65          8.25          8.9          9.1        9.65 #> 0.1     -36.4715      88.48563    -211.4339     171.8329    -16.7386 #> 1.7     258.7483    -631.82812    1518.5640   -1236.1076    120.8899 #> 2.2    -286.9458     702.72332   -1693.4164    1379.4318   -135.1497 #> 4.75    314.3931    -790.19080    1950.1197   -1599.0104    159.2661 #> 6.15  -1017.3367    2624.35118   -6638.0126    5480.5980   -555.5548 #> 7.65   7981.4041  -21349.99180   56020.2929  -46750.3595   4873.6581 #> 8.25 -21349.9918   58020.43508 -154885.4202  129937.6286 -13740.3687 #> 8.9   56020.2929 -154885.42017  421753.4745 -356053.4419  38319.7808 #> 9.1  -46750.3595  129937.62863 -356053.4419  301205.0869 -32608.2481 #> 9.65   4873.6581  -13740.36866   38319.7808  -32608.2481   3592.0927 #>"},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/logL_GP.html","id":null,"dir":"Reference","previous_headings":"","what":"Log-Likelihood function of a Gaussian Process — logL_GP","title":"Log-Likelihood function of a Gaussian Process — logL_GP","text":"Log-Likelihood function Gaussian Process","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/logL_GP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Log-Likelihood function of a Gaussian Process — logL_GP","text":"","code":"logL_GP(hp, db, mean, kern, post_cov, pen_diag)"},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/logL_GP.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Log-Likelihood function of a Gaussian Process — logL_GP","text":"hp tibble, data frame named vector containing hyper-parameters. db tibble containing values want compute logL . Required columns: Input, Output. Additional covariate columns allowed. mean vector, specifying mean GP reference inputs. kern kernel function. post_cov (optional) matrix, corresponding covariance parameter hyper-posterior. Used compute hyper-prior distribution new individual Magma. pen_diag jitter term added covariance matrix avoid numerical issues inverting, cases nearly singular matrices.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/logL_GP.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Log-Likelihood function of a Gaussian Process — logL_GP","text":"number, corresponding value Gaussian log-Likelihood (covariance can sum individual hyper-posterior's mean process covariances).","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/logL_GP.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Log-Likelihood function of a Gaussian Process — logL_GP","text":"","code":"TRUE #> [1] TRUE"},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/logL_GP_mod.html","id":null,"dir":"Reference","previous_headings":"","what":"Modified log-Likelihood function for GPs — logL_GP_mod","title":"Modified log-Likelihood function for GPs — logL_GP_mod","text":"Log-Likelihood function involved Magma maximisation step training. log-Likelihood defined simple Gaussian likelihood added correction trace term.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/logL_GP_mod.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Modified log-Likelihood function for GPs — logL_GP_mod","text":"","code":"logL_GP_mod(hp, db, mean, kern, post_cov, pen_diag)"},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/logL_GP_mod.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Modified log-Likelihood function for GPs — logL_GP_mod","text":"hp tibble, data frame named vector hyper-parameters. db tibble containing values want compute logL . Required columns: Input, Output. Additional covariate columns allowed. mean vector, specifying mean GP reference inputs. kern kernel function. post_cov matrix, covariance parameter hyper-posterior. Used compute correction term. pen_diag jitter term added covariance matrix avoid numerical issues inverting, cases nearly singular matrices.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/logL_GP_mod.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Modified log-Likelihood function for GPs — logL_GP_mod","text":"number, corresponding value modified Gaussian log-Likelihood defined Magma.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/logL_GP_mod.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Modified log-Likelihood function for GPs — logL_GP_mod","text":"","code":"TRUE #> [1] TRUE"},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/logL_GP_mod_common_hp.html","id":null,"dir":"Reference","previous_headings":"","what":"Modified log-Likelihood function with common HPs for GPs — logL_GP_mod_common_hp","title":"Modified log-Likelihood function with common HPs for GPs — logL_GP_mod_common_hp","text":"Log-Likelihood function involved Magma maximisation step training, particular case hyper-parameters shared individuals. log-Likelihood defined sum individuals Gaussian likelihoods added correction trace terms.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/logL_GP_mod_common_hp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Modified log-Likelihood function with common HPs for GPs — logL_GP_mod_common_hp","text":"","code":"logL_GP_mod_common_hp(hp, db, mean, kern, post_cov, pen_diag)"},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/logL_GP_mod_common_hp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Modified log-Likelihood function with common HPs for GPs — logL_GP_mod_common_hp","text":"hp tibble, data frame hyper-parameters. db tibble containing values want compute logL . Required columns: ID, Input, Output. Additional covariate columns allowed. mean vector, specifying mean GP reference inputs. kern kernel function. post_cov matrix, covariance parameter hyper-posterior. Used compute correction term. pen_diag jitter term added covariance matrix avoid numerical issues inverting, cases nearly singular matrices.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/logL_GP_mod_common_hp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Modified log-Likelihood function with common HPs for GPs — logL_GP_mod_common_hp","text":"number, corresponding value modified Gaussian log-Likelihood common hyper-parameters defined Magma.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/logL_GP_mod_common_hp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Modified log-Likelihood function with common HPs for GPs — logL_GP_mod_common_hp","text":"","code":"TRUE #> [1] TRUE"},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/logL_monitoring.html","id":null,"dir":"Reference","previous_headings":"","what":"Log-Likelihood for monitoring the EM algorithm in Magma — logL_monitoring","title":"Log-Likelihood for monitoring the EM algorithm in Magma — logL_monitoring","text":"Log-Likelihood monitoring EM algorithm Magma","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/logL_monitoring.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Log-Likelihood for monitoring the EM algorithm in Magma — logL_monitoring","text":"","code":"logL_monitoring(   hp_0,   hp_i,   db,   m_0,   kern_0,   kern_i,   post_mean,   post_cov,   pen_diag )"},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/logL_monitoring.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Log-Likelihood for monitoring the EM algorithm in Magma — logL_monitoring","text":"hp_0 named vector, tibble data frame, containing hyper-parameters associated mean GP. hp_i tibble data frame, containing hyper-parameters individual GPs. db tibble data frame. Columns required: ID, Input, Output. Additional columns covariates can specified. m_0 vector, corresponding prior mean mean GP. kern_0 kernel function, associated mean GP. kern_i kernel function, associated individual GPs. post_mean tibble, coming E step, containing Input associated Output hyper-posterior mean parameter. post_cov matrix, coming E step, hyper-posterior covariance parameter. pen_diag jitter term added covariance matrix avoid numerical issues inverting, cases nearly singular matrices.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/logL_monitoring.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Log-Likelihood for monitoring the EM algorithm in Magma — logL_monitoring","text":"number, expectation joint log-likelihood model. quantity supposed increase step EM algorithm, thus used monitoring procedure.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/logL_monitoring.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Log-Likelihood for monitoring the EM algorithm in Magma — logL_monitoring","text":"","code":"TRUE #> [1] TRUE"},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/m_step.html","id":null,"dir":"Reference","previous_headings":"","what":"M-Step of the EM algorithm — m_step","title":"M-Step of the EM algorithm — m_step","text":"Maximisation step EM algorithm compute hyper-parameters kernels involved Magma.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/m_step.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"M-Step of the EM algorithm — m_step","text":"","code":"m_step(   db,   m_0,   kern_0,   kern_i,   old_hp_0,   old_hp_i,   post_mean,   post_cov,   common_hp,   pen_diag )"},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/m_step.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"M-Step of the EM algorithm — m_step","text":"db tibble data frame. Columns required: ID, Input, Output. Additional columns covariates can specified. m_0 vector, corresponding prior mean mean GP. kern_0 kernel function, associated mean GP. kern_i kernel function, associated individual GPs. old_hp_0 named vector, tibble data frame, containing hyper-parameters previous M-step (initialisation) associated mean GP. old_hp_i tibble data frame, containing hyper-parameters previous M-step (initialisation) associated individual GPs. post_mean tibble, coming E step, containing Input associated Output hyper-posterior mean parameter. post_cov matrix, coming E step, hyper-posterior covariance parameter. common_hp logical value, indicating whether set hyper-parameters assumed common indiviuals. pen_diag number. jitter term, added diagonal prevent numerical issues inverting nearly singular matrices.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/m_step.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"M-Step of the EM algorithm — m_step","text":"named list, containing elements hp_0, tibble containing hyper-parameters associated mean GP, hp_i, tibble containing hyper-parameters associated individual GPs.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/m_step.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"M-Step of the EM algorithm — m_step","text":"","code":"if (FALSE) { ## Common inputs across individuals and different HPs db <- simu_db(N = 10, common_input = TRUE) m_0 <- rep(0, 10) hp_0 <- MagmaClustR:::hp() hp_i <- MagmaClustR:::hp(\"SE\", list_ID = unique(db$ID)) post <- MagmaClustR:::e_step(db, m_0, \"SE\", \"SE\", hp_0, hp_i, 0.001)  MagmaClustR:::m_step(   db, m_0, \"SE\", \"SE\", hp_0, hp_i, post$mean, post$cov,   TRUE, 0.1 )  ## Common inputs across individuals and common HPs hp_i_common <- tibble::tibble(   ID = unique(db$ID),   variance = 1, lengthscale = 1 ) MagmaClustR:::m_step(   db, m_0, \"SE\", \"SE\", hp_0, hp_i_common,   post$mean, post$cov, TRUE, 0.5 )  ## Different inputs across individuals and different HPs db_async <- simu_db(N = 10, common_input = FALSE) m_0_async <- rep(0, db_async$Input %>% unique() %>% length()) post_async <- MagmaClustR:::e_step(   db_async, m_0_async, \"SE\", \"SE\",   hp_0, hp_i, 0.001 )  MagmaClustR:::m_step(   db_async, m_0_async, \"SE\", \"SE\", hp_0, hp_i,   post_async$mean, post_async$cov, FALSE, 0.01 ) }"},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/perio_kernel.html","id":null,"dir":"Reference","previous_headings":"","what":"Periodic Kernel — perio_kernel","title":"Periodic Kernel — perio_kernel","text":"Periodic Kernel","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/perio_kernel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Periodic Kernel — perio_kernel","text":"","code":"perio_kernel(x, y, hp, deriv = NULL, vectorized = F)"},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/perio_kernel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Periodic Kernel — perio_kernel","text":"x vector (matrix vectorized = T) inputs. y vector (matrix vectorized = T) inputs. hp tibble, data frame named vector, containing kernel's hyperparameters. Required columns: 'perio_variance', 'perio_lengthscale', 'period'. deriv character, indicating according hyper-parameter derivative computed. NULL (default), function simply returns evaluation kernel. vectorized logical value, indicating whether function provides vectorized version speeded-calculations. TRUE, x y arguments vector matrix containing inputs kernel evaluated pairs elements. FALSE, x y arguments simply two inputs.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/perio_kernel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Periodic Kernel — perio_kernel","text":"scalar, corresponding evaluation kernel.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/perio_kernel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Periodic Kernel — perio_kernel","text":"","code":"MagmaClustR:::perio_kernel(   c(1, 0), c(0, 1),   tibble::tibble(perio_variance = 1, perio_lengthscale = 0.5, period = 2) ) #> [1] 1.799002"},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/plot_db.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot smoothed curves of raw data — plot_db","title":"Plot smoothed curves of raw data — plot_db","text":"Display raw data Magma format smoothed curves.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/plot_db.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot smoothed curves of raw data — plot_db","text":"","code":"plot_db(data, cluster = F, legend = F)"},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/plot_db.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot smoothed curves of raw data — plot_db","text":"data data frame tibble format : ID, Input, Output. cluster boolean indicating whether data coloured cluster. Requires column named 'Cluster'. legend boolean indicating whether legend displayed.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/plot_db.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot smoothed curves of raw data — plot_db","text":"Graph smoothed curves raw data.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/plot_db.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot smoothed curves of raw data — plot_db","text":"","code":"TRUE #> [1] TRUE"},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/plot_gif.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a GIF of Magma or GP predictions — plot_gif","title":"Create a GIF of Magma or GP predictions — plot_gif","text":"Create GIF animation displaying Magma classic GP predictions evolve improve number data points increase.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/plot_gif.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a GIF of Magma or GP predictions — plot_gif","text":"","code":"plot_gif(   pred_gp,   x_input = NULL,   data = NULL,   data_train = NULL,   prior_mean = NULL,   y_grid = NULL,   heatmap = F,   prob_CI = 0.95,   size_data = 3,   size_data_train = 1,   alpha_data_train = 0.5,   export_gif = FALSE,   path = \"gif_gp.gif\",   ... )"},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/plot_gif.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a GIF of Magma or GP predictions — plot_gif","text":"pred_gp tibble, typically coming pred_gif function. Required columns: 'Input', 'Mean', 'Var' 'Index'. x_input vector character strings, indicating input displayed. NULL(default) 'Input' column used x-axis. providing 2-dimensional vector, corresponding columns used x-axis y-axis. data (Optional) tibble data frame. Required columns: 'Input', 'Output'. Additional columns covariates can specified. 'Input' column define variable used reference observations (e.g. time longitudinal data). 'Output' column specifies observed values (response variable). data frame can also provide many covariates desired, constraints column names. covariates additional inputs (explanatory variables) models also observed reference 'Input'. data_train (Optional) tibble data frame, containing training data Magma model. data set format data argument additional column 'ID' identifying different individuals/tasks. provided, data displayed backward colourful points (colour corresponding one individual/task). prior_mean (Optional) tibble data frame, containing 'Input' associated 'Output' prior mean parameter GP prediction. y_grid vector, indicating grid values y-axis probabilities computed heatmaps 1-dimensional predictions. NULL (default), vector length 50 defined, ranging min max 'Output' values contained pred_gp. heatmap logical value indicating whether GP prediction represented heatmap probabilities 1-dimensional inputs. FALSE (default), mean curve associated 95% CI displayed. prob_CI number 0 1 (default 0.95), indicating level Credible Interval associated posterior mean curve. size_data number, controlling size data points. size_data_train number, controlling size data_train points. alpha_data_train number, 0 1, controlling transparency data_train points. export_gif logical value indicating whether animation exported .gif file. path character string defining path GIF file exported. ... additional parameters can passed function transition_states gganimate package.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/plot_gif.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a GIF of Magma or GP predictions — plot_gif","text":"Visualisation Magma GP prediction (optional: display data points, training data points prior mean function), data points added sequentially visualising changes prediction information increases.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/plot_gif.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a GIF of Magma or GP predictions — plot_gif","text":"","code":"TRUE #> [1] TRUE"},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/plot_gp.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Magma or GP predictions — plot_gp","title":"Plot Magma or GP predictions — plot_gp","text":"Display Magma classic GP predictions. According dimension inputs, graph may mean curve + Credible Interval heatmap probabilities.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/plot_gp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Magma or GP predictions — plot_gp","text":"","code":"plot_gp(   pred_gp,   x_input = NULL,   data = NULL,   data_train = NULL,   prior_mean = NULL,   y_grid = NULL,   heatmap = F,   prob_CI = 0.95,   size_data = 3,   size_data_train = 1,   alpha_data_train = 0.5 )"},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/plot_gp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Magma or GP predictions — plot_gp","text":"pred_gp tibble data frame, typically coming pred_magma pred_gp functions. Required columns: 'Input', 'Mean', 'Var'. Additional covariate columns may present case multi-dimensional inputs. x_input vector character strings, indicating input displayed. NULL (default) 'Input' column used x-axis. providing 2-dimensional vector, corresponding columns used x-axis y-axis. data (Optional) tibble data frame. Required columns: 'Input', 'Output'. Additional columns covariates can specified. argument corresponds raw data prediction performed. data_train (Optional) tibble data frame, containing training data Magma model. data set format data argument additional required column 'ID' identifying different individuals/tasks. provided, data displayed backward colourful points (colour corresponding one individual/task). prior_mean (Optional) tibble data frame, containing 'Input' associated 'Output' prior mean parameter GP prediction. y_grid vector, indicating grid values y-axis probabilities computed heatmaps 1-dimensional predictions. NULL (default), vector length 50 defined, ranging min max 'Output' values contained pred_gp. heatmap logical value indicating whether GP prediction represented heatmap probabilities 1-dimensional inputs. FALSE (default), mean curve associated Credible Interval displayed. prob_CI number 0 1 (default 0.95), indicating level Credible Interval associated posterior mean curve. argument set 1, Credible Interval displayed. size_data number, controlling size data points. size_data_train number, controlling size data_train points. alpha_data_train number, 0 1, controlling transparency data_train points.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/plot_gp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Magma or GP predictions — plot_gp","text":"Visualisation Magma GP prediction (optional: display data points, training data points prior mean function). 1-D inputs, prediction represented mean curve associated 95%  Credible Interval, heatmap probabilities heatmap = TRUE. 2-D inputs, prediction represented heatmap, couple inputs x-axis y-axis associated gradient colours posterior mean values, whereas uncertainty indicated transparency (narrower Credible Interval, opaque associated colour, vice versa)","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/plot_gp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Magma or GP predictions — plot_gp","text":"","code":"TRUE #> [1] TRUE"},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/plot_magmaclust.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot MagmaClust predictions — plot_magmaclust","title":"Plot MagmaClust predictions — plot_magmaclust","text":"Display MagmaClust predictions. According dimension inputs, graph may mean curve (dim inputs = 1) heatmap (dim inputs = 2) probabilities. Moreover, MagmaClust can provide credible intervals visualising cluster-specific predictions (e.g. probable cluster). visualising full mixture--GPs prediction, can multimodal, user choose simple mean function full heatmap probabilities (informative slower).","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/plot_magmaclust.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot MagmaClust predictions — plot_magmaclust","text":"","code":"plot_magmaclust(   pred_clust,   cluster = \"all\",   x_input = NULL,   data = NULL,   data_train = NULL,   col_clust = FALSE,   prior_mean = NULL,   y_grid = NULL,   heatmap = FALSE,   prob_CI = 0.95,   size_data = 3,   size_data_train = 1,   alpha_data_train = 0.5 )"},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/plot_magmaclust.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot MagmaClust predictions — plot_magmaclust","text":"pred_clust list predictions, typically coming pred_magmaclust. Required elements: pred, mixture, mixture_pred. cluster character string, indicating cluster plot . '' (default) mixture GPs prediction displayed mean curve (1-D inputs) mean heatmap (2-D inputs). Alternatively, name one cluster provided, classic mean curve + credible interval displayed (1-D inputs), heatmap colour gradient mean transparency gradient Credible Interval (2-D inputs). x_input vector character strings, indicating input displayed. NULL (default) 'Input' column used x-axis. providing 2-dimensional vector, corresponding columns used x-axis y-axis. data (Optional) tibble data frame. Required columns: Input , Output. Additional columns covariates can specified. argument corresponds raw data prediction performed. data_train (Optional) tibble data frame, containing training data MagmaClust model. data set format data argument additional required column ID identifying different individuals/tasks. provided, data displayed backward colourful points (colour corresponding one individual cluster, see col_clust ). col_clust boolean indicating whether backward points coloured according individuals probable cluster. one wants colour clusters, column Cluster shall present data_train. advise use data_allocate_cluster automatically creating well-formatted dataset trained MagmaClust model. prior_mean (Optional) list providing, cluster, tibble containing prior mean parameters prediction. argument typically comes outcome hyperpost$mean, available train_magmaclust, pred_magmaclust functions. y_grid vector, indicating grid values y-axis probabilities computed heatmaps 1-dimensional predictions. NULL (default), vector length 50 defined, ranging min max 'Output' values contained pred. heatmap logical value indicating whether GP prediction represented heatmap probabilities 1-dimensional inputs. FALSE (default), mean curve (associated Credible Interval available) displayed. prob_CI number 0 1 (default 0.95), indicating level Credible Interval associated posterior mean curve. argument set 1, Credible Interval displayed. size_data number, controlling size data points. size_data_train number, controlling size data_train points. alpha_data_train number, 0 1, controlling transparency data_train points.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/plot_magmaclust.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot MagmaClust predictions — plot_magmaclust","text":"Visualisation MagmaClust prediction (optional: display data points, training data points prior mean functions). 1-D inputs, prediction represented mean curve (associated 95% Credible Interval cluster-specific predictions), heatmap probabilities heatmap = TRUE. case MagmaClust, heatmap representation preferred clarity, although default display remains mean curve quicker execution. 2-D inputs, prediction represented heatmap, couple inputs x-axis y-axis associated gradient colours posterior mean values, whereas uncertainty indicated transparency (narrower Credible Interval, opaque associated colour, vice versa). 1-D inputs, Credible Interval information available cluster-specific predictions.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/plot_magmaclust.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot MagmaClust predictions — plot_magmaclust","text":"","code":"TRUE #> [1] TRUE"},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/pred_gif.html","id":null,"dir":"Reference","previous_headings":"","what":"Magma prediction for ploting GIFs — pred_gif","title":"Magma prediction for ploting GIFs — pred_gif","text":"Generate Magma classic GP prediction format compatible GIF visualisation results. Magma prediction, either trained_model hyperpost argument required. Otherwise, classic GP prediction applied prior mean can specified mean argument.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/pred_gif.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Magma prediction for ploting GIFs — pred_gif","text":"","code":"pred_gif(   data,   trained_model = NULL,   hyperpost = NULL,   mean = NULL,   hp = NULL,   kern = \"SE\",   grid_inputs = NULL,   pen_diag = 1e-08 )"},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/pred_gif.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Magma prediction for ploting GIFs — pred_gif","text":"data tibble data frame. Required columns: 'Input', 'Output'. Additional columns covariates can specified. 'Input' column define variable used reference observations (e.g. time longitudinal data). 'Output' column specifies observed values (response variable). data frame can also provide many covariates desired, constraints column names. covariates additional inputs (explanatory variables) models also observed reference 'Input'. trained_model list, containing  information coming Magma model, previously trained using train_magma function. hyperpost list, containing elements 'mean' 'cov', parameters hyper-posterior distribution mean process. Typically, argument previous learning using train_magma, previous prediction pred_magma, argument get_hyperpost set TRUE. 'mean' element data frame two columns 'Input' 'Output'. 'cov' element covariance matrix colnames rownames corresponding 'Input' 'mean'. cases, column 'Input' contain values appearing 'Input' column data grid_inputs. mean Mean parameter GP. argument can specified various formats, : NULL (default). mean set 0 everywhere. number. mean constant function. function. function defined mean. tibble data frame. Required columns: Input, Output. Input values include least values data argument. hp named vector, tibble data frame hyper-parameters associated kern. columns/elements named according hyper-parameters used kern. function train_gp can used learn maximum-likelihood estimators hyper-parameters, kern kernel function, defining covariance structure GP. Several popular kernels (see Kernel Cookbook) already implemented can selected within following list: \"SE\": (default value) Squared Exponential Kernel (also called Radial Basis Function Gaussian kernel), \"LIN\": Linear kernel, \"PERIO\": Periodic kernel, \"RQ\": Rational Quadratic kernel. Compound kernels can created sums products kernels. combining kernels, simply provide formula character string elements separated whitespaces (e.g. \"SE + PERIO\"). elements treated sequentially left right, product operator '*' shall always used '+' operators (e.g. 'SE * LIN + RQ' valid whereas 'RQ + SE * LIN'  ). grid_inputs grid inputs (reference Input covariates) values GP evaluated. Ideally, argument tibble data frame, providing columns data, except 'Output'. Nonetheless, cases data provides one 'Input' column, grid_inputs argument can NULL (default) vector. vector used reference input prediction NULL, vector length 500 defined, ranging min max Input values data. pen_diag number. jitter term, added diagonal prevent numerical issues inverting nearly singular matrices.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/pred_gif.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Magma prediction for ploting GIFs — pred_gif","text":"tibble, representing Magma GP predictions two column 'Mean' 'Var', evaluated grid_inputs. column 'Input' additional covariates columns associated predicted values. additional 'Index' column created sake GIF creation using function plot_gif","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/pred_gif.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Magma prediction for ploting GIFs — pred_gif","text":"","code":"TRUE #> [1] TRUE"},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/pred_gp.html","id":null,"dir":"Reference","previous_headings":"","what":"Gaussian Process prediction — pred_gp","title":"Gaussian Process prediction — pred_gp","text":"Compute posterior distribution simple GP, using formalism Magma. providing observed data, prior mean covariance matrix (defining kernel associated hyper-parameters), mean covariance parameters posterior distribution computed grid inputs specified. predictive distribution can evaluated arbitrary inputs since GP infinite-dimensional object.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/pred_gp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gaussian Process prediction — pred_gp","text":"","code":"pred_gp(   data,   mean = NULL,   hp = NULL,   kern = \"SE\",   grid_inputs = NULL,   get_full_cov = FALSE,   plot = TRUE,   pen_diag = 1e-08 )"},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/pred_gp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gaussian Process prediction — pred_gp","text":"data tibble data frame. Required columns: 'Input', 'Output'. Additional columns covariates can specified. 'Input' column define variable used reference observations (e.g. time longitudinal data). 'Output' column specifies observed values (response variable). data frame can also provide many covariates desired, constraints column names. covariates additional inputs (explanatory variables) models also observed reference 'Input'. mean Mean parameter GP. argument can specified various formats, : NULL (default). mean set 0 everywhere. number. mean constant function. function. function defined mean. tibble data frame. Required columns: Input, Output. Input values include least values data argument. hp named vector, tibble data frame hyper-parameters associated kern. columns/elements named according hyper-parameters used kern. NULL (default), function train_gp called random initial values learning maximum-likelihood estimators hyper-parameters associated kern. kern kernel function, defining covariance structure GP. Several popular kernels (see Kernel Cookbook) already implemented can selected within following list: \"SE\": (default value) Squared Exponential Kernel (also called Radial Basis Function Gaussian kernel), \"LIN\": Linear kernel, \"PERIO\": Periodic kernel, \"RQ\": Rational Quadratic kernel. Compound kernels can created sums products kernels. combining kernels, simply provide formula character string elements separated whitespaces (e.g. \"SE + PERIO\"). elements treated sequentially left right, product operator '*' shall always used '+' operators (e.g. 'SE * LIN + RQ' valid whereas 'RQ + SE * LIN'  ). grid_inputs grid inputs (reference Input covariates) values GP evaluated. Ideally, argument tibble data frame, providing columns data, except 'Output'. Nonetheless, cases data provides one 'Input' column, grid_inputs argument can NULL (default) vector. vector used reference input prediction NULL, vector length 500 defined, ranging min max Input values data. get_full_cov logical value, indicating whether full posterior covariance matrix returned. plot logical value, indicating whether plot results automatically displayed. pen_diag number. jitter term, added diagonal prevent numerical issues inverting nearly singular matrices.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/pred_gp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gaussian Process prediction — pred_gp","text":"tibble, representing GP predictions two column 'Mean' 'Var', evaluated grid_inputs. column 'Input' additional covariates columns associated predicted values. get_full_cov argument TRUE, function returns list, tibble described defined 'pred' full posterior covariance matrix defined 'cov'.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/pred_gp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gaussian Process prediction — pred_gp","text":"","code":"TRUE #> [1] TRUE"},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/pred_magma.html","id":null,"dir":"Reference","previous_headings":"","what":"Magma prediction — pred_magma","title":"Magma prediction — pred_magma","text":"Compute posterior predictive distribution Magma. Providing data new individual/task, trained hyper-parameters previously trained Magma model, predictive distribution evaluated arbitrary inputs specified 'grid_inputs' argument.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/pred_magma.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Magma prediction — pred_magma","text":"","code":"pred_magma(   data,   trained_model = NULL,   hp = NULL,   kern = \"SE\",   grid_inputs = NULL,   hyperpost = NULL,   get_hyperpost = FALSE,   get_full_cov = FALSE,   plot = TRUE,   pen_diag = 1e-08 )"},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/pred_magma.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Magma prediction — pred_magma","text":"data tibble data frame. Required columns: 'Input', 'Output'. Additional columns covariates can specified. 'Input' column define variable used reference observations (e.g. time longitudinal data). 'Output' column specifies observed values (response variable). data frame can also provide many covariates desired, constraints column names. covariates additional inputs (explanatory variables) models also observed reference 'Input'. trained_model list, containing  information coming Magma model, previously trained using train_magma function. hp named vector, tibble data frame hyper-parameters associated kern. columns/elements named according hyper-parameters used kern. function train_gp can used learn maximum-likelihood estimators hyper-parameters. kern kernel function, defining covariance structure GP. Several popular kernels (see Kernel Cookbook) already implemented can selected within following list: \"SE\": (default value) Squared Exponential Kernel (also called Radial Basis Function Gaussian kernel), \"LIN\": Linear kernel, \"PERIO\": Periodic kernel, \"RQ\": Rational Quadratic kernel. Compound kernels can created sums products kernels. combining kernels, simply provide formula character string elements separated whitespaces (e.g. \"SE + PERIO\"). elements treated sequentially left right, product operator '*' shall always used '+' operators (e.g. 'SE * LIN + RQ' valid whereas 'RQ + SE * LIN'  ). grid_inputs grid inputs (reference Input covariates) values GP evaluated. Ideally, argument tibble data frame, providing columns data, except 'Output'. Nonetheless, cases data provides one 'Input' column, grid_inputs argument can NULL (default) vector. vector used reference input prediction NULL, vector length 500 defined, ranging min max Input values data. hyperpost list, containing elements 'mean' 'cov', parameters hyper-posterior distribution mean process. Typically, argument come previous learning using train_magma, previous prediction pred_magma, argument get_hyperpost set TRUE. 'mean' element data frame two columns 'Input' 'Output'. 'cov' element covariance matrix colnames rownames corresponding 'Input' 'mean'. cases, column 'Input' contain values appearing 'Input' column data grid_inputs. get_hyperpost logical value, indicating whether hyper-posterior distribution mean process returned. can useful planning perform several predictions grid inputs, since recomputation hyper-posterior can prohibitive high dimensional grids. get_full_cov logical value, indicating whether full posterior covariance matrix returned. plot logical value, indicating whether plot results automatically displayed. pen_diag number. jitter term, added diagonal prevent numerical issues inverting nearly singular matrices.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/pred_magma.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Magma prediction — pred_magma","text":"tibble, representing Magma predictions two column 'Mean' 'Var', evaluated grid_inputs. column 'Input' additional covariates columns associated predicted values. get_full_cov get_hyperpost arguments TRUE, function returns list, tibble described defined 'pred_gp' full posterior covariance matrix defined 'cov', hyper-posterior distribution mean process defined 'hyperpost'.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/pred_magma.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Magma prediction — pred_magma","text":"","code":"TRUE #> [1] TRUE"},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/pred_magmaclust.html","id":null,"dir":"Reference","previous_headings":"","what":"MagmaClust prediction — pred_magmaclust","title":"MagmaClust prediction — pred_magmaclust","text":"Compute posterior predictive distribution MagmaClust. Providing data new individual/task, trained hyper-parameters previously trained MagmaClust model, multi-task posterior distribution evaluated arbitrary inputs specified 'grid_inputs' argument. Due nature model, prediction defined mixture Gaussian distributions. Therefore present function computes parameters predictive distribution associated cluster, well posterior mixture probabilities new individual/task.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/pred_magmaclust.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"MagmaClust prediction — pred_magmaclust","text":"","code":"pred_magmaclust(   data,   trained_model = NULL,   mixture = NULL,   hp = NULL,   kern = \"SE\",   grid_inputs = NULL,   hyperpost = NULL,   prop_mixture = NULL,   get_hyperpost = FALSE,   get_full_cov = FALSE,   plot = TRUE,   pen_diag = 1e-08 )"},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/pred_magmaclust.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"MagmaClust prediction — pred_magmaclust","text":"data tibble data frame. Required columns: Input, Output. Additional columns covariates can specified. Input column define variable used reference observations (e.g. time longitudinal data). Output column specifies observed values (response variable). data frame can also provide many covariates desired, constraints column names. covariates additional inputs (explanatory variables) models also observed reference 'Input'. trained_model list, containing  information coming MagmaClust model, previously trained using train_magmaclust function. trained_model set NULL, hyperpost prop_mixture arguments mandatory perform required re-computations prediction succeed. mixture tibble data frame, indicating mixture probabilities cluster new individual/task. NULL, train_gp_clust function used compute posterior probabilities according data. hp named vector, tibble data frame hyper-parameters associated kern. columns/elements named according hyper-parameters used kern. train_gp_clust function can used learn maximum-likelihood estimators hyper-parameters. kern kernel function, defining covariance structure GP. Several popular kernels (see Kernel Cookbook) already implemented can selected within following list: \"SE\": (default value) Squared Exponential Kernel (also called Radial Basis Function Gaussian kernel), \"LIN\": Linear kernel, \"PERIO\": Periodic kernel, \"RQ\": Rational Quadratic kernel. Compound kernels can created sums products kernels. combining kernels, simply provide formula character string elements separated whitespaces (e.g. \"SE + PERIO\"). elements treated sequentially left right, product operator '*' shall always used '+' operators (e.g. 'SE * LIN + RQ' valid whereas 'RQ + SE * LIN'  ). grid_inputs grid inputs (reference Input covariates) values GP evaluated. Ideally, argument tibble data frame, providing columns data, except 'Output'. Nonetheless, cases data provides one 'Input' column, grid_inputs argument can NULL (default) vector. vector used reference input prediction NULL, vector length 500 defined, ranging min max Input values data. hyperpost list, containing elements mean, cov mixture parameters hyper-posterior distributions mean processes. Typically, argument come previous learning using train_magmaclust, previous prediction pred_magmaclust, argument get_hyperpost set TRUE. prop_mixture tibble named vector mixture proportions. name column element refer cluster. value associated cluster number 0 1. mixture trained_model set NULL, argument allows recompute mixture probabilities, thanks hyperpost argument train_gp_clust function. get_hyperpost logical value, indicating whether hyper-posterior distributions mean processes returned. can useful planning perform several predictions grid inputs, since recomputation hyper-posterior can prohibitive high dimensional grids. get_full_cov logical value, indicating whether full posterior covariance matrices returned. plot logical value, indicating whether plot results automatically displayed. pen_diag number. jitter term, added diagonal prevent numerical issues inverting nearly singular matrices.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/pred_magmaclust.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"MagmaClust prediction — pred_magmaclust","text":"list GP prediction results composed : pred: sub-list containing, cluster: pred_gp: tibble, representing GP predictions two column Mean Var, evaluated grid_inputs. column Input additional covariates columns associated predicted values. proba: number, posterior probability associated cluster. cov (get_full_cov = TRUE): matrix, full posterior covariance matrix associated cluster. mixture: tibble, indicating mixture probabilities cluster predicted individual/task. hyperpost (get_hyperpost = TRUE): list, containing hyper-posterior distributions information useful visualisation purposes.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/pred_magmaclust.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"MagmaClust prediction — pred_magmaclust","text":"","code":"TRUE #> [1] TRUE"},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/proba_max_cluster.html","id":null,"dir":"Reference","previous_headings":"","what":"Indicates the most probable cluster — proba_max_cluster","title":"Indicates the most probable cluster — proba_max_cluster","text":"Indicates probable cluster","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/proba_max_cluster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Indicates the most probable cluster — proba_max_cluster","text":"","code":"proba_max_cluster(mixture)"},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/proba_max_cluster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Indicates the most probable cluster — proba_max_cluster","text":"mixture tibble data frame containing mixture probabilities.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/proba_max_cluster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Indicates the most probable cluster — proba_max_cluster","text":"tibble, retaining probable cluster. column Cluster indicates cluster's name whereas Probarefers associated probability. ID initially column mixture (optional), function returns probable cluster different ID values.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/proba_max_cluster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Indicates the most probable cluster — proba_max_cluster","text":"","code":"TRUE #> [1] TRUE"},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/rq_kernel.html","id":null,"dir":"Reference","previous_headings":"","what":"Rational Quadratic Kernel — rq_kernel","title":"Rational Quadratic Kernel — rq_kernel","text":"Rational Quadratic Kernel","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/rq_kernel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rational Quadratic Kernel — rq_kernel","text":"","code":"rq_kernel(x, y, hp, deriv = NULL, vectorized = FALSE)"},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/rq_kernel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rational Quadratic Kernel — rq_kernel","text":"x vector (matrix vectorized = T) inputs. y vector (matrix vectorized = T) inputs. hp tibble, data frame named vector, containing kernel's hyperparameters. Required columns: 'rq_variance', 'rq_lengthscale', 'rq_scale'. deriv character, indicating according hyper-parameter derivative computed. NULL (default), function simply returns evaluation kernel. vectorized logical value, indicating whether function provides vectorized version speeded-calculations. TRUE, x y arguments vector matrix containing inputs kernel evaluated pairs elements. FALSE, x y arguments simply two inputs.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/rq_kernel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rational Quadratic Kernel — rq_kernel","text":"scalar, corresponding evaluation kernel.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/rq_kernel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rational Quadratic Kernel — rq_kernel","text":"","code":"MagmaClustR:::rq_kernel(   c(1, 0), c(0, 1),   tibble::tibble(rq_variance = 1, rq_lengthscale = 0.5, rq_scale = 3) ) #> [1] 1.56455"},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/sample_gp.html","id":null,"dir":"Reference","previous_headings":"","what":"Display Realisation From Posterior GP — sample_gp","title":"Display Realisation From Posterior GP — sample_gp","text":"realisation posterior GP distribution drawn displayed. According dimension inputs, graph may curve heatmap.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/sample_gp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Display Realisation From Posterior GP — sample_gp","text":"","code":"sample_gp(   pred_gp,   x_input = NULL,   data = NULL,   data_train = NULL,   prior_mean = NULL,   size_data = 3,   size_data_train = 1,   alpha_data_train = 0.5 )"},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/sample_gp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Display Realisation From Posterior GP — sample_gp","text":"pred_gp tibble data frame, typically coming pred_magma pred_gp functions. Required columns: 'Input', 'Mean', 'Var'. Additional covariate columns may present case multi-dimensional inputs. x_input vector character strings, indicating input displayed. NULL(default) 'Input' column used x-axis. providing 2-dimensional vector, corresponding columns used x-axis y-axis. data (Optional) tibble data frame, containing data used GP prediction. data_train (Optional) tibble data frame, containing training data Magma model. data set format data argument additional column 'ID' identifying different individuals/tasks. provided, data displayed backward colourful points (colour corresponding one individual/task). prior_mean (Optional) tibble data frame, containing 'Input' associated 'Output' prior mean parameter GP prediction. size_data number, controlling size data points. size_data_train number, controlling size data_train points. alpha_data_train number, 0 1, controlling transparency data_train points.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/sample_gp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Display Realisation From Posterior GP — sample_gp","text":"Draw visualise posterior distribution Magma GP prediction (optional: display data points, training data points prior mean function).","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/sample_gp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Display Realisation From Posterior GP — sample_gp","text":"","code":"TRUE #> [1] TRUE"},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/se_kernel.html","id":null,"dir":"Reference","previous_headings":"","what":"Squared Exponential Kernel — se_kernel","title":"Squared Exponential Kernel — se_kernel","text":"Squared Exponential Kernel","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/se_kernel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Squared Exponential Kernel — se_kernel","text":"","code":"se_kernel(x = NULL, y = NULL, hp, deriv = NULL, vectorized = F)"},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/se_kernel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Squared Exponential Kernel — se_kernel","text":"x vector (matrix vectorized = T) inputs. y vector (matrix vectorized = T) inputs. hp tibble, data frame named vector, containing kernel's hyperparameters. Required columns: 'se_variance', 'se_lengthscale'. deriv character, indicating according hyper-parameter derivative computed. NULL (default), function simply returns evaluation kernel. vectorized logical value, indicating whether function provides vectorized version speeded-calculations. TRUE, x y arguments vector matrix containing inputs kernel evaluated pairs elements. FALSE, x y arguments simply two inputs.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/se_kernel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Squared Exponential Kernel — se_kernel","text":"scalar, corresponding evaluation kernel.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/se_kernel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Squared Exponential Kernel — se_kernel","text":"","code":"MagmaClustR:::se_kernel(   c(1, 0), c(0, 1),   tibble::tibble(se_variance = 1, se_lengthscale = 0.5) ) #> [1] 1.482114"},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/select_nb_cluster.html","id":null,"dir":"Reference","previous_headings":"","what":"Select the optimal number of clusters — select_nb_cluster","title":"Select the optimal number of clusters — select_nb_cluster","text":"MagmaClust, clustering method, number K clusters provided hypothesis model. function implements model selection procedure, maximising variational BIC criterion, computed different values K. heuristic fast approximation procedure proposed well, although corresponding models properly trained.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/select_nb_cluster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select the optimal number of clusters — select_nb_cluster","text":"","code":"select_nb_cluster(   data,   fast_approx = TRUE,   grid_nb_cluster = 1:10,   ini_hp_k = NULL,   ini_hp_i = NULL,   kern_k = \"SE\",   kern_i = \"SE\",   plot = TRUE,   ... )"},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/select_nb_cluster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select the optimal number of clusters — select_nb_cluster","text":"data tibble data frame. Columns required: ID, Input , Output. Additional columns covariates can specified. ID column contains unique names/codes used identify individual/task (batch data). Input column define variable used reference observations (e.g. time longitudinal data). Output column specifies observed values (response variable). data frame can also provide many covariates desired, constraints column names. covariates additional inputs (explanatory variables) models also observed reference Input. fast_approx boolean, indicating whether fast approximation used selecting number clusters. TRUE, Magma MagmaClust model perform one E-step training, using fixed values hyper-parameters (ini_hp_k ini_hp_i, random values provided) models. resulting models considered trained, approach provides convenient heuristic avoid cumbersome model selection procedure. grid_nb_cluster vector integer, corresponding grid values tested number clusters. ini_hp_k tibble data frame hyper-parameters associated kern_k. ini_hp_i tibble data frame hyper-parameters associated kern_i. kern_k kernel function associated mean processes. kern_i kernel function associated individuals/tasks. plot boolean indicating whether plot V-BIC values numbers clusters displayed. ... additional argument passed train_magmaclust.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/select_nb_cluster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select the optimal number of clusters — select_nb_cluster","text":"list, containing results model selection procedure selecting optimal number clusters thanks V-BIC criterion maximisation. elements list : best_k: integer, indicating resulting optimal number clusters seq_vbic: vector, corresponding sequence V-BIC values associated models trained provided cluster's number grid_nb_cluster. trained_models: list, named associated number clusters, Magma MagmaClust models trained (approximated fast_approx = T) model selection procedure.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/select_nb_cluster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Select the optimal number of clusters — select_nb_cluster","text":"","code":"TRUE #> [1] TRUE"},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/simu_db.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate a dataset tailored for MagmaClustR — simu_db","title":"Simulate a dataset tailored for MagmaClustR — simu_db","text":"Simulate complete training dataset, may representative various applications. Several flexible arguments allow adjustment number individuals, observed inputs, values many parameters controlling data generation.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/simu_db.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate a dataset tailored for MagmaClustR — simu_db","text":"","code":"simu_db(   M = 10,   N = 10,   K = 1,   covariate = F,   grid = seq(0, 10, 0.05),   common_input = T,   common_hp = T,   add_hp = F,   add_clust = F,   int_mu_v = c(0, 2),   int_mu_l = c(0, 2),   int_i_v = c(0, 2),   int_i_l = c(0, 2),   int_i_sigma = c(0, 1),   m0_slope = c(-5, 5),   m0_intercept = c(-10, 10),   int_covariate = c(-5, 5) )"},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/simu_db.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate a dataset tailored for MagmaClustR — simu_db","text":"M integer. number individual per cluster. N integer. number observations per individual. K integer. number underlying clusters. covariate logical value indicating whether dataset include additional input covariate named 'Covariate'. grid vector numbers defining grid observations (.e. reference inputs). common_input logical value indicating whether reference inputs common individual. common_hp logical value indicating whether hyper-parameters common individual. TRUE K>1, hyper-parameters remain different clusters. add_hp logical value indicating whether values hyper-parameters added columns dataset. add_clust logical value indicating whether name clusters added column dataset. int_mu_v vector 2 numbers, defining interval admissible values variance hyper-parameter mean process' kernel. int_mu_l vector 2 numbers, defining interval admissible values lengthscale hyper-parameter mean process' kernel. int_i_v vector 2 numbers, defining interval admissible values variance hyper-parameter individual process' kernel. int_i_l vector 2 numbers, defining interval admissible values lengthscale hyper-parameter individual process' kernel. int_i_sigma vector 2 numbers, defining interval admissible values noise hyper-parameter. m0_slope vector 2 numbers, defining interval admissible values slope m0. m0_intercept vector 2 numbers, defining interval admissible values intercept m0. int_covariate vector 2 numbers, defining interval admissible values covariate inputs.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/simu_db.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate a dataset tailored for MagmaClustR — simu_db","text":"full dataset simulated training data.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/simu_db.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate a dataset tailored for MagmaClustR — simu_db","text":"","code":"if (FALSE) { simu_db(M = 5, N = 3) simu_db(M = 5, N = 3, common_input = FALSE) simu_db(M = 5, N = 3, common_hp = FALSE, add_hp = TRUE) simu_db(M = 5, N = 3, common_input = FALSE, common_hp = FALSE) }"},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/simu_indiv_se.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate a batch a data — simu_indiv_se","title":"Simulate a batch a data — simu_indiv_se","text":"Simulate batch output data, corresponding one individual, coming GP Squared Exponential kernel covariance structure, specified hyper-parameters input.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/simu_indiv_se.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate a batch a data — simu_indiv_se","text":"","code":"simu_indiv_se(ID, input, covariate, mean, v, l, sigma)"},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/simu_indiv_se.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate a batch a data — simu_indiv_se","text":"ID identification code, whether numeric character. input vector numbers. input variable used 'reference' input outputs. covariate vector numbers. additional input variable, observed along reference input. mean vector numbers. Prior mean values GP. v number. variance hyper-parameter SE kernel. l number. lengthscale hyper-parameter SE kernel. sigma number. noise hyper-parameter.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/simu_indiv_se.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate a batch a data — simu_indiv_se","text":"tibble containing batch output data along input additional information simulated individual.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/simu_indiv_se.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate a batch a data — simu_indiv_se","text":"","code":"MagmaClustR:::simu_indiv_se(\"A\", 1:10, 0, rep(0, 10), 2, 1, 0.5) #> # A tibble: 10 × 7 #>    ID     Output Input Covariate se_variance se_lengthscale noise #>    <chr>   <dbl> <int>     <dbl>       <dbl>          <dbl> <dbl> #>  1 A      0.0757     1         0           2              1   0.5 #>  2 A      0.959      2         0           2              1   0.5 #>  3 A     -0.604      3         0           2              1   0.5 #>  4 A     -1.85       4         0           2              1   0.5 #>  5 A     -1.59       5         0           2              1   0.5 #>  6 A     -3.19       6         0           2              1   0.5 #>  7 A     -2.97       7         0           2              1   0.5 #>  8 A     -2.93       8         0           2              1   0.5 #>  9 A      0.0979     9         0           2              1   0.5 #> 10 A     -0.325     10         0           2              1   0.5 MagmaClustR:::simu_indiv_se(\"B\", 1:10, 2:11, 3:12, 1, 1, 1) #> # A tibble: 10 × 7 #>    ID    Output Input Covariate se_variance se_lengthscale noise #>    <chr>  <dbl> <int>     <int>       <dbl>          <dbl> <dbl> #>  1 B       8.09     1         2           1              1     1 #>  2 B       8.28     2         3           1              1     1 #>  3 B      11.4      3         4           1              1     1 #>  4 B      11.4      4         5           1              1     1 #>  5 B      14.3      5         6           1              1     1 #>  6 B      14.1      6         7           1              1     1 #>  7 B      15.4      7         8           1              1     1 #>  8 B      15.2      8         9           1              1     1 #>  9 B      17.7      9        10           1              1     1 #> 10 B      20.9     10        11           1              1     1 MagmaClustR:::simu_indiv_se(\"C\", 1:10, 5, rep(0, 10), 2, 1, 0.5) #> # A tibble: 10 × 7 #>    ID    Output Input Covariate se_variance se_lengthscale noise #>    <chr>  <dbl> <int>     <dbl>       <dbl>          <dbl> <dbl> #>  1 C      4.33      1         5           2              1   0.5 #>  2 C     10.6       2         5           2              1   0.5 #>  3 C     10.9       3         5           2              1   0.5 #>  4 C      7.39      4         5           2              1   0.5 #>  5 C      3.69      5         5           2              1   0.5 #>  6 C      1.51      6         5           2              1   0.5 #>  7 C      0.352     7         5           2              1   0.5 #>  8 C      0.792     8         5           2              1   0.5 #>  9 C      3.51      9         5           2              1   0.5 #> 10 C      1.56     10         5           2              1   0.5"},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/sum_logL_GP_clust.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute a mixture of Gaussian log-likelihoods — sum_logL_GP_clust","title":"Compute a mixture of Gaussian log-likelihoods — sum_logL_GP_clust","text":"prediction step MagmaClust, EM algorithm used compute maximum likelihood estimator hyper-parameters along mixture probabilities new individual/task. function implements quantity maximised (.e. sum Gaussian log-likelihoods, weighted mixture probabilities). can also used monitor EM algorithm providing 'prop_mixture' argument, proper penalisation full log-likelihood.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/sum_logL_GP_clust.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute a mixture of Gaussian log-likelihoods — sum_logL_GP_clust","text":"","code":"sum_logL_GP_clust(   hp,   db,   mixture,   mean,   kern,   post_cov,   prop_mixture = NULL,   pen_diag )"},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/sum_logL_GP_clust.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute a mixture of Gaussian log-likelihoods — sum_logL_GP_clust","text":"hp tibble, data frame named vector hyper-parameters. db tibble containing data want evaluate logL . Required columns: Input, Output. Additional covariate columns allowed. mixture tibble data frame, indicating mixture probabilities cluster new individual/task. mean list hyper-posterior mean parameters clusters. kern kernel function. post_cov list hyper-posterior covariance parameters clusters. prop_mixture tibble named vector. name column element refer cluster. value associated cluster number 0 1, corresponding mixture proportions. pen_diag jitter term added covariance matrix avoid numerical issues inverting, cases nearly singular matrices.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/sum_logL_GP_clust.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute a mixture of Gaussian log-likelihoods — sum_logL_GP_clust","text":"number, expectation mixture Gaussian log-likelihoods prediction step MagmaClust. quantity supposed increase step EM algorithm, can used monitoring procedure.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/sum_logL_GP_clust.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute a mixture of Gaussian log-likelihoods — sum_logL_GP_clust","text":"","code":"TRUE #> [1] TRUE"},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/train_gp.html","id":null,"dir":"Reference","previous_headings":"","what":"Learning hyper-parameters of a Gaussian Process — train_gp","title":"Learning hyper-parameters of a Gaussian Process — train_gp","text":"Learning hyper-parameters new individual/task Magma required prediction procedure. function can also used learn hyper-parameters simple GP (just let hyperpost argument set NULL, use prior_mean instead). using within Magma, providing data new individual/task, hyper-posterior mean covariance parameters, initialisation values hyper-parameters, function computes maximum likelihood estimates hyper-parameters.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/train_gp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Learning hyper-parameters of a Gaussian Process — train_gp","text":"","code":"train_gp(   data,   prior_mean = NULL,   ini_hp = NULL,   kern = \"SE\",   hyperpost = NULL,   pen_diag = 1e-08 )"},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/train_gp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Learning hyper-parameters of a Gaussian Process — train_gp","text":"data tibble data frame. Required columns: Input, Output. Additional columns covariates can specified. Input column define variable used reference observations (e.g. time longitudinal data). Output column specifies observed values (response variable). data frame can also provide many covariates desired, constraints column names. covariates additional inputs (explanatory variables) models also observed reference Input. prior_mean Mean parameter GP. argument can specified various formats, : NULL (default). hyper-posterior mean set 0 everywhere. number. hyper-posterior mean constant function. vector length distinct Input values data argument. vector considered evaluation hyper-posterior mean function training Inputs. function. function defined hyper-posterior mean. tibble data frame. Required columns: Input, Output. Input values include least values data argument. ini_hp named vector, tibble data frame hyper-parameters associated kern new individual/task. columns named according hyper-parameters used kern. cases model includes noise term, ini_hp contain additional 'noise' column. NULL (default), random values used initialisation. kern kernel function, defining covariance structure GP. Several popular kernels (see Kernel Cookbook) already implemented can selected within following list: \"SE\": (default value) Squared Exponential Kernel (also called Radial Basis Function Gaussian kernel), \"LIN\": Linear kernel, \"PERIO\": Periodic kernel, \"RQ\": Rational Quadratic kernel. Compound kernels can created sums products kernels. combining kernels, simply provide formula character string elements separated whitespaces (e.g. \"SE + PERIO\"). ² elements treated sequentially left right, product operator '*' shall always used '+' operators (e.g. 'SE * LIN + RQ' valid whereas 'RQ + SE * LIN'  ). hyperpost list, containing elements 'mean' 'cov', parameters hyper-posterior distribution mean process. Typically, argument come previous learning using train_magma, hyperposterior function. hyperpost provided, likelihood maximised one involved Magma's prediction step, prior_mean argument ignored. classic GP training, leave hyperpost NULL. pen_diag number. jitter term, added diagonal prevent numerical issues inverting nearly singular matrices.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/train_gp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Learning hyper-parameters of a Gaussian Process — train_gp","text":"tibble, containing trained hyper-parameters kernel new individual/task.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/train_gp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Learning hyper-parameters of a Gaussian Process — train_gp","text":"","code":"TRUE #> [1] TRUE"},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/train_gp_clust.html","id":null,"dir":"Reference","previous_headings":"","what":"Prediction in MagmaClust: learning new HPs and mixture probabilities — train_gp_clust","title":"Prediction in MagmaClust: learning new HPs and mixture probabilities — train_gp_clust","text":"Learning hyper-parameters mixture probabilities new individual/task required MagmaClust prediction procedure. providing data new individual/task, hyper-posterior mean covariance parameters, mixture proportions, initialisation values hyper-parameters, train_gp_clust uses EM algorithm compute maximum likelihood estimates hyper-parameters hyper-posterior mixture probabilities new individual/task.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/train_gp_clust.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prediction in MagmaClust: learning new HPs and mixture probabilities — train_gp_clust","text":"","code":"train_gp_clust(   data,   prop_mixture = NULL,   ini_hp = NULL,   kern = \"SE\",   hyperpost = NULL,   pen_diag = 1e-08,   n_iter_max = 25,   cv_threshold = 0.001 )"},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/train_gp_clust.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prediction in MagmaClust: learning new HPs and mixture probabilities — train_gp_clust","text":"data tibble data frame. Required columns: Input, Output. Additional columns covariates can specified. Input column define variable used reference observations (e.g. time longitudinal data). Output column specifies observed values (response variable). data frame can also provide many covariates desired, constraints column names. covariates additional inputs (explanatory variables) models also observed reference Input. prop_mixture tibble named vector. name column element refer cluster. value associated cluster number 0 1, corresponding mixture proportions. ini_hp tibble data frame hyper-parameters associated kern, individual process kernel. kern kernel function, defining covariance structure GP. Several popular kernels (see Kernel Cookbook) already implemented can selected within following list: \"SE\": (default value) Squared Exponential Kernel (also called Radial Basis Function Gaussian kernel), \"LIN\": Linear kernel, \"PERIO\": Periodic kernel, \"RQ\": Rational Quadratic kernel. Compound kernels can created sums products kernels. combining kernels, simply provide formula character string elements separated whitespaces (e.g. \"SE + PERIO\"). ² elements treated sequentially left right, product operator '*' shall always used '+' operators (e.g. 'SE * LIN + RQ' valid whereas 'RQ + SE * LIN'  ). hyperpost list, containing elements mean, cov mixture parameters hyper-posterior distributions mean processes. Typically, argument come previous learning using train_magmaclust, previous prediction pred_magmaclust, argument get_hyperpost set TRUE. pen_diag number. jitter term, added diagonal prevent numerical issues inverting nearly singular matrices. n_iter_max number, indicating maximum number iterations EM algorithm proceed reaching convergence. cv_threshold number, indicating threshold likelihood gain EM algorithm stop.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/train_gp_clust.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prediction in MagmaClust: learning new HPs and mixture probabilities — train_gp_clust","text":"list, containing results EM algorithm used prediction step MagmaClust. elements list : hp: tibble optimal hyper-parameters new individual's GP. mixture: tibble mixture probabilities new individual.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/train_gp_clust.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prediction in MagmaClust: learning new HPs and mixture probabilities — train_gp_clust","text":"","code":"TRUE #> [1] TRUE"},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/train_magma.html","id":null,"dir":"Reference","previous_headings":"","what":"Training Magma with an EM algorithm — train_magma","title":"Training Magma with an EM algorithm — train_magma","text":"hyper-parameters hyper-posterior distribution involved Magma can learned thanks EM algorithm implemented train_magma. providing dataset, model hypotheses (hyper-prior mean parameter covariance kernels) initialisation values hyper-parameters, function computes maximum likelihood estimates HPs well mean covariance parameters Gaussian hyper-posterior distribution mean process.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/train_magma.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Training Magma with an EM algorithm — train_magma","text":"","code":"train_magma(   data,   prior_mean = NULL,   ini_hp_0 = NULL,   ini_hp_i = NULL,   kern_0 = \"SE\",   kern_i = \"SE\",   common_hp = T,   grid_inputs = NULL,   pen_diag = 1e-08,   n_iter_max = 25,   cv_threshold = 0.001,   fast_approx = FALSE )"},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/train_magma.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Training Magma with an EM algorithm — train_magma","text":"data tibble data frame. Required columns: ID, Input , Output. Additional columns covariates can specified. ID column contains unique names/codes used identify individual/task (batch data). Input column define variable used reference observations (e.g. time longitudinal data). Output column specifies observed values (response variable). data frame can also provide many covariates desired, constraints column names. covariates additional inputs (explanatory variables) models also observed reference Input. prior_mean Hyper-prior mean parameter (m_0) mean GP. argument can specified various formats, : NULL (default). hyper-prior mean set 0 everywhere. number. hyper-prior mean constant function. vector length distinct Input values data argument. vector considered evaluation hyper-prior mean function training Inputs. function. function defined hyper_prior mean. tibble data frame. Required columns: Input, Output. Input values include least values data argument. ini_hp_0 named vector, tibble data frame hyper-parameters associated kern_0, mean process' kernel. columns/elements named according hyper-parameters used kern_0. NULL (default), random values used initialisation. ini_hp_i tibble data frame hyper-parameters associated kern_i, individual processes' kernel. Required column : ID. ID column contains unique names/codes used identify individual/task. columns named according hyper-parameters used kern_i. Compared ini_hp_0 contain additional 'noise' column initialise noise hyper-parameter model. NULL (default), random values used initialisation. kern_0 kernel function, associated mean GP. Several popular kernels (see Kernel Cookbook) already implemented can selected within following list: \"SE\": (default value) Squared Exponential Kernel (also called Radial Basis Function Gaussian kernel), \"LIN\": Linear kernel, \"PERIO\": Periodic kernel, \"RQ\": Rational Quadratic kernel. Compound kernels can created sums products kernels. combining kernels, simply provide formula character string elements separated whitespaces (e.g. \"SE + PERIO\"). elements treated sequentially left right, product operator '*' shall always used '+' operators (e.g. 'SE * LIN + RQ' valid whereas 'RQ + SE * LIN'  ). kern_i kernel function, associated individual GPs. (\"SE\", \"PERIO\" \"RQ\" also available ). common_hp logical value, indicating whether set hyper-parameters assumed common individuals. grid_inputs vector, indicating grid additional reference inputs mean process' hyper-posterior evaluated. pen_diag number. jitter term, added diagonal prevent numerical issues inverting nearly singular matrices. n_iter_max number, indicating maximum number iterations EM algorithm proceed reaching convergence. cv_threshold number, indicating threshold likelihood gain EM algorithm stop. convergence condition defined difference likelihoods two consecutive steps, divided absolute value last one ( \\((LL_n - LL_n-1) / |LL_n|\\) ). fast_approx boolean, indicating whether EM algorithm stop one iteration E-step. advanced feature mainly used provide faster approximation model selection procedure, preventing optimisation hyper-parameters.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/train_magma.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Training Magma with an EM algorithm — train_magma","text":"list, gathering results EM algorithm used training Magma. elements list : hp_0: tibble trained hyper-parameters mean process' kernel. hp_i: tibble trained hyper-parameters individual processes' kernels. hyperpost: sub-list gathering parameters mean processes' hyper-posterior distributions, namely: mean: tibble, hyper-posterior mean parameter (Output) evaluated training reference Input. cov: matrix, covariance parameter hyper-posterior distribution mean process. pred: tibble, predicted mean variance Input mean process' hyper-posterior distribution format allows direct visualisation GP prediction. ini_args: list containing initial function arguments values hyper-prior mean, hyper-parameters. particular, arguments set NULL, ini_args allows us retrieve (randomly chosen) initialisations used training. seq_loglikelihood: vector, containing sequence log-likelihood values associated iteration. converged: logical value indicated whether EM algorithm converged . training_time: Total running time complete training.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/train_magma.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Training Magma with an EM algorithm — train_magma","text":"user can specify custom kernel functions argument kern_0 kern_i. hyper-parameters used kernel explicit names, contained within hp argument. hp typically defined named vector data frame. Although mandatory train_magma function run, gradients can provided within kernel function definition. See example se_kernel create custom kernel function displaying adequate format used Magma.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/train_magma.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Training Magma with an EM algorithm — train_magma","text":"","code":"TRUE #> [1] TRUE"},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/train_magmaclust.html","id":null,"dir":"Reference","previous_headings":"","what":"Training MagmaClust with a Variational EM algorithm — train_magmaclust","title":"Training MagmaClust with a Variational EM algorithm — train_magmaclust","text":"hyper-parameters hyper-posterior distributions involved MagmaClust can learned thanks VEM algorithm implemented train_magmaclust. providing dataset, model hypotheses (hyper-prior mean parameters, covariance kernels number clusters) initialisation values hyper-parameters, function computes maximum likelihood estimates HPs well mean covariance parameters Gaussian hyper-posterior distributions mean processes.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/train_magmaclust.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Training MagmaClust with a Variational EM algorithm — train_magmaclust","text":"","code":"train_magmaclust(   data,   nb_cluster = NULL,   prior_mean_k = NULL,   ini_hp_k = NULL,   ini_hp_i = NULL,   kern_k = \"SE\",   kern_i = \"SE\",   ini_mixture = NULL,   common_hp_k = T,   common_hp_i = T,   grid_inputs = NULL,   pen_diag = 1e-08,   n_iter_max = 25,   cv_threshold = 0.001,   fast_approx = FALSE )"},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/train_magmaclust.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Training MagmaClust with a Variational EM algorithm — train_magmaclust","text":"data tibble data frame. Columns required: ID, Input , Output. Additional columns covariates can specified. ID column contains unique names/codes used identify individual/task (batch data). Input column define variable used reference observations (e.g. time longitudinal data). Output column specifies observed values (response variable). data frame can also provide many covariates desired, constraints column names. covariates additional inputs (explanatory variables) models also observed reference Input. nb_cluster number, indicating number clusters individuals/tasks assumed exist among dataset. prior_mean_k set hyper-prior mean parameters (m_k) K mean GPs, one value cluster. cluster. argument can specified various formats, : NULL (default). hyper-prior means set 0 everywhere. numerical vector length number clusters. number associated one cluster, considered hyper-prior mean parameter cluster (.e. constant function Input). list functions. function associated one cluster. functions evaluated Input values, provide specific hyper-prior mean vectors cluster. ini_hp_k tibble data frame hyper-parameters associated kern_k, mean process' kernel. Required column : ID. ID column contains unique names/codes used identify cluster. columns named according hyper-parameters used kern_k. ini_hp_i tibble data frame hyper-parameters associated kern_i, individual processes' kernel. Required column : ID. ID column contains unique names/codes used identify individual/task. columns named according hyper-parameters used kern_i. kern_k kernel function, associated mean GPs. Several popular kernels (see Kernel Cookbook) already implemented can selected within following list: \"SE\": (default value) Squared Exponential Kernel (also called Radial Basis Function Gaussian kernel), \"LIN\": Linear kernel, \"PERIO\": Periodic kernel, \"RQ\": Rational Quadratic kernel. Compound kernels can created sums products kernels. combining kernels, simply provide formula character string elements separated whitespaces (e.g. \"SE + PERIO\"). elements treated sequentially left right, product operator '*' shall always used '+' operators (e.g. 'SE * LIN + RQ' valid whereas 'RQ + SE * LIN'  ). kern_i kernel function, associated individual GPs. (See details kern_k). ini_mixture Initial values probability belong cluster individual (ini_mixture can used k-means initialisation. Used default NULL). common_hp_k boolean indicating whether hyper-parameters common among mean GPs. common_hp_i boolean indicating whether hyper-parameters common among individual GPs. grid_inputs vector, indicating grid additional reference inputs mean processes' hyper-posteriors evaluated. pen_diag number. jitter term, added diagonal prevent numerical issues inverting nearly singular matrices. n_iter_max number, indicating maximum number iterations VEM algorithm proceed reaching convergence. cv_threshold number, indicating threshold likelihood gain VEM algorithm stop. convergence condition defined difference elbo two consecutive steps, divided absolute value last one ( \\((ELBO_n - ELBO_{n-1}) / |ELBO_n| \\) ). fast_approx boolean, indicating whether VEM algorithm stop one iteration VE-step. advanced feature mainly used provide faster approximation model selection procedure, preventing optimisation hyper-parameters.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/train_magmaclust.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Training MagmaClust with a Variational EM algorithm — train_magmaclust","text":"list, containing results VEM algorithm used training step MagmaClust. elements list : hp_k: tibble containing trained hyper-parameters mean process' kernel mixture proportions cluster. hp_i: tibble containing trained hyper-parameters individual processes' kernels. hyperpost: sub-list containing parameters mean processes' hyper-posterior distribution, namely: mean: list tibbles containing, cluster, hyper-posterior mean parameters evaluated Input. cov: list matrices containing, cluster, hyper-posterior covariance parameter mean process. mixture: tibble, indicating mixture probabilities cluster individual. ini_args: list containing initial function arguments values hyper-prior means, hyper-parameters. particular, arguments set NULL, ini_args allows us retrieve (randomly chosen) initialisations used training. seq_elbo: vector, containing sequence ELBO values associated iteration. converged: logical value indicated whether algorithm converged. training_time: Total running time complete training.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/train_magmaclust.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Training MagmaClust with a Variational EM algorithm — train_magmaclust","text":"user can specify custom kernel functions argument kern_k kern_i. hyper-parameters used kernel explicit names, contained within hp argument. hp typically defined named vector data frame. Although mandatory train_magmaclust function run, gradients can provided within kernel function definition. See example se_kernel create custom kernel function displaying adequate format used MagmaClust.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/train_magmaclust.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Training MagmaClust with a Variational EM algorithm — train_magmaclust","text":"","code":"TRUE #> [1] TRUE"},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/update_mixture.html","id":null,"dir":"Reference","previous_headings":"","what":"Update the mixture probabilities for each individual and each cluster — update_mixture","title":"Update the mixture probabilities for each individual and each cluster — update_mixture","text":"Update mixture probabilities individual cluster","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/update_mixture.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update the mixture probabilities for each individual and each cluster — update_mixture","text":"","code":"update_mixture(db, mean_k, cov_k, hp, kern, prop_mixture, pen_diag)"},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/update_mixture.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update the mixture probabilities for each individual and each cluster — update_mixture","text":"db tibble data frame. Columns required: ID, Input, Output. Additional columns covariates can specified. mean_k list K hyper-posterior mean parameters. cov_k list K hyper-posterior covariance matrices. hp named vector, tibble data frame hyper-parameters associated kern, individual process' kernel. columns/elements named according hyper-parameters used kern. kern kernel function, defining covariance structure individual GPs. prop_mixture tibble containing hyper-parameters associated individual, indicating cluster belongs. pen_diag number. jitter term, added diagonal prevent numerical issues inverting nearly singular matrices.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/update_mixture.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update the mixture probabilities for each individual and each cluster — update_mixture","text":"Compute hyper-posterior multinomial distributions updating mixture probabilities.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/update_mixture.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update the mixture probabilities for each individual and each cluster — update_mixture","text":"","code":"TRUE #> [1] TRUE"},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/ve_step.html","id":null,"dir":"Reference","previous_headings":"","what":"E-Step of the VEM algorithm — ve_step","title":"E-Step of the VEM algorithm — ve_step","text":"Expectation step Variational EM algorithm used compute parameters hyper-posteriors distributions mean processes mixture variables involved MagmaClust.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/ve_step.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"E-Step of the VEM algorithm — ve_step","text":"","code":"ve_step(db, m_k, kern_k, kern_i, hp_k, hp_i, old_mixture, pen_diag)"},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/ve_step.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"E-Step of the VEM algorithm — ve_step","text":"db tibble data frame. Columns required: ID, Input, Output. Additional columns covariates can specified. m_k named list vectors, corresponding prior mean parameters K mean GPs. kern_k kernel function, associated K mean GPs. kern_i kernel function, associated M individual GPs. hp_k named vector, tibble data frame hyper-parameters associated kern_k. hp_i named vector, tibble data frame hyper-parameters associated kern_i. old_mixture list mixture values previous iteration. pen_diag number. jitter term, added diagonal prevent numerical issues inverting nearly singular matrices.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/ve_step.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"E-Step of the VEM algorithm — ve_step","text":"named list, containing elements mean, tibble containing Input associated Output hyper-posterior mean parameters, cov, hyper-posterior covariance matrices, mixture, probabilities belong cluster individual.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/ve_step.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"E-Step of the VEM algorithm — ve_step","text":"","code":"if (FALSE) { k <- seq_len(3) m_k <- c(\"K1\" = 0, \"K2\" = 0, \"K3\" = 0)  db <- simu_db(N = 10, common_input = TRUE) hp_k <- MagmaClustR:::hp(\"SE\", list_ID = names(m_k)) hp_i <- MagmaClustR:::hp(\"SE\", list_ID = unique(db$ID))  old_mixture <- MagmaClustR:::ini_mixture(   db = db, k = length(k),   nstart = 50 ) prop_mixture_1 <- old_mixture %>% dplyr::select(-.data$ID) hp_k[[\"prop_mixture\"]] <- sapply(prop_mixture_1, function(x) {   x %>%     unlist() %>%     mean() })  MagmaClustR:::ve_step(db, m_k, \"SE\", \"SE\", hp_k, hp_i, old_mixture, 0.001) }"},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/vm_step.html","id":null,"dir":"Reference","previous_headings":"","what":"V-Step of the VEM algorithm — vm_step","title":"V-Step of the VEM algorithm — vm_step","text":"Maximization step Variational EM algorithm used compute hyper-parameters kernels involved MagmaClust.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/vm_step.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"V-Step of the VEM algorithm — vm_step","text":"","code":"vm_step(   db,   old_hp_k,   old_hp_i,   list_mu_param,   kern_k,   kern_i,   m_k,   common_hp_k,   common_hp_i,   pen_diag )"},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/vm_step.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"V-Step of the VEM algorithm — vm_step","text":"db tibble data frame. Columns required: ID, Input, Output. Additional columns covariates can specified. old_hp_k named vector, tibble data frame, containing hyper-parameters previous M-step (initialisation) associated mean GPs. old_hp_i named vector, tibble data frame, containing hyper-parameters previous  M-step (initialisation) associated individual GPs. list_mu_param List parameters K mean GPs. kern_k kernel used compute covariance matrix mean GP corresponding timestamps. kern_i kernel used compute covariance matrix individuals GP corresponding timestamps. m_k named list prior mean parameters K mean GPs. Length = 1 nrow(unique(db$Input)) common_hp_k boolean indicating whether hp common among mean GPs (mu_k) common_hp_i boolean indicating whether hp common among individual GPs (y_i) pen_diag number. jitter term, added diagonal prevent numerical issues inverting nearly singular matrices.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/vm_step.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"V-Step of the VEM algorithm — vm_step","text":"named list, containing elements hp_k, tibble containing hyper-parameters associated cluster, hp_i, tibble containing hyper-parameters associated individual GPs, prop_mixture_k, tibble containing hyper-parameters associated individual, indicating probabilities belong cluster.","code":""},{"path":"https://arthurleroy.github.io/MagmaClustR/reference/vm_step.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"V-Step of the VEM algorithm — vm_step","text":"","code":"if (FALSE) {  ## Common inputs across individuals & cluster and differents HPs ## across individuals & Cluster k <- seq_len(2) m_k <- c(\"K1\" = 0, \"K2\" = 0)  db <- simu_db(N = 10, common_input = FALSE) hp_k <- MagmaClustR:::hp(\"SE\", list_ID = names(m_k)) hp_i <- MagmaClustR:::hp(\"SE\", list_ID = unique(db$ID))  old_mixture <- MagmaClustR:::ini_mixture(   db = db, k = length(k),   nstart = 50 ) prop_mixture_1 <- old_mixture %>% dplyr::select(-.data$ID) hp_k[[\"prop_mixture\"]] <- sapply(prop_mixture_1, function(x) {   x %>%     unlist() %>%     mean() })  post <- MagmaClustR:::ve_step(   db, m_k, \"SE\", \"SE\", hp_k, hp_i, old_mixture,   0.001 )  MagmaClustR:::vm_step(db, hp_k, hp_i, post, \"SE\", \"SE\", m_k, FALSE, FALSE, 2)   ## Different inputs across individuals & cluster and common HPs k <- seq_len(4) m_k <- c(\"K1\" = 0, \"K2\" = 0, \"K3\" = 0, \"K4\" = 0) db <- simu_db(N = 10, common_input = FALSE) hp_k <- MagmaClustR:::hp(\"SE\", list_ID = names(m_k), common_hp = TRUE) hp_i <- MagmaClustR:::hp(\"SE\", list_ID = unique(db$ID), common_hp = TRUE)  old_mixture <- MagmaClustR:::ini_mixture(   db = db, k = length(k),   nstart = 50 ) prop_mixture_1 <- old_mixture %>% dplyr::select(-.data$ID) hp_k[[\"prop_mixture\"]] <- sapply(prop_mixture_1, function(x) {   x %>%     unlist() %>%     mean() })  post <- MagmaClustR:::ve_step(   db, m_k, \"SE\", \"SE\", hp_k, hp_i, old_mixture,   0.001 )  MagmaClustR:::vm_step(db, hp_k, hp_i, post, \"SE\", \"SE\", m_k, TRUE, TRUE, 0.1) }"}]
